
stop_watch_task_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001d6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000022a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000022a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000025c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000848  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005e8  00000000  00000000  00000b08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003d1  00000000  00000000  000010f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000014c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000036a  00000000  00000000  000014f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002f0  00000000  00000000  00001862  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001b52  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4c 00 	call	0x98	; 0x98 <main>
  64:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <segment_display_BCD>:
#define F_CPU 8000000
#include <util/delay.h>
/***************************************************************************/
void segment_display_BCD(unsigned char n)
{
	int x = n/10;
  6c:	9d ec       	ldi	r25, 0xCD	; 205
  6e:	89 9f       	mul	r24, r25
  70:	91 2d       	mov	r25, r1
  72:	11 24       	eor	r1, r1
  74:	96 95       	lsr	r25
  76:	96 95       	lsr	r25
  78:	96 95       	lsr	r25
	int y = n%10;
  7a:	39 2f       	mov	r19, r25
  7c:	33 0f       	add	r19, r19
  7e:	23 2f       	mov	r18, r19
  80:	22 0f       	add	r18, r18
  82:	22 0f       	add	r18, r18
  84:	23 0f       	add	r18, r19
  86:	82 1b       	sub	r24, r18
  88:	28 2f       	mov	r18, r24
	PORTA = y|x<<4;
  8a:	30 e1       	ldi	r19, 0x10	; 16
  8c:	93 9f       	mul	r25, r19
  8e:	c0 01       	movw	r24, r0
  90:	11 24       	eor	r1, r1
  92:	82 2b       	or	r24, r18
  94:	8b bb       	out	0x1b, r24	; 27
  96:	08 95       	ret

00000098 <main>:
}

int main(void)
{
	DDRA = 0Xff;
  98:	8f ef       	ldi	r24, 0xFF	; 255
  9a:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0;       //BUTTON 2  INC
  9c:	14 ba       	out	0x14, r1	; 20
	PORTC  = 0XFF;
  9e:	85 bb       	out	0x15, r24	; 21
	DDRD = 0;       // BUTTON 1  DEC  && BUTTON 3 MODE
  a0:	11 ba       	out	0x11, r1	; 17
	PORTD  = 0XFF;
  a2:	82 bb       	out	0x12, r24	; 18
	DDRB = 0xFF;   // LED
  a4:	87 bb       	out	0x17, r24	; 23
	u8 i = 30;
	u8 resumeFlag = 1;
	u8 last_value2 = i;
	u8 last_value1;
	u8 f=0;
	segment_display_BCD(i);
  a6:	8e e1       	ldi	r24, 0x1E	; 30
  a8:	0e 94 36 00 	call	0x6c	; 0x6c <segment_display_BCD>
	u8 ModeFlag = 0;
	u8 i = 30;
	u8 resumeFlag = 1;
	u8 last_value2 = i;
	u8 last_value1;
	u8 f=0;
  ac:	f1 2c       	mov	r15, r1
	/*********stop watch***********/
	
	u8 ModeFlag = 0;
	u8 i = 30;
	u8 resumeFlag = 1;
	u8 last_value2 = i;
  ae:	0e e1       	ldi	r16, 0x1E	; 30
	DDRB = 0xFF;   // LED
	/*********stop watch***********/
	
	u8 ModeFlag = 0;
	u8 i = 30;
	u8 resumeFlag = 1;
  b0:	11 e0       	ldi	r17, 0x01	; 1
	PORTD  = 0XFF;
	DDRB = 0xFF;   // LED
	/*********stop watch***********/
	
	u8 ModeFlag = 0;
	u8 i = 30;
  b2:	ce e1       	ldi	r28, 0x1E	; 30
	DDRD = 0;       // BUTTON 1  DEC  && BUTTON 3 MODE
	PORTD  = 0XFF;
	DDRB = 0xFF;   // LED
	/*********stop watch***********/
	
	u8 ModeFlag = 0;
  b4:	d0 e0       	ldi	r29, 0x00	; 0
  b6:	01 c0       	rjmp	.+2      	; 0xba <main+0x22>
  b8:	0c 2f       	mov	r16, r28
	u8 last_value1;
	u8 f=0;
	segment_display_BCD(i);
	while (1)
	{
		if(READ_BIT(PIND,0)==0)   //BUT MODE
  ba:	80 99       	sbic	0x10, 0	; 16
  bc:	06 c0       	rjmp	.+12     	; 0xca <main+0x32>
		{
			ModeFlag = !ModeFlag;
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	d1 11       	cpse	r29, r1
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	d8 2f       	mov	r29, r24
			while(READ_BIT(PIND,0)==0);
  c6:	80 9b       	sbis	0x10, 0	; 16
  c8:	fe cf       	rjmp	.-4      	; 0xc6 <main+0x2e>
		}
		
		if(ModeFlag==0)
  ca:	d1 11       	cpse	r29, r1
  cc:	38 c0       	rjmp	.+112    	; 0x13e <main+0xa6>
		{
			// BUT resume
			if(READ_BIT(PIND,4)==0)
  ce:	84 99       	sbic	0x10, 4	; 16
  d0:	07 c0       	rjmp	.+14     	; 0xe0 <main+0x48>
			{
				resumeFlag=!resumeFlag;
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	11 11       	cpse	r17, r1
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	18 2f       	mov	r17, r24
				f=0;
				while(READ_BIT(PIND,4)==0);
  da:	84 9b       	sbis	0x10, 4	; 16
  dc:	fe cf       	rjmp	.-4      	; 0xda <main+0x42>
		{
			// BUT resume
			if(READ_BIT(PIND,4)==0)
			{
				resumeFlag=!resumeFlag;
				f=0;
  de:	f1 2c       	mov	r15, r1
				while(READ_BIT(PIND,4)==0);
			}

			if(resumeFlag ==0 &&  f==0)
  e0:	11 11       	cpse	r17, r1
  e2:	20 c0       	rjmp	.+64     	; 0x124 <main+0x8c>
  e4:	f1 10       	cpse	r15, r1
  e6:	1e c0       	rjmp	.+60     	; 0x124 <main+0x8c>
			{
				i--;
  e8:	c1 50       	subi	r28, 0x01	; 1
				segment_display_BCD(i);
  ea:	8c 2f       	mov	r24, r28
  ec:	0e 94 36 00 	call	0x6c	; 0x6c <segment_display_BCD>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f0:	2f ef       	ldi	r18, 0xFF	; 255
  f2:	80 e7       	ldi	r24, 0x70	; 112
  f4:	92 e0       	ldi	r25, 0x02	; 2
  f6:	21 50       	subi	r18, 0x01	; 1
  f8:	80 40       	sbci	r24, 0x00	; 0
  fa:	90 40       	sbci	r25, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <main+0x5e>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <main+0x68>
 100:	00 00       	nop
				_delay_ms(100);
				
				if(i==0 )
 102:	c1 11       	cpse	r28, r1
 104:	12 c0       	rjmp	.+36     	; 0x12a <main+0x92>
				{
					// LED on
					PORTB = 0b00000010;
 106:	82 e0       	ldi	r24, 0x02	; 2
 108:	88 bb       	out	0x18, r24	; 24
 10a:	2f ef       	ldi	r18, 0xFF	; 255
 10c:	89 e6       	ldi	r24, 0x69	; 105
 10e:	98 e1       	ldi	r25, 0x18	; 24
 110:	21 50       	subi	r18, 0x01	; 1
 112:	80 40       	sbci	r24, 0x00	; 0
 114:	90 40       	sbci	r25, 0x00	; 0
 116:	e1 f7       	brne	.-8      	; 0x110 <main+0x78>
 118:	00 c0       	rjmp	.+0      	; 0x11a <main+0x82>
 11a:	00 00       	nop
					_delay_ms(1000);
					PORTB = 0;
 11c:	18 ba       	out	0x18, r1	; 24
					last_value1 = last_value2;
					f=1;
 11e:	ff 24       	eor	r15, r15
 120:	f3 94       	inc	r15
 122:	03 c0       	rjmp	.+6      	; 0x12a <main+0x92>
				
			}
			//pause
			else
			{
				segment_display_BCD(i);
 124:	8c 2f       	mov	r24, r28
 126:	0e 94 36 00 	call	0x6c	; 0x6c <segment_display_BCD>
			}
			
			// BUT reset
			if(READ_BIT(PINC,4)==0)
 12a:	9c 99       	sbic	0x13, 4	; 19
 12c:	c6 cf       	rjmp	.-116    	; 0xba <main+0x22>
			{
				i=last_value2;
				segment_display_BCD(i);
 12e:	80 2f       	mov	r24, r16
 130:	0e 94 36 00 	call	0x6c	; 0x6c <segment_display_BCD>
				resumeFlag=1;
				while(READ_BIT(PINC,4)==0);
 134:	9c 9b       	sbis	0x13, 4	; 19
 136:	fe cf       	rjmp	.-4      	; 0x134 <main+0x9c>
			}
			
			// BUT reset
			if(READ_BIT(PINC,4)==0)
			{
				i=last_value2;
 138:	c0 2f       	mov	r28, r16
				segment_display_BCD(i);
				resumeFlag=1;
 13a:	11 e0       	ldi	r17, 0x01	; 1
 13c:	be cf       	rjmp	.-132    	; 0xba <main+0x22>
			
		}
		else
		{
			// BUT inc
			if(READ_BIT(PINC,4)==0)
 13e:	9c 99       	sbic	0x13, 4	; 19
 140:	23 c0       	rjmp	.+70     	; 0x188 <main+0xf0>
			{
				i++;
 142:	cf 5f       	subi	r28, 0xFF	; 255
				if(i==100)
 144:	c4 36       	cpi	r28, 0x64	; 100
 146:	09 f4       	brne	.+2      	; 0x14a <main+0xb2>
				{
					i=0;
 148:	c0 e0       	ldi	r28, 0x00	; 0
 14a:	2f ef       	ldi	r18, 0xFF	; 255
 14c:	82 e5       	ldi	r24, 0x52	; 82
 14e:	97 e0       	ldi	r25, 0x07	; 7
 150:	21 50       	subi	r18, 0x01	; 1
 152:	80 40       	sbci	r24, 0x00	; 0
 154:	90 40       	sbci	r25, 0x00	; 0
 156:	e1 f7       	brne	.-8      	; 0x150 <main+0xb8>
 158:	00 c0       	rjmp	.+0      	; 0x15a <main+0xc2>
 15a:	00 00       	nop
				}
				_delay_ms(300);
				segment_display_BCD(i);
 15c:	8c 2f       	mov	r24, r28
 15e:	0e 94 36 00 	call	0x6c	; 0x6c <segment_display_BCD>
				while(READ_BIT(PINC,4)==0)
 162:	10 c0       	rjmp	.+32     	; 0x184 <main+0xec>
				{
					i++;
 164:	cf 5f       	subi	r28, 0xFF	; 255
					
					if(i==100)
 166:	c4 36       	cpi	r28, 0x64	; 100
 168:	09 f4       	brne	.+2      	; 0x16c <main+0xd4>
					{
						i=0;
 16a:	c0 e0       	ldi	r28, 0x00	; 0
 16c:	2f e7       	ldi	r18, 0x7F	; 127
 16e:	88 e3       	ldi	r24, 0x38	; 56
 170:	91 e0       	ldi	r25, 0x01	; 1
 172:	21 50       	subi	r18, 0x01	; 1
 174:	80 40       	sbci	r24, 0x00	; 0
 176:	90 40       	sbci	r25, 0x00	; 0
 178:	e1 f7       	brne	.-8      	; 0x172 <main+0xda>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <main+0xe4>
 17c:	00 00       	nop
					}
					_delay_ms(50);
					segment_display_BCD(i);
 17e:	8c 2f       	mov	r24, r28
 180:	0e 94 36 00 	call	0x6c	; 0x6c <segment_display_BCD>
				{
					i=0;
				}
				_delay_ms(300);
				segment_display_BCD(i);
				while(READ_BIT(PINC,4)==0)
 184:	9c 9b       	sbis	0x13, 4	; 19
 186:	ee cf       	rjmp	.-36     	; 0x164 <main+0xcc>

				
				
			}
			// BUT dec
			if(READ_BIT(PIND,4)==0)
 188:	84 99       	sbic	0x10, 4	; 16
 18a:	96 cf       	rjmp	.-212    	; 0xb8 <main+0x20>
			{
				i--;
 18c:	c1 50       	subi	r28, 0x01	; 1
 18e:	08 f4       	brcc	.+2      	; 0x192 <main+0xfa>
				
				if(i==255)
				{
					i=99;
 190:	c3 e6       	ldi	r28, 0x63	; 99
 192:	2f ef       	ldi	r18, 0xFF	; 255
 194:	82 e5       	ldi	r24, 0x52	; 82
 196:	97 e0       	ldi	r25, 0x07	; 7
 198:	21 50       	subi	r18, 0x01	; 1
 19a:	80 40       	sbci	r24, 0x00	; 0
 19c:	90 40       	sbci	r25, 0x00	; 0
 19e:	e1 f7       	brne	.-8      	; 0x198 <main+0x100>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <main+0x10a>
 1a2:	00 00       	nop
				}
				_delay_ms(300);
				segment_display_BCD(i);
 1a4:	8c 2f       	mov	r24, r28
 1a6:	0e 94 36 00 	call	0x6c	; 0x6c <segment_display_BCD>
				while(READ_BIT(PIND,4)==0)
 1aa:	0f c0       	rjmp	.+30     	; 0x1ca <main+0x132>
				{
					i--;
 1ac:	c1 50       	subi	r28, 0x01	; 1
 1ae:	08 f4       	brcc	.+2      	; 0x1b2 <main+0x11a>
					
					if(i==255)
					{
						i=99;
 1b0:	c3 e6       	ldi	r28, 0x63	; 99
 1b2:	2f e7       	ldi	r18, 0x7F	; 127
 1b4:	88 e3       	ldi	r24, 0x38	; 56
 1b6:	91 e0       	ldi	r25, 0x01	; 1
 1b8:	21 50       	subi	r18, 0x01	; 1
 1ba:	80 40       	sbci	r24, 0x00	; 0
 1bc:	90 40       	sbci	r25, 0x00	; 0
 1be:	e1 f7       	brne	.-8      	; 0x1b8 <main+0x120>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <main+0x12a>
 1c2:	00 00       	nop
					}
					_delay_ms(50);
					segment_display_BCD(i);
 1c4:	8c 2f       	mov	r24, r28
 1c6:	0e 94 36 00 	call	0x6c	; 0x6c <segment_display_BCD>
				{
					i=99;
				}
				_delay_ms(300);
				segment_display_BCD(i);
				while(READ_BIT(PIND,4)==0)
 1ca:	84 9b       	sbis	0x10, 4	; 16
 1cc:	ef cf       	rjmp	.-34     	; 0x1ac <main+0x114>
 1ce:	0c 2f       	mov	r16, r28
 1d0:	74 cf       	rjmp	.-280    	; 0xba <main+0x22>

000001d2 <_exit>:
 1d2:	f8 94       	cli

000001d4 <__stop_program>:
 1d4:	ff cf       	rjmp	.-2      	; 0x1d4 <__stop_program>
