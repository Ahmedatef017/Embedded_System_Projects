
Obstacle Avoidance Robot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001442  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e2  00800060  00001442  000014d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  00800142  00800142  000015b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000015b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000015e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000348  00000000  00000000  00001624  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000030aa  00000000  00000000  0000196c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fef  00000000  00000000  00004a16  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001c0d  00000000  00000000  00005a05  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007d4  00000000  00000000  00007614  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000eca  00000000  00000000  00007de8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001cfa  00000000  00000000  00008cb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a8  00000000  00000000  0000a9ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 b8 07 	jmp	0xf70	; 0xf70 <__vector_6>
      1c:	0c 94 66 07 	jmp	0xecc	; 0xecc <__vector_7>
      20:	0c 94 8f 07 	jmp	0xf1e	; 0xf1e <__vector_8>
      24:	0c 94 3d 07 	jmp	0xe7a	; 0xe7a <__vector_9>
      28:	0c 94 77 06 	jmp	0xcee	; 0xcee <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e4       	ldi	r30, 0x42	; 66
      68:	f4 e1       	ldi	r31, 0x14	; 20
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a2 34       	cpi	r26, 0x42	; 66
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a2 e4       	ldi	r26, 0x42	; 66
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 35       	cpi	r26, 0x5C	; 92
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ce 00 	call	0x19c	; 0x19c <main>
      8a:	0c 94 1f 0a 	jmp	0x143e	; 0x143e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <CAR_voidInit>:
	CAR_voidStop();
	
	
}
void CAR_Reverse(void)
{
      92:	61 e0       	ldi	r22, 0x01	; 1
      94:	8b e0       	ldi	r24, 0x0B	; 11
      96:	0e 94 33 05 	call	0xa66	; 0xa66 <M_DIO_voidSetPinDirection>
      9a:	0e 94 45 06 	call	0xc8a	; 0xc8a <M_Timer0_Init>
      9e:	0e 94 53 06 	call	0xca6	; 0xca6 <M_Timer0_start>
      a2:	0e 94 49 02 	call	0x492	; 0x492 <H_MOTOR_voidInit>
      a6:	08 95       	ret

000000a8 <CAR_vMoveLeft>:
      a8:	80 e0       	ldi	r24, 0x00	; 0
      aa:	0e 94 76 02 	call	0x4ec	; 0x4ec <H_MOTOR_voidBackward>
      ae:	81 e0       	ldi	r24, 0x01	; 1
      b0:	0e 94 63 02 	call	0x4c6	; 0x4c6 <H_MOTOR_voidForward>
      b4:	82 e0       	ldi	r24, 0x02	; 2
      b6:	0e 94 76 02 	call	0x4ec	; 0x4ec <H_MOTOR_voidBackward>
      ba:	83 e0       	ldi	r24, 0x03	; 3
      bc:	0e 94 63 02 	call	0x4c6	; 0x4c6 <H_MOTOR_voidForward>
      c0:	08 95       	ret

000000c2 <CAR_vMoveRight>:
      c2:	80 e0       	ldi	r24, 0x00	; 0
      c4:	0e 94 63 02 	call	0x4c6	; 0x4c6 <H_MOTOR_voidForward>
      c8:	81 e0       	ldi	r24, 0x01	; 1
      ca:	0e 94 76 02 	call	0x4ec	; 0x4ec <H_MOTOR_voidBackward>
      ce:	82 e0       	ldi	r24, 0x02	; 2
      d0:	0e 94 63 02 	call	0x4c6	; 0x4c6 <H_MOTOR_voidForward>
      d4:	83 e0       	ldi	r24, 0x03	; 3
      d6:	0e 94 76 02 	call	0x4ec	; 0x4ec <H_MOTOR_voidBackward>
      da:	08 95       	ret

000000dc <CAR_voidStop>:
      dc:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
      e0:	81 30       	cpi	r24, 0x01	; 1
      e2:	71 f4       	brne	.+28     	; 0x100 <CAR_voidStop+0x24>
      e4:	80 e0       	ldi	r24, 0x00	; 0
      e6:	0e 94 89 02 	call	0x512	; 0x512 <H_MOTOR_voidStop>
      ea:	81 e0       	ldi	r24, 0x01	; 1
      ec:	0e 94 89 02 	call	0x512	; 0x512 <H_MOTOR_voidStop>
      f0:	82 e0       	ldi	r24, 0x02	; 2
      f2:	0e 94 89 02 	call	0x512	; 0x512 <H_MOTOR_voidStop>
      f6:	83 e0       	ldi	r24, 0x03	; 3
      f8:	0e 94 89 02 	call	0x512	; 0x512 <H_MOTOR_voidStop>
      fc:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <__data_end>
     100:	08 95       	ret

00000102 <CAR_voidTurnRight90>:
     102:	0e 94 61 00 	call	0xc2	; 0xc2 <CAR_vMoveRight>
     106:	2f ef       	ldi	r18, 0xFF	; 255
     108:	8e e9       	ldi	r24, 0x9E	; 158
     10a:	94 e2       	ldi	r25, 0x24	; 36
     10c:	21 50       	subi	r18, 0x01	; 1
     10e:	80 40       	sbci	r24, 0x00	; 0
     110:	90 40       	sbci	r25, 0x00	; 0
     112:	e1 f7       	brne	.-8      	; 0x10c <CAR_voidTurnRight90+0xa>
     114:	00 c0       	rjmp	.+0      	; 0x116 <CAR_voidTurnRight90+0x14>
     116:	00 00       	nop
     118:	0e 94 6e 00 	call	0xdc	; 0xdc <CAR_voidStop>
     11c:	08 95       	ret

0000011e <CAR_voidTurnLeft90>:
     11e:	0e 94 54 00 	call	0xa8	; 0xa8 <CAR_vMoveLeft>
     122:	2f ef       	ldi	r18, 0xFF	; 255
     124:	8e e9       	ldi	r24, 0x9E	; 158
     126:	94 e2       	ldi	r25, 0x24	; 36
     128:	21 50       	subi	r18, 0x01	; 1
     12a:	80 40       	sbci	r24, 0x00	; 0
     12c:	90 40       	sbci	r25, 0x00	; 0
     12e:	e1 f7       	brne	.-8      	; 0x128 <CAR_voidTurnLeft90+0xa>
     130:	00 c0       	rjmp	.+0      	; 0x132 <CAR_voidTurnLeft90+0x14>
     132:	00 00       	nop
     134:	0e 94 6e 00 	call	0xdc	; 0xdc <CAR_voidStop>
     138:	08 95       	ret

0000013a <CAR_Speed>:
	
}

void CAR_Speed(Speed_t speed)
{
	M_Timer0_SetFastPWM(speed);
     13a:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <M_Timer0_SetFastPWM>
     13e:	08 95       	ret

00000140 <CAR_vMoveForward>:
	M_Timer0_start();
	H_MOTOR_voidInit();
}
void CAR_vMoveForward(void)
{
	if(speed_flag==0)
     140:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
     144:	81 11       	cpse	r24, r1
     146:	29 c0       	rjmp	.+82     	; 0x19a <CAR_vMoveForward+0x5a>
	{
		H_MOTOR_voidForward(Motor_FL);
     148:	0e 94 63 02 	call	0x4c6	; 0x4c6 <H_MOTOR_voidForward>
		H_MOTOR_voidForward(Motor_FR);
     14c:	81 e0       	ldi	r24, 0x01	; 1
     14e:	0e 94 63 02 	call	0x4c6	; 0x4c6 <H_MOTOR_voidForward>
		H_MOTOR_voidForward(Motor_BL);
     152:	82 e0       	ldi	r24, 0x02	; 2
     154:	0e 94 63 02 	call	0x4c6	; 0x4c6 <H_MOTOR_voidForward>
		H_MOTOR_voidForward(Motor_BR);
     158:	83 e0       	ldi	r24, 0x03	; 3
     15a:	0e 94 63 02 	call	0x4c6	; 0x4c6 <H_MOTOR_voidForward>
		CAR_Speed(HALF_SPEED);
     15e:	82 e3       	ldi	r24, 0x32	; 50
     160:	0e 94 9d 00 	call	0x13a	; 0x13a <CAR_Speed>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     164:	2f ef       	ldi	r18, 0xFF	; 255
     166:	82 e5       	ldi	r24, 0x52	; 82
     168:	97 e0       	ldi	r25, 0x07	; 7
     16a:	21 50       	subi	r18, 0x01	; 1
     16c:	80 40       	sbci	r24, 0x00	; 0
     16e:	90 40       	sbci	r25, 0x00	; 0
     170:	e1 f7       	brne	.-8      	; 0x16a <CAR_vMoveForward+0x2a>
     172:	00 c0       	rjmp	.+0      	; 0x174 <CAR_vMoveForward+0x34>
     174:	00 00       	nop
		_delay_ms(300);
		CAR_Speed(HIGH_SPEED);
     176:	80 e5       	ldi	r24, 0x50	; 80
     178:	0e 94 9d 00 	call	0x13a	; 0x13a <CAR_Speed>
     17c:	2f ef       	ldi	r18, 0xFF	; 255
     17e:	82 e5       	ldi	r24, 0x52	; 82
     180:	97 e0       	ldi	r25, 0x07	; 7
     182:	21 50       	subi	r18, 0x01	; 1
     184:	80 40       	sbci	r24, 0x00	; 0
     186:	90 40       	sbci	r25, 0x00	; 0
     188:	e1 f7       	brne	.-8      	; 0x182 <CAR_vMoveForward+0x42>
     18a:	00 c0       	rjmp	.+0      	; 0x18c <CAR_vMoveForward+0x4c>
     18c:	00 00       	nop
		_delay_ms(300);
		CAR_Speed(MAX_SPEED);
     18e:	84 e6       	ldi	r24, 0x64	; 100
     190:	0e 94 9d 00 	call	0x13a	; 0x13a <CAR_Speed>
		speed_flag=1;	
     194:	81 e0       	ldi	r24, 0x01	; 1
     196:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__data_end>
     19a:	08 95       	ret

0000019c <main>:
int main(void)
{
	u8 distance=0;
	u8 right_distance=0;
	u8 left_distance =0;
	H_LCD_voidInit();
     19c:	0e 94 50 03 	call	0x6a0	; 0x6a0 <H_LCD_voidInit>
	H_Ultrasonic_voidInit();
     1a0:	0e 94 bf 04 	call	0x97e	; 0x97e <H_Ultrasonic_voidInit>
	H_Servo_voidInit();
     1a4:	0e 94 75 04 	call	0x8ea	; 0x8ea <H_Servo_voidInit>
    H_Servo_voidSetAngle(DEFAULT_ANGLE);
     1a8:	8a e5       	ldi	r24, 0x5A	; 90
     1aa:	0e 94 80 04 	call	0x900	; 0x900 <H_Servo_voidSetAngle>
    CAR_voidInit();
     1ae:	0e 94 49 00 	call	0x92	; 0x92 <CAR_voidInit>
	while(1)
	{
		distance = H_Ultrasonic_voidGetDistance();
     1b2:	0e 94 df 04 	call	0x9be	; 0x9be <H_Ultrasonic_voidGetDistance>
     1b6:	c8 2f       	mov	r28, r24
		
		H_LCD_voidSetPosition(1,1);
     1b8:	61 e0       	ldi	r22, 0x01	; 1
     1ba:	81 e0       	ldi	r24, 0x01	; 1
     1bc:	0e 94 9f 03 	call	0x73e	; 0x73e <H_LCD_voidSetPosition>
		H_LCD_voidSendString("Distance = ");
     1c0:	88 e6       	ldi	r24, 0x68	; 104
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	0e 94 8a 03 	call	0x714	; 0x714 <H_LCD_voidSendString>
		H_LCD_SendNumber(distance);
     1c8:	2c 2f       	mov	r18, r28
     1ca:	30 e0       	ldi	r19, 0x00	; 0
     1cc:	40 e0       	ldi	r20, 0x00	; 0
     1ce:	50 e0       	ldi	r21, 0x00	; 0
     1d0:	60 e0       	ldi	r22, 0x00	; 0
     1d2:	70 e0       	ldi	r23, 0x00	; 0
     1d4:	80 e0       	ldi	r24, 0x00	; 0
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	0e 94 b7 03 	call	0x76e	; 0x76e <H_LCD_SendNumber>
		H_LCD_voidSendString(" ");
     1dc:	82 e7       	ldi	r24, 0x72	; 114
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	0e 94 8a 03 	call	0x714	; 0x714 <H_LCD_voidSendString>
		H_LCD_voidSetPosition(1,15);
     1e4:	6f e0       	ldi	r22, 0x0F	; 15
     1e6:	81 e0       	ldi	r24, 0x01	; 1
     1e8:	0e 94 9f 03 	call	0x73e	; 0x73e <H_LCD_voidSetPosition>
		H_LCD_voidSendString("cm");
     1ec:	83 e0       	ldi	r24, 0x03	; 3
     1ee:	91 e0       	ldi	r25, 0x01	; 1
     1f0:	0e 94 8a 03 	call	0x714	; 0x714 <H_LCD_voidSendString>
		H_LCD_voidSetPosition(2,1);
     1f4:	61 e0       	ldi	r22, 0x01	; 1
     1f6:	82 e0       	ldi	r24, 0x02	; 2
     1f8:	0e 94 9f 03 	call	0x73e	; 0x73e <H_LCD_voidSetPosition>

		if(distance < STOP_DISTANCE)
     1fc:	ce 31       	cpi	r28, 0x1E	; 30
     1fe:	08 f0       	brcs	.+2      	; 0x202 <main+0x66>
     200:	41 c1       	rjmp	.+642    	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
		{
			H_LCD_voidClearDisplay();
     202:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <H_LCD_voidClearDisplay>
			/*print car stop*/
			H_LCD_voidSendString("     Stop!");
     206:	84 e7       	ldi	r24, 0x74	; 116
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	0e 94 8a 03 	call	0x714	; 0x714 <H_LCD_voidSendString>
			/*stop car*/
            CAR_voidStop();
     20e:	0e 94 6e 00 	call	0xdc	; 0xdc <CAR_voidStop>
     212:	2f ef       	ldi	r18, 0xFF	; 255
     214:	83 ed       	ldi	r24, 0xD3	; 211
     216:	90 e3       	ldi	r25, 0x30	; 48
     218:	21 50       	subi	r18, 0x01	; 1
     21a:	80 40       	sbci	r24, 0x00	; 0
     21c:	90 40       	sbci	r25, 0x00	; 0
     21e:	e1 f7       	brne	.-8      	; 0x218 <main+0x7c>
     220:	00 c0       	rjmp	.+0      	; 0x222 <main+0x86>
     222:	00 00       	nop
            _delay_ms(2000);
            H_LCD_voidClearDisplay();
     224:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <H_LCD_voidClearDisplay>


            /*print turn right*/
            H_LCD_voidSendString("Turn Servo Right->>");
     228:	8f e7       	ldi	r24, 0x7F	; 127
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	0e 94 8a 03 	call	0x714	; 0x714 <H_LCD_voidSendString>
			/*turn right*/
            H_Servo_voidSetAngle(TURN_RIGHT_ANGLE);
     230:	80 e0       	ldi	r24, 0x00	; 0
     232:	0e 94 80 04 	call	0x900	; 0x900 <H_Servo_voidSetAngle>
			H_LCD_voidSetPosition(2,1);
     236:	61 e0       	ldi	r22, 0x01	; 1
     238:	82 e0       	ldi	r24, 0x02	; 2
     23a:	0e 94 9f 03 	call	0x73e	; 0x73e <H_LCD_voidSetPosition>
			H_LCD_voidSendString("Servo Angle = ");
     23e:	83 e9       	ldi	r24, 0x93	; 147
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	0e 94 8a 03 	call	0x714	; 0x714 <H_LCD_voidSendString>
			H_LCD_SendNumber(TURN_RIGHT_ANGLE);
     246:	20 e0       	ldi	r18, 0x00	; 0
     248:	30 e0       	ldi	r19, 0x00	; 0
     24a:	40 e0       	ldi	r20, 0x00	; 0
     24c:	50 e0       	ldi	r21, 0x00	; 0
     24e:	60 e0       	ldi	r22, 0x00	; 0
     250:	70 e0       	ldi	r23, 0x00	; 0
     252:	80 e0       	ldi	r24, 0x00	; 0
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	0e 94 b7 03 	call	0x76e	; 0x76e <H_LCD_SendNumber>
			H_LCD_voidSendChar(DEGREES_SYMBOL);
     25a:	8f ed       	ldi	r24, 0xDF	; 223
     25c:	0e 94 87 03 	call	0x70e	; 0x70e <H_LCD_voidSendChar>
			H_LCD_voidSendString(" ");
     260:	82 e7       	ldi	r24, 0x72	; 114
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	0e 94 8a 03 	call	0x714	; 0x714 <H_LCD_voidSendString>
			H_LCD_voidSetPosition(1,18);
     268:	62 e1       	ldi	r22, 0x12	; 18
     26a:	81 e0       	ldi	r24, 0x01	; 1
     26c:	0e 94 9f 03 	call	0x73e	; 0x73e <H_LCD_voidSetPosition>
     270:	2f ef       	ldi	r18, 0xFF	; 255
     272:	83 ed       	ldi	r24, 0xD3	; 211
     274:	90 e3       	ldi	r25, 0x30	; 48
     276:	21 50       	subi	r18, 0x01	; 1
     278:	80 40       	sbci	r24, 0x00	; 0
     27a:	90 40       	sbci	r25, 0x00	; 0
     27c:	e1 f7       	brne	.-8      	; 0x276 <main+0xda>
     27e:	00 c0       	rjmp	.+0      	; 0x280 <main+0xe4>
     280:	00 00       	nop
			_delay_ms(2000);
            H_LCD_voidClearDisplay();
     282:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <H_LCD_voidClearDisplay>


			/*print get right distance*/
            H_LCD_voidSendString("Get Right Distance");
     286:	82 ea       	ldi	r24, 0xA2	; 162
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	0e 94 8a 03 	call	0x714	; 0x714 <H_LCD_voidSendString>
			/*get right distance*/
            right_distance = H_Ultrasonic_voidGetDistance();
     28e:	0e 94 df 04 	call	0x9be	; 0x9be <H_Ultrasonic_voidGetDistance>
     292:	c8 2f       	mov	r28, r24
			H_LCD_voidSetPosition(2,1);
     294:	61 e0       	ldi	r22, 0x01	; 1
     296:	82 e0       	ldi	r24, 0x02	; 2
     298:	0e 94 9f 03 	call	0x73e	; 0x73e <H_LCD_voidSetPosition>
			H_LCD_voidSendString("Right_Distance=");
     29c:	85 eb       	ldi	r24, 0xB5	; 181
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	0e 94 8a 03 	call	0x714	; 0x714 <H_LCD_voidSendString>
			H_LCD_SendNumber(right_distance);
     2a4:	2c 2f       	mov	r18, r28
     2a6:	30 e0       	ldi	r19, 0x00	; 0
     2a8:	40 e0       	ldi	r20, 0x00	; 0
     2aa:	50 e0       	ldi	r21, 0x00	; 0
     2ac:	60 e0       	ldi	r22, 0x00	; 0
     2ae:	70 e0       	ldi	r23, 0x00	; 0
     2b0:	80 e0       	ldi	r24, 0x00	; 0
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	0e 94 b7 03 	call	0x76e	; 0x76e <H_LCD_SendNumber>
			H_LCD_voidSendString(" ");
     2b8:	82 e7       	ldi	r24, 0x72	; 114
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	0e 94 8a 03 	call	0x714	; 0x714 <H_LCD_voidSendString>
			H_LCD_voidSetPosition(2,18);
     2c0:	62 e1       	ldi	r22, 0x12	; 18
     2c2:	82 e0       	ldi	r24, 0x02	; 2
     2c4:	0e 94 9f 03 	call	0x73e	; 0x73e <H_LCD_voidSetPosition>
			H_LCD_voidSendString("cm");
     2c8:	83 e0       	ldi	r24, 0x03	; 3
     2ca:	91 e0       	ldi	r25, 0x01	; 1
     2cc:	0e 94 8a 03 	call	0x714	; 0x714 <H_LCD_voidSendString>
     2d0:	2f ef       	ldi	r18, 0xFF	; 255
     2d2:	83 ed       	ldi	r24, 0xD3	; 211
     2d4:	90 e3       	ldi	r25, 0x30	; 48
     2d6:	21 50       	subi	r18, 0x01	; 1
     2d8:	80 40       	sbci	r24, 0x00	; 0
     2da:	90 40       	sbci	r25, 0x00	; 0
     2dc:	e1 f7       	brne	.-8      	; 0x2d6 <main+0x13a>
     2de:	00 c0       	rjmp	.+0      	; 0x2e0 <main+0x144>
     2e0:	00 00       	nop
			_delay_ms(2000);
            H_LCD_voidClearDisplay();
     2e2:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <H_LCD_voidClearDisplay>


			/*print turn left*/
            H_LCD_voidSendString("<<-Turn Left");
     2e6:	85 ec       	ldi	r24, 0xC5	; 197
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	0e 94 8a 03 	call	0x714	; 0x714 <H_LCD_voidSendString>
			/*get left distance*/
			H_Servo_voidSetAngle(TURN_LEFT_ANGLE);
     2ee:	84 eb       	ldi	r24, 0xB4	; 180
     2f0:	0e 94 80 04 	call	0x900	; 0x900 <H_Servo_voidSetAngle>
			H_LCD_voidSetPosition(2,1);
     2f4:	61 e0       	ldi	r22, 0x01	; 1
     2f6:	82 e0       	ldi	r24, 0x02	; 2
     2f8:	0e 94 9f 03 	call	0x73e	; 0x73e <H_LCD_voidSetPosition>
			H_LCD_voidSendString("Servo Angle = ");
     2fc:	83 e9       	ldi	r24, 0x93	; 147
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	0e 94 8a 03 	call	0x714	; 0x714 <H_LCD_voidSendString>
			H_LCD_SendNumber(TURN_LEFT_ANGLE);
     304:	24 eb       	ldi	r18, 0xB4	; 180
     306:	30 e0       	ldi	r19, 0x00	; 0
     308:	40 e0       	ldi	r20, 0x00	; 0
     30a:	50 e0       	ldi	r21, 0x00	; 0
     30c:	60 e0       	ldi	r22, 0x00	; 0
     30e:	70 e0       	ldi	r23, 0x00	; 0
     310:	80 e0       	ldi	r24, 0x00	; 0
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	0e 94 b7 03 	call	0x76e	; 0x76e <H_LCD_SendNumber>
			H_LCD_voidSendChar(DEGREES_SYMBOL);
     318:	8f ed       	ldi	r24, 0xDF	; 223
     31a:	0e 94 87 03 	call	0x70e	; 0x70e <H_LCD_voidSendChar>
			H_LCD_voidSendString(" ");
     31e:	82 e7       	ldi	r24, 0x72	; 114
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	0e 94 8a 03 	call	0x714	; 0x714 <H_LCD_voidSendString>
			H_LCD_voidSetPosition(1,18);
     326:	62 e1       	ldi	r22, 0x12	; 18
     328:	81 e0       	ldi	r24, 0x01	; 1
     32a:	0e 94 9f 03 	call	0x73e	; 0x73e <H_LCD_voidSetPosition>
     32e:	2f ef       	ldi	r18, 0xFF	; 255
     330:	83 ed       	ldi	r24, 0xD3	; 211
     332:	90 e3       	ldi	r25, 0x30	; 48
     334:	21 50       	subi	r18, 0x01	; 1
     336:	80 40       	sbci	r24, 0x00	; 0
     338:	90 40       	sbci	r25, 0x00	; 0
     33a:	e1 f7       	brne	.-8      	; 0x334 <main+0x198>
     33c:	00 c0       	rjmp	.+0      	; 0x33e <main+0x1a2>
     33e:	00 00       	nop
			_delay_ms(2000);
            H_LCD_voidClearDisplay();
     340:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <H_LCD_voidClearDisplay>


            H_LCD_voidSendString("Get Left Distance");
     344:	82 ed       	ldi	r24, 0xD2	; 210
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	0e 94 8a 03 	call	0x714	; 0x714 <H_LCD_voidSendString>
			/*get right distance*/
            left_distance = H_Ultrasonic_voidGetDistance();
     34c:	0e 94 df 04 	call	0x9be	; 0x9be <H_Ultrasonic_voidGetDistance>
     350:	d8 2f       	mov	r29, r24
			H_LCD_voidSetPosition(2,1);
     352:	61 e0       	ldi	r22, 0x01	; 1
     354:	82 e0       	ldi	r24, 0x02	; 2
     356:	0e 94 9f 03 	call	0x73e	; 0x73e <H_LCD_voidSetPosition>
			H_LCD_voidSendString("left_Distance=");
     35a:	84 ee       	ldi	r24, 0xE4	; 228
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	0e 94 8a 03 	call	0x714	; 0x714 <H_LCD_voidSendString>
			H_LCD_SendNumber(left_distance);
     362:	2d 2f       	mov	r18, r29
     364:	30 e0       	ldi	r19, 0x00	; 0
     366:	40 e0       	ldi	r20, 0x00	; 0
     368:	50 e0       	ldi	r21, 0x00	; 0
     36a:	60 e0       	ldi	r22, 0x00	; 0
     36c:	70 e0       	ldi	r23, 0x00	; 0
     36e:	80 e0       	ldi	r24, 0x00	; 0
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	0e 94 b7 03 	call	0x76e	; 0x76e <H_LCD_SendNumber>
			H_LCD_voidSendString(" ");
     376:	82 e7       	ldi	r24, 0x72	; 114
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	0e 94 8a 03 	call	0x714	; 0x714 <H_LCD_voidSendString>
			H_LCD_voidSetPosition(2,18);
     37e:	62 e1       	ldi	r22, 0x12	; 18
     380:	82 e0       	ldi	r24, 0x02	; 2
     382:	0e 94 9f 03 	call	0x73e	; 0x73e <H_LCD_voidSetPosition>
			H_LCD_voidSendString("cm");
     386:	83 e0       	ldi	r24, 0x03	; 3
     388:	91 e0       	ldi	r25, 0x01	; 1
     38a:	0e 94 8a 03 	call	0x714	; 0x714 <H_LCD_voidSendString>
     38e:	2f ef       	ldi	r18, 0xFF	; 255
     390:	83 ed       	ldi	r24, 0xD3	; 211
     392:	90 e3       	ldi	r25, 0x30	; 48
     394:	21 50       	subi	r18, 0x01	; 1
     396:	80 40       	sbci	r24, 0x00	; 0
     398:	90 40       	sbci	r25, 0x00	; 0
     39a:	e1 f7       	brne	.-8      	; 0x394 <main+0x1f8>
     39c:	00 c0       	rjmp	.+0      	; 0x39e <main+0x202>
     39e:	00 00       	nop
			_delay_ms(2000);
            H_LCD_voidClearDisplay();
     3a0:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <H_LCD_voidClearDisplay>


            /*go to default position*/
            H_LCD_voidSendString("Default Angle.");
     3a4:	83 ef       	ldi	r24, 0xF3	; 243
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	0e 94 8a 03 	call	0x714	; 0x714 <H_LCD_voidSendString>
			H_Servo_voidSetAngle(DEFAULT_ANGLE);
     3ac:	8a e5       	ldi	r24, 0x5A	; 90
     3ae:	0e 94 80 04 	call	0x900	; 0x900 <H_Servo_voidSetAngle>
     3b2:	2f ef       	ldi	r18, 0xFF	; 255
     3b4:	83 ed       	ldi	r24, 0xD3	; 211
     3b6:	90 e3       	ldi	r25, 0x30	; 48
     3b8:	21 50       	subi	r18, 0x01	; 1
     3ba:	80 40       	sbci	r24, 0x00	; 0
     3bc:	90 40       	sbci	r25, 0x00	; 0
     3be:	e1 f7       	brne	.-8      	; 0x3b8 <main+0x21c>
     3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <main+0x226>
     3c2:	00 00       	nop
			_delay_ms(2000);
			H_LCD_voidClearDisplay();
     3c4:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <H_LCD_voidClearDisplay>
			
			H_LCD_voidSendString("Right_Distance=");
     3c8:	85 eb       	ldi	r24, 0xB5	; 181
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	0e 94 8a 03 	call	0x714	; 0x714 <H_LCD_voidSendString>
			H_LCD_SendNumber(right_distance);
     3d0:	2c 2f       	mov	r18, r28
     3d2:	30 e0       	ldi	r19, 0x00	; 0
     3d4:	40 e0       	ldi	r20, 0x00	; 0
     3d6:	50 e0       	ldi	r21, 0x00	; 0
     3d8:	60 e0       	ldi	r22, 0x00	; 0
     3da:	70 e0       	ldi	r23, 0x00	; 0
     3dc:	80 e0       	ldi	r24, 0x00	; 0
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	0e 94 b7 03 	call	0x76e	; 0x76e <H_LCD_SendNumber>
			H_LCD_voidSendString(" cm");
     3e4:	82 e0       	ldi	r24, 0x02	; 2
     3e6:	91 e0       	ldi	r25, 0x01	; 1
     3e8:	0e 94 8a 03 	call	0x714	; 0x714 <H_LCD_voidSendString>
			H_LCD_voidSetPosition(2,1);
     3ec:	61 e0       	ldi	r22, 0x01	; 1
     3ee:	82 e0       	ldi	r24, 0x02	; 2
     3f0:	0e 94 9f 03 	call	0x73e	; 0x73e <H_LCD_voidSetPosition>
			H_LCD_voidSendString("left_Distance =");
     3f4:	86 e0       	ldi	r24, 0x06	; 6
     3f6:	91 e0       	ldi	r25, 0x01	; 1
     3f8:	0e 94 8a 03 	call	0x714	; 0x714 <H_LCD_voidSendString>
			H_LCD_SendNumber(left_distance);
     3fc:	2d 2f       	mov	r18, r29
     3fe:	30 e0       	ldi	r19, 0x00	; 0
     400:	40 e0       	ldi	r20, 0x00	; 0
     402:	50 e0       	ldi	r21, 0x00	; 0
     404:	60 e0       	ldi	r22, 0x00	; 0
     406:	70 e0       	ldi	r23, 0x00	; 0
     408:	80 e0       	ldi	r24, 0x00	; 0
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	0e 94 b7 03 	call	0x76e	; 0x76e <H_LCD_SendNumber>
			H_LCD_voidSendString(" cm");
     410:	82 e0       	ldi	r24, 0x02	; 2
     412:	91 e0       	ldi	r25, 0x01	; 1
     414:	0e 94 8a 03 	call	0x714	; 0x714 <H_LCD_voidSendString>
			
			/*compare two distance*/
			
			if(right_distance >= left_distance && right_distance>STOP_DISTANCE)
     418:	cd 17       	cp	r28, r29
     41a:	c0 f0       	brcs	.+48     	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
     41c:	cf 31       	cpi	r28, 0x1F	; 31
     41e:	b0 f0       	brcs	.+44     	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
			{
                H_LCD_voidSetPosition(3,3);
     420:	63 e0       	ldi	r22, 0x03	; 3
     422:	83 e0       	ldi	r24, 0x03	; 3
     424:	0e 94 9f 03 	call	0x73e	; 0x73e <H_LCD_voidSetPosition>
				H_LCD_voidSendString("  Move Right");
     428:	86 e1       	ldi	r24, 0x16	; 22
     42a:	91 e0       	ldi	r25, 0x01	; 1
     42c:	0e 94 8a 03 	call	0x714	; 0x714 <H_LCD_voidSendString>
				/*turn robot right*/
                CAR_voidTurnRight90();
     430:	0e 94 81 00 	call	0x102	; 0x102 <CAR_voidTurnRight90>
     434:	2f ef       	ldi	r18, 0xFF	; 255
     436:	83 ed       	ldi	r24, 0xD3	; 211
     438:	90 e3       	ldi	r25, 0x30	; 48
     43a:	21 50       	subi	r18, 0x01	; 1
     43c:	80 40       	sbci	r24, 0x00	; 0
     43e:	90 40       	sbci	r25, 0x00	; 0
     440:	e1 f7       	brne	.-8      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
     442:	00 c0       	rjmp	.+0      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
     444:	00 00       	nop
				_delay_ms(2000);
				H_LCD_voidClearDisplay();
     446:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <H_LCD_voidClearDisplay>
     44a:	b3 ce       	rjmp	.-666    	; 0x1b2 <main+0x16>
				
			}
			else if(left_distance > right_distance && left_distance>STOP_DISTANCE)
     44c:	cd 17       	cp	r28, r29
     44e:	08 f0       	brcs	.+2      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
     450:	b0 ce       	rjmp	.-672    	; 0x1b2 <main+0x16>
     452:	df 31       	cpi	r29, 0x1F	; 31
     454:	08 f4       	brcc	.+2      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
     456:	ad ce       	rjmp	.-678    	; 0x1b2 <main+0x16>
			{
				H_LCD_voidSetPosition(3,3);
     458:	63 e0       	ldi	r22, 0x03	; 3
     45a:	83 e0       	ldi	r24, 0x03	; 3
     45c:	0e 94 9f 03 	call	0x73e	; 0x73e <H_LCD_voidSetPosition>
				H_LCD_voidSendString("  Move Left");
     460:	83 e2       	ldi	r24, 0x23	; 35
     462:	91 e0       	ldi	r25, 0x01	; 1
     464:	0e 94 8a 03 	call	0x714	; 0x714 <H_LCD_voidSendString>
				/*turn robot left*/
                CAR_voidTurnLeft90();
     468:	0e 94 8f 00 	call	0x11e	; 0x11e <CAR_voidTurnLeft90>
     46c:	2f ef       	ldi	r18, 0xFF	; 255
     46e:	83 ed       	ldi	r24, 0xD3	; 211
     470:	90 e3       	ldi	r25, 0x30	; 48
     472:	21 50       	subi	r18, 0x01	; 1
     474:	80 40       	sbci	r24, 0x00	; 0
     476:	90 40       	sbci	r25, 0x00	; 0
     478:	e1 f7       	brne	.-8      	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
     47a:	00 c0       	rjmp	.+0      	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
     47c:	00 00       	nop
				_delay_ms(2000);
				H_LCD_voidClearDisplay();
     47e:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <H_LCD_voidClearDisplay>
     482:	97 ce       	rjmp	.-722    	; 0x1b2 <main+0x16>
			}
		}
		else
		{
			/*car move forward*/
			H_LCD_voidSendString("    'Move Forward'");
     484:	8f e2       	ldi	r24, 0x2F	; 47
     486:	91 e0       	ldi	r25, 0x01	; 1
     488:	0e 94 8a 03 	call	0x714	; 0x714 <H_LCD_voidSendString>
			CAR_vMoveForward();
     48c:	0e 94 a0 00 	call	0x140	; 0x140 <CAR_vMoveForward>
     490:	90 ce       	rjmp	.-736    	; 0x1b2 <main+0x16>

00000492 <H_MOTOR_voidInit>:

/*---------------------------- Software Interfaces ---------------------------*/

u8 MotorPinsArray[MAX_MOTOR_NUM][2]= Motor_Pins_Config;

void H_MOTOR_voidInit(void)
     492:	1f 93       	push	r17
     494:	cf 93       	push	r28
     496:	df 93       	push	r29
{
     498:	10 e0       	ldi	r17, 0x00	; 0
     49a:	0f c0       	rjmp	.+30     	; 0x4ba <H_MOTOR_voidInit+0x28>
 for(u8 i=0;i<MAX_MOTOR_NUM;i++)
 {
     49c:	c1 2f       	mov	r28, r17
     49e:	d0 e0       	ldi	r29, 0x00	; 0
     4a0:	cc 0f       	add	r28, r28
     4a2:	dd 1f       	adc	r29, r29
     4a4:	c0 5a       	subi	r28, 0xA0	; 160
     4a6:	df 4f       	sbci	r29, 0xFF	; 255
     4a8:	61 e0       	ldi	r22, 0x01	; 1
     4aa:	88 81       	ld	r24, Y
     4ac:	0e 94 33 05 	call	0xa66	; 0xa66 <M_DIO_voidSetPinDirection>
	 M_DIO_voidSetPinDirection(MotorPinsArray[i][IN1], OUTPUT);
     4b0:	61 e0       	ldi	r22, 0x01	; 1
     4b2:	89 81       	ldd	r24, Y+1	; 0x01
     4b4:	0e 94 33 05 	call	0xa66	; 0xa66 <M_DIO_voidSetPinDirection>
/*---------------------------- Software Interfaces ---------------------------*/

u8 MotorPinsArray[MAX_MOTOR_NUM][2]= Motor_Pins_Config;

void H_MOTOR_voidInit(void)
{
     4b8:	1f 5f       	subi	r17, 0xFF	; 255
     4ba:	14 30       	cpi	r17, 0x04	; 4
     4bc:	78 f3       	brcs	.-34     	; 0x49c <H_MOTOR_voidInit+0xa>
 for(u8 i=0;i<MAX_MOTOR_NUM;i++)
 {
	 M_DIO_voidSetPinDirection(MotorPinsArray[i][IN1], OUTPUT);
	 M_DIO_voidSetPinDirection(MotorPinsArray[i][IN2], OUTPUT);
 }
}
     4be:	df 91       	pop	r29
     4c0:	cf 91       	pop	r28
     4c2:	1f 91       	pop	r17
     4c4:	08 95       	ret

000004c6 <H_MOTOR_voidForward>:

void H_MOTOR_voidForward(MOTOR_type motor)
     4c6:	cf 93       	push	r28
     4c8:	df 93       	push	r29
{
     4ca:	c8 2f       	mov	r28, r24
     4cc:	d0 e0       	ldi	r29, 0x00	; 0
     4ce:	cc 0f       	add	r28, r28
     4d0:	dd 1f       	adc	r29, r29
     4d2:	c0 5a       	subi	r28, 0xA0	; 160
     4d4:	df 4f       	sbci	r29, 0xFF	; 255
     4d6:	61 e0       	ldi	r22, 0x01	; 1
     4d8:	88 81       	ld	r24, Y
     4da:	0e 94 ba 05 	call	0xb74	; 0xb74 <M_DIO_voidSetPinValue>
	M_DIO_voidSetPinValue(MotorPinsArray[motor][IN1],HIGH);
     4de:	60 e0       	ldi	r22, 0x00	; 0
     4e0:	89 81       	ldd	r24, Y+1	; 0x01
     4e2:	0e 94 ba 05 	call	0xb74	; 0xb74 <M_DIO_voidSetPinValue>
	M_DIO_voidSetPinValue(MotorPinsArray[motor][IN2],LOW);
     4e6:	df 91       	pop	r29
     4e8:	cf 91       	pop	r28
     4ea:	08 95       	ret

000004ec <H_MOTOR_voidBackward>:
	
}

     4ec:	cf 93       	push	r28
     4ee:	df 93       	push	r29
void H_MOTOR_voidBackward(MOTOR_type motor)
     4f0:	c8 2f       	mov	r28, r24
     4f2:	d0 e0       	ldi	r29, 0x00	; 0
     4f4:	cc 0f       	add	r28, r28
     4f6:	dd 1f       	adc	r29, r29
     4f8:	c0 5a       	subi	r28, 0xA0	; 160
     4fa:	df 4f       	sbci	r29, 0xFF	; 255
     4fc:	60 e0       	ldi	r22, 0x00	; 0
     4fe:	88 81       	ld	r24, Y
     500:	0e 94 ba 05 	call	0xb74	; 0xb74 <M_DIO_voidSetPinValue>
{
     504:	61 e0       	ldi	r22, 0x01	; 1
     506:	89 81       	ldd	r24, Y+1	; 0x01
     508:	0e 94 ba 05 	call	0xb74	; 0xb74 <M_DIO_voidSetPinValue>
	M_DIO_voidSetPinValue(MotorPinsArray[motor][IN1],LOW);
	M_DIO_voidSetPinValue(MotorPinsArray[motor][IN2],HIGH);
     50c:	df 91       	pop	r29
     50e:	cf 91       	pop	r28
     510:	08 95       	ret

00000512 <H_MOTOR_voidStop>:

}
     512:	cf 93       	push	r28
     514:	df 93       	push	r29
void H_MOTOR_voidStop(MOTOR_type motor)
     516:	c8 2f       	mov	r28, r24
     518:	d0 e0       	ldi	r29, 0x00	; 0
     51a:	cc 0f       	add	r28, r28
     51c:	dd 1f       	adc	r29, r29
     51e:	c0 5a       	subi	r28, 0xA0	; 160
     520:	df 4f       	sbci	r29, 0xFF	; 255
     522:	61 e0       	ldi	r22, 0x01	; 1
     524:	88 81       	ld	r24, Y
     526:	0e 94 ba 05 	call	0xb74	; 0xb74 <M_DIO_voidSetPinValue>
{
     52a:	61 e0       	ldi	r22, 0x01	; 1
     52c:	89 81       	ldd	r24, Y+1	; 0x01
     52e:	0e 94 ba 05 	call	0xb74	; 0xb74 <M_DIO_voidSetPinValue>
	M_DIO_voidSetPinValue(MotorPinsArray[motor][IN1],HIGH);
     532:	df 91       	pop	r29
     534:	cf 91       	pop	r28
     536:	08 95       	ret

00000538 <H_LCD_voidSendCommand>:
#include "LCD_configuration.h"
#include "LCD_interface.h"
/*---------------------------- Software Interfaces ---------------------------*/

#if  LCD_MODE == LCD_4BIT
void H_LCD_voidSendCommand(u8 copy_u8command) {
     538:	cf 93       	push	r28
     53a:	c8 2f       	mov	r28, r24
	M_DIO_voidSetPinValue(RS_PIN, LOW); //RS=0
     53c:	60 e0       	ldi	r22, 0x00	; 0
     53e:	83 e0       	ldi	r24, 0x03	; 3
     540:	0e 94 ba 05 	call	0xb74	; 0xb74 <M_DIO_voidSetPinValue>
	M_DIO_voidSetPinValue(D4_PIN, READ_BIT(copy_u8command, 4));
     544:	c4 fb       	bst	r28, 4
     546:	66 27       	eor	r22, r22
     548:	60 f9       	bld	r22, 0
     54a:	88 e0       	ldi	r24, 0x08	; 8
     54c:	0e 94 ba 05 	call	0xb74	; 0xb74 <M_DIO_voidSetPinValue>
	M_DIO_voidSetPinValue(D5_PIN, READ_BIT(copy_u8command, 5));
     550:	c5 fb       	bst	r28, 5
     552:	66 27       	eor	r22, r22
     554:	60 f9       	bld	r22, 0
     556:	89 e0       	ldi	r24, 0x09	; 9
     558:	0e 94 ba 05 	call	0xb74	; 0xb74 <M_DIO_voidSetPinValue>
	M_DIO_voidSetPinValue(D6_PIN, READ_BIT(copy_u8command, 6));
     55c:	c6 fb       	bst	r28, 6
     55e:	66 27       	eor	r22, r22
     560:	60 f9       	bld	r22, 0
     562:	8a e0       	ldi	r24, 0x0A	; 10
     564:	0e 94 ba 05 	call	0xb74	; 0xb74 <M_DIO_voidSetPinValue>
	M_DIO_voidSetPinValue(D7_PIN, READ_BIT(copy_u8command, 7));
     568:	6c 2f       	mov	r22, r28
     56a:	66 1f       	adc	r22, r22
     56c:	66 27       	eor	r22, r22
     56e:	66 1f       	adc	r22, r22
     570:	8c e0       	ldi	r24, 0x0C	; 12
     572:	0e 94 ba 05 	call	0xb74	; 0xb74 <M_DIO_voidSetPinValue>

	M_DIO_voidSetPinValue(EN_PIN, HIGH);
     576:	61 e0       	ldi	r22, 0x01	; 1
     578:	82 e0       	ldi	r24, 0x02	; 2
     57a:	0e 94 ba 05 	call	0xb74	; 0xb74 <M_DIO_voidSetPinValue>
     57e:	8f ec       	ldi	r24, 0xCF	; 207
     580:	97 e0       	ldi	r25, 0x07	; 7
     582:	01 97       	sbiw	r24, 0x01	; 1
     584:	f1 f7       	brne	.-4      	; 0x582 <H_LCD_voidSendCommand+0x4a>
     586:	00 c0       	rjmp	.+0      	; 0x588 <H_LCD_voidSendCommand+0x50>
     588:	00 00       	nop
	_delay_ms(1);
	M_DIO_voidSetPinValue(EN_PIN, LOW);
     58a:	60 e0       	ldi	r22, 0x00	; 0
     58c:	82 e0       	ldi	r24, 0x02	; 2
     58e:	0e 94 ba 05 	call	0xb74	; 0xb74 <M_DIO_voidSetPinValue>

	M_DIO_voidSetPinValue(D4_PIN, READ_BIT(copy_u8command, 0));
     592:	6c 2f       	mov	r22, r28
     594:	61 70       	andi	r22, 0x01	; 1
     596:	88 e0       	ldi	r24, 0x08	; 8
     598:	0e 94 ba 05 	call	0xb74	; 0xb74 <M_DIO_voidSetPinValue>
	M_DIO_voidSetPinValue(D5_PIN, READ_BIT(copy_u8command, 1));
     59c:	c1 fb       	bst	r28, 1
     59e:	66 27       	eor	r22, r22
     5a0:	60 f9       	bld	r22, 0
     5a2:	89 e0       	ldi	r24, 0x09	; 9
     5a4:	0e 94 ba 05 	call	0xb74	; 0xb74 <M_DIO_voidSetPinValue>
	M_DIO_voidSetPinValue(D6_PIN, READ_BIT(copy_u8command, 2));
     5a8:	c2 fb       	bst	r28, 2
     5aa:	66 27       	eor	r22, r22
     5ac:	60 f9       	bld	r22, 0
     5ae:	8a e0       	ldi	r24, 0x0A	; 10
     5b0:	0e 94 ba 05 	call	0xb74	; 0xb74 <M_DIO_voidSetPinValue>
	M_DIO_voidSetPinValue(D7_PIN, READ_BIT(copy_u8command, 3));
     5b4:	c3 fb       	bst	r28, 3
     5b6:	66 27       	eor	r22, r22
     5b8:	60 f9       	bld	r22, 0
     5ba:	8c e0       	ldi	r24, 0x0C	; 12
     5bc:	0e 94 ba 05 	call	0xb74	; 0xb74 <M_DIO_voidSetPinValue>

	M_DIO_voidSetPinValue(EN_PIN, HIGH);
     5c0:	61 e0       	ldi	r22, 0x01	; 1
     5c2:	82 e0       	ldi	r24, 0x02	; 2
     5c4:	0e 94 ba 05 	call	0xb74	; 0xb74 <M_DIO_voidSetPinValue>
     5c8:	8f ec       	ldi	r24, 0xCF	; 207
     5ca:	97 e0       	ldi	r25, 0x07	; 7
     5cc:	01 97       	sbiw	r24, 0x01	; 1
     5ce:	f1 f7       	brne	.-4      	; 0x5cc <H_LCD_voidSendCommand+0x94>
     5d0:	00 c0       	rjmp	.+0      	; 0x5d2 <H_LCD_voidSendCommand+0x9a>
     5d2:	00 00       	nop
	_delay_ms(1);
	M_DIO_voidSetPinValue(EN_PIN, LOW);
     5d4:	60 e0       	ldi	r22, 0x00	; 0
     5d6:	82 e0       	ldi	r24, 0x02	; 2
     5d8:	0e 94 ba 05 	call	0xb74	; 0xb74 <M_DIO_voidSetPinValue>
     5dc:	8f ec       	ldi	r24, 0xCF	; 207
     5de:	97 e0       	ldi	r25, 0x07	; 7
     5e0:	01 97       	sbiw	r24, 0x01	; 1
     5e2:	f1 f7       	brne	.-4      	; 0x5e0 <H_LCD_voidSendCommand+0xa8>
     5e4:	00 c0       	rjmp	.+0      	; 0x5e6 <H_LCD_voidSendCommand+0xae>
     5e6:	00 00       	nop
	_delay_ms(1);
}
     5e8:	cf 91       	pop	r28
     5ea:	08 95       	ret

000005ec <H_LCD_voidSendData>:
void H_LCD_voidSendData(u8 copy_u8data) {
     5ec:	cf 93       	push	r28
     5ee:	c8 2f       	mov	r28, r24
	M_DIO_voidSetPinValue(RS_PIN, HIGH); //RS=1
     5f0:	61 e0       	ldi	r22, 0x01	; 1
     5f2:	83 e0       	ldi	r24, 0x03	; 3
     5f4:	0e 94 ba 05 	call	0xb74	; 0xb74 <M_DIO_voidSetPinValue>
	M_DIO_voidSetPinValue(D4_PIN, READ_BIT(copy_u8data, 4));
     5f8:	c4 fb       	bst	r28, 4
     5fa:	66 27       	eor	r22, r22
     5fc:	60 f9       	bld	r22, 0
     5fe:	88 e0       	ldi	r24, 0x08	; 8
     600:	0e 94 ba 05 	call	0xb74	; 0xb74 <M_DIO_voidSetPinValue>
	M_DIO_voidSetPinValue(D5_PIN, READ_BIT(copy_u8data, 5));
     604:	c5 fb       	bst	r28, 5
     606:	66 27       	eor	r22, r22
     608:	60 f9       	bld	r22, 0
     60a:	89 e0       	ldi	r24, 0x09	; 9
     60c:	0e 94 ba 05 	call	0xb74	; 0xb74 <M_DIO_voidSetPinValue>
	M_DIO_voidSetPinValue(D6_PIN, READ_BIT(copy_u8data, 6));
     610:	c6 fb       	bst	r28, 6
     612:	66 27       	eor	r22, r22
     614:	60 f9       	bld	r22, 0
     616:	8a e0       	ldi	r24, 0x0A	; 10
     618:	0e 94 ba 05 	call	0xb74	; 0xb74 <M_DIO_voidSetPinValue>
	M_DIO_voidSetPinValue(D7_PIN, READ_BIT(copy_u8data, 7));
     61c:	6c 2f       	mov	r22, r28
     61e:	66 1f       	adc	r22, r22
     620:	66 27       	eor	r22, r22
     622:	66 1f       	adc	r22, r22
     624:	8c e0       	ldi	r24, 0x0C	; 12
     626:	0e 94 ba 05 	call	0xb74	; 0xb74 <M_DIO_voidSetPinValue>

	M_DIO_voidSetPinValue(EN_PIN, HIGH);
     62a:	61 e0       	ldi	r22, 0x01	; 1
     62c:	82 e0       	ldi	r24, 0x02	; 2
     62e:	0e 94 ba 05 	call	0xb74	; 0xb74 <M_DIO_voidSetPinValue>
     632:	8f ec       	ldi	r24, 0xCF	; 207
     634:	97 e0       	ldi	r25, 0x07	; 7
     636:	01 97       	sbiw	r24, 0x01	; 1
     638:	f1 f7       	brne	.-4      	; 0x636 <H_LCD_voidSendData+0x4a>
     63a:	00 c0       	rjmp	.+0      	; 0x63c <H_LCD_voidSendData+0x50>
     63c:	00 00       	nop
	_delay_ms(1);
	M_DIO_voidSetPinValue(EN_PIN, LOW);
     63e:	60 e0       	ldi	r22, 0x00	; 0
     640:	82 e0       	ldi	r24, 0x02	; 2
     642:	0e 94 ba 05 	call	0xb74	; 0xb74 <M_DIO_voidSetPinValue>

	M_DIO_voidSetPinValue(D4_PIN, READ_BIT(copy_u8data, 0));
     646:	6c 2f       	mov	r22, r28
     648:	61 70       	andi	r22, 0x01	; 1
     64a:	88 e0       	ldi	r24, 0x08	; 8
     64c:	0e 94 ba 05 	call	0xb74	; 0xb74 <M_DIO_voidSetPinValue>
	M_DIO_voidSetPinValue(D5_PIN, READ_BIT(copy_u8data, 1));
     650:	c1 fb       	bst	r28, 1
     652:	66 27       	eor	r22, r22
     654:	60 f9       	bld	r22, 0
     656:	89 e0       	ldi	r24, 0x09	; 9
     658:	0e 94 ba 05 	call	0xb74	; 0xb74 <M_DIO_voidSetPinValue>
	M_DIO_voidSetPinValue(D6_PIN, READ_BIT(copy_u8data, 2));
     65c:	c2 fb       	bst	r28, 2
     65e:	66 27       	eor	r22, r22
     660:	60 f9       	bld	r22, 0
     662:	8a e0       	ldi	r24, 0x0A	; 10
     664:	0e 94 ba 05 	call	0xb74	; 0xb74 <M_DIO_voidSetPinValue>
	M_DIO_voidSetPinValue(D7_PIN, READ_BIT(copy_u8data, 3));
     668:	c3 fb       	bst	r28, 3
     66a:	66 27       	eor	r22, r22
     66c:	60 f9       	bld	r22, 0
     66e:	8c e0       	ldi	r24, 0x0C	; 12
     670:	0e 94 ba 05 	call	0xb74	; 0xb74 <M_DIO_voidSetPinValue>

	M_DIO_voidSetPinValue(EN_PIN, HIGH);
     674:	61 e0       	ldi	r22, 0x01	; 1
     676:	82 e0       	ldi	r24, 0x02	; 2
     678:	0e 94 ba 05 	call	0xb74	; 0xb74 <M_DIO_voidSetPinValue>
     67c:	8f ec       	ldi	r24, 0xCF	; 207
     67e:	97 e0       	ldi	r25, 0x07	; 7
     680:	01 97       	sbiw	r24, 0x01	; 1
     682:	f1 f7       	brne	.-4      	; 0x680 <H_LCD_voidSendData+0x94>
     684:	00 c0       	rjmp	.+0      	; 0x686 <H_LCD_voidSendData+0x9a>
     686:	00 00       	nop
	_delay_ms(1);
	M_DIO_voidSetPinValue(EN_PIN, LOW);
     688:	60 e0       	ldi	r22, 0x00	; 0
     68a:	82 e0       	ldi	r24, 0x02	; 2
     68c:	0e 94 ba 05 	call	0xb74	; 0xb74 <M_DIO_voidSetPinValue>
     690:	8f ec       	ldi	r24, 0xCF	; 207
     692:	97 e0       	ldi	r25, 0x07	; 7
     694:	01 97       	sbiw	r24, 0x01	; 1
     696:	f1 f7       	brne	.-4      	; 0x694 <H_LCD_voidSendData+0xa8>
     698:	00 c0       	rjmp	.+0      	; 0x69a <H_LCD_voidSendData+0xae>
     69a:	00 00       	nop
	_delay_ms(1);

}
     69c:	cf 91       	pop	r28
     69e:	08 95       	ret

000006a0 <H_LCD_voidInit>:
void H_LCD_voidInit(void) {
	//intialize RS & EN as output
	M_DIO_voidSetPinDirection(RS_PIN, OUTPUT);
     6a0:	61 e0       	ldi	r22, 0x01	; 1
     6a2:	83 e0       	ldi	r24, 0x03	; 3
     6a4:	0e 94 33 05 	call	0xa66	; 0xa66 <M_DIO_voidSetPinDirection>
	M_DIO_voidSetPinDirection(EN_PIN, OUTPUT);
     6a8:	61 e0       	ldi	r22, 0x01	; 1
     6aa:	82 e0       	ldi	r24, 0x02	; 2
     6ac:	0e 94 33 05 	call	0xa66	; 0xa66 <M_DIO_voidSetPinDirection>

	//intialize D4 -> D7 as output
	M_DIO_voidSetPinDirection(D4_PIN, OUTPUT);
     6b0:	61 e0       	ldi	r22, 0x01	; 1
     6b2:	88 e0       	ldi	r24, 0x08	; 8
     6b4:	0e 94 33 05 	call	0xa66	; 0xa66 <M_DIO_voidSetPinDirection>
	M_DIO_voidSetPinDirection(D5_PIN, OUTPUT);
     6b8:	61 e0       	ldi	r22, 0x01	; 1
     6ba:	89 e0       	ldi	r24, 0x09	; 9
     6bc:	0e 94 33 05 	call	0xa66	; 0xa66 <M_DIO_voidSetPinDirection>
	M_DIO_voidSetPinDirection(D6_PIN, OUTPUT);
     6c0:	61 e0       	ldi	r22, 0x01	; 1
     6c2:	8a e0       	ldi	r24, 0x0A	; 10
     6c4:	0e 94 33 05 	call	0xa66	; 0xa66 <M_DIO_voidSetPinDirection>
	M_DIO_voidSetPinDirection(D7_PIN, OUTPUT);
     6c8:	61 e0       	ldi	r22, 0x01	; 1
     6ca:	8c e0       	ldi	r24, 0x0C	; 12
     6cc:	0e 94 33 05 	call	0xa66	; 0xa66 <M_DIO_voidSetPinDirection>
     6d0:	2f e7       	ldi	r18, 0x7F	; 127
     6d2:	88 e3       	ldi	r24, 0x38	; 56
     6d4:	91 e0       	ldi	r25, 0x01	; 1
     6d6:	21 50       	subi	r18, 0x01	; 1
     6d8:	80 40       	sbci	r24, 0x00	; 0
     6da:	90 40       	sbci	r25, 0x00	; 0
     6dc:	e1 f7       	brne	.-8      	; 0x6d6 <H_LCD_voidInit+0x36>
     6de:	00 c0       	rjmp	.+0      	; 0x6e0 <H_LCD_voidInit+0x40>
     6e0:	00 00       	nop
	_delay_ms(50);
	H_LCD_voidSendCommand(0x02); //set fun
     6e2:	82 e0       	ldi	r24, 0x02	; 2
     6e4:	0e 94 9c 02 	call	0x538	; 0x538 <H_LCD_voidSendCommand>
	H_LCD_voidSendCommand(0x28);
     6e8:	88 e2       	ldi	r24, 0x28	; 40
     6ea:	0e 94 9c 02 	call	0x538	; 0x538 <H_LCD_voidSendCommand>
	H_LCD_voidSendCommand(0x0c);
     6ee:	8c e0       	ldi	r24, 0x0C	; 12
     6f0:	0e 94 9c 02 	call	0x538	; 0x538 <H_LCD_voidSendCommand>
	H_LCD_voidSendCommand(0x01);
     6f4:	81 e0       	ldi	r24, 0x01	; 1
     6f6:	0e 94 9c 02 	call	0x538	; 0x538 <H_LCD_voidSendCommand>
     6fa:	8f ec       	ldi	r24, 0xCF	; 207
     6fc:	97 e0       	ldi	r25, 0x07	; 7
     6fe:	01 97       	sbiw	r24, 0x01	; 1
     700:	f1 f7       	brne	.-4      	; 0x6fe <H_LCD_voidInit+0x5e>
     702:	00 c0       	rjmp	.+0      	; 0x704 <H_LCD_voidInit+0x64>
     704:	00 00       	nop
	_delay_ms(1);
	H_LCD_voidSendCommand(0x06); //no shift ddram++
     706:	86 e0       	ldi	r24, 0x06	; 6
     708:	0e 94 9c 02 	call	0x538	; 0x538 <H_LCD_voidSendCommand>
     70c:	08 95       	ret

0000070e <H_LCD_voidSendChar>:
	H_LCD_voidSendCommand(0x06);
}
#endif

void H_LCD_voidSendChar(u8 copy_u8char) {
	H_LCD_voidSendData(copy_u8char);
     70e:	0e 94 f6 02 	call	0x5ec	; 0x5ec <H_LCD_voidSendData>
     712:	08 95       	ret

00000714 <H_LCD_voidSendString>:
}

void H_LCD_voidSendString(c8*copy_str) {
     714:	0f 93       	push	r16
     716:	1f 93       	push	r17
     718:	cf 93       	push	r28
	u8 i = 0;
	if (copy_str == 0) {
     71a:	00 97       	sbiw	r24, 0x00	; 0
     71c:	61 f0       	breq	.+24     	; 0x736 <H_LCD_voidSendString+0x22>
     71e:	8c 01       	movw	r16, r24
     720:	c0 e0       	ldi	r28, 0x00	; 0
     722:	03 c0       	rjmp	.+6      	; 0x72a <H_LCD_voidSendString+0x16>
		//do nothing
	} else {
		while (copy_str[i]) {
			H_LCD_voidSendChar(copy_str[i]);
     724:	0e 94 87 03 	call	0x70e	; 0x70e <H_LCD_voidSendChar>
			i++;
     728:	cf 5f       	subi	r28, 0xFF	; 255
void H_LCD_voidSendString(c8*copy_str) {
	u8 i = 0;
	if (copy_str == 0) {
		//do nothing
	} else {
		while (copy_str[i]) {
     72a:	f8 01       	movw	r30, r16
     72c:	ec 0f       	add	r30, r28
     72e:	f1 1d       	adc	r31, r1
     730:	80 81       	ld	r24, Z
     732:	81 11       	cpse	r24, r1
     734:	f7 cf       	rjmp	.-18     	; 0x724 <H_LCD_voidSendString+0x10>
			H_LCD_voidSendChar(copy_str[i]);
			i++;
		}
	}
}
     736:	cf 91       	pop	r28
     738:	1f 91       	pop	r17
     73a:	0f 91       	pop	r16
     73c:	08 95       	ret

0000073e <H_LCD_voidSetPosition>:
	{
		data=0x80;
	}
	/********************************************/
	/*set the postion of cursor depend on the selected row and coloumn*/
	if(copy_u8row==1)
     73e:	81 30       	cpi	r24, 0x01	; 1
     740:	19 f4       	brne	.+6      	; 0x748 <H_LCD_voidSetPosition+0xa>
	{
		data=0x80+copy_u8col-1 ;
     742:	8f e7       	ldi	r24, 0x7F	; 127
     744:	86 0f       	add	r24, r22
     746:	10 c0       	rjmp	.+32     	; 0x768 <H_LCD_voidSetPosition+0x2a>
	}
	else if (copy_u8row==2)
     748:	82 30       	cpi	r24, 0x02	; 2
     74a:	19 f4       	brne	.+6      	; 0x752 <H_LCD_voidSetPosition+0x14>
	{
		data=0x80 + 0x40 +copy_u8col-1;
     74c:	8f eb       	ldi	r24, 0xBF	; 191
     74e:	86 0f       	add	r24, r22
     750:	0b c0       	rjmp	.+22     	; 0x768 <H_LCD_voidSetPosition+0x2a>
	}
	else if (copy_u8row==3)
     752:	83 30       	cpi	r24, 0x03	; 3
     754:	19 f4       	brne	.+6      	; 0x75c <H_LCD_voidSetPosition+0x1e>
	{
		data=0x80 + 0x14 +copy_u8col-1;
     756:	83 e9       	ldi	r24, 0x93	; 147
     758:	86 0f       	add	r24, r22
     75a:	06 c0       	rjmp	.+12     	; 0x768 <H_LCD_voidSetPosition+0x2a>
	}
	else if (copy_u8row==4)
     75c:	84 30       	cpi	r24, 0x04	; 4
     75e:	19 f4       	brne	.+6      	; 0x766 <H_LCD_voidSetPosition+0x28>
	{
		data=0x80 + 0x54 +copy_u8col-1;
     760:	83 ed       	ldi	r24, 0xD3	; 211
     762:	86 0f       	add	r24, r22
     764:	01 c0       	rjmp	.+2      	; 0x768 <H_LCD_voidSetPosition+0x2a>
     766:	80 e8       	ldi	r24, 0x80	; 128
	}

	/**************************************/
		
	H_LCD_voidSendCommand(data); //set the position  of the cursor
     768:	0e 94 9c 02 	call	0x538	; 0x538 <H_LCD_voidSendCommand>
     76c:	08 95       	ret

0000076e <H_LCD_SendNumber>:

}
void H_LCD_SendNumber(s64 copy_u8num) {
     76e:	2f 92       	push	r2
     770:	3f 92       	push	r3
     772:	4f 92       	push	r4
     774:	5f 92       	push	r5
     776:	6f 92       	push	r6
     778:	7f 92       	push	r7
     77a:	8f 92       	push	r8
     77c:	9f 92       	push	r9
     77e:	af 92       	push	r10
     780:	bf 92       	push	r11
     782:	cf 92       	push	r12
     784:	df 92       	push	r13
     786:	ef 92       	push	r14
     788:	ff 92       	push	r15
     78a:	0f 93       	push	r16
     78c:	1f 93       	push	r17
     78e:	cf 93       	push	r28
     790:	df 93       	push	r29
     792:	cd b7       	in	r28, 0x3d	; 61
     794:	de b7       	in	r29, 0x3e	; 62
     796:	67 97       	sbiw	r28, 0x17	; 23
     798:	0f b6       	in	r0, 0x3f	; 63
     79a:	f8 94       	cli
     79c:	de bf       	out	0x3e, r29	; 62
     79e:	0f be       	out	0x3f, r0	; 63
     7a0:	cd bf       	out	0x3d, r28	; 61
     7a2:	2d 8b       	std	Y+21, r18	; 0x15
     7a4:	3e 8b       	std	Y+22, r19	; 0x16
     7a6:	4f 8b       	std	Y+23, r20	; 0x17
     7a8:	85 2e       	mov	r8, r21
     7aa:	76 2e       	mov	r7, r22
     7ac:	67 2e       	mov	r6, r23
     7ae:	38 2e       	mov	r3, r24
     7b0:	29 2e       	mov	r2, r25
	itoa(copy_u8num, lcoal_ArrStrig, 10);
	H_LCD_voidSendString(lcoal_ArrStrig);*/
		u8 i=0;
		s8 j;
	char lcoal_ArrStrig[20];
	if(copy_u8num==0)
     7b2:	a0 e0       	ldi	r26, 0x00	; 0
     7b4:	0e 94 13 0a 	call	0x1426	; 0x1426 <__cmpdi2_s8>
     7b8:	19 f4       	brne	.+6      	; 0x7c0 <H_LCD_SendNumber+0x52>
	{
		H_LCD_voidSendChar('0');
     7ba:	80 e3       	ldi	r24, 0x30	; 48
     7bc:	0e 94 87 03 	call	0x70e	; 0x70e <H_LCD_voidSendChar>
	}
    if (copy_u8num<0)
     7c0:	2d 89       	ldd	r18, Y+21	; 0x15
     7c2:	3e 89       	ldd	r19, Y+22	; 0x16
     7c4:	4f 89       	ldd	r20, Y+23	; 0x17
     7c6:	58 2d       	mov	r21, r8
     7c8:	67 2d       	mov	r22, r7
     7ca:	76 2d       	mov	r23, r6
     7cc:	83 2d       	mov	r24, r3
     7ce:	92 2d       	mov	r25, r2
     7d0:	a0 e0       	ldi	r26, 0x00	; 0
     7d2:	0e 94 13 0a 	call	0x1426	; 0x1426 <__cmpdi2_s8>
     7d6:	ac f4       	brge	.+42     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
	{
		H_LCD_voidSendChar('-');
     7d8:	8d e2       	ldi	r24, 0x2D	; 45
     7da:	0e 94 87 03 	call	0x70e	; 0x70e <H_LCD_voidSendChar>
		copy_u8num = copy_u8num*-1;
     7de:	2d 89       	ldd	r18, Y+21	; 0x15
     7e0:	3e 89       	ldd	r19, Y+22	; 0x16
     7e2:	4f 89       	ldd	r20, Y+23	; 0x17
     7e4:	58 2d       	mov	r21, r8
     7e6:	67 2d       	mov	r22, r7
     7e8:	76 2d       	mov	r23, r6
     7ea:	83 2d       	mov	r24, r3
     7ec:	92 2d       	mov	r25, r2
     7ee:	0e 94 cc 09 	call	0x1398	; 0x1398 <__negdi2>
     7f2:	2d 8b       	std	Y+21, r18	; 0x15
     7f4:	3e 8b       	std	Y+22, r19	; 0x16
     7f6:	4f 8b       	std	Y+23, r20	; 0x17
     7f8:	85 2e       	mov	r8, r21
     7fa:	76 2e       	mov	r7, r22
     7fc:	67 2e       	mov	r6, r23
     7fe:	38 2e       	mov	r3, r24
     800:	29 2e       	mov	r2, r25
	/**************************************/
		
	H_LCD_voidSendCommand(data); //set the position  of the cursor

}
void H_LCD_SendNumber(s64 copy_u8num) {
     802:	91 2c       	mov	r9, r1
     804:	32 c0       	rjmp	.+100    	; 0x86a <__stack+0xb>
		H_LCD_voidSendChar('-');
		copy_u8num = copy_u8num*-1;
	}
	while(copy_u8num>0)
	{
		lcoal_ArrStrig[i] = copy_u8num%10+'0';
     806:	49 2c       	mov	r4, r9
     808:	51 2c       	mov	r5, r1
     80a:	0f 2e       	mov	r0, r31
     80c:	fa e0       	ldi	r31, 0x0A	; 10
     80e:	af 2e       	mov	r10, r31
     810:	f0 2d       	mov	r31, r0
     812:	b1 2c       	mov	r11, r1
     814:	c1 2c       	mov	r12, r1
     816:	d1 2c       	mov	r13, r1
     818:	e1 2c       	mov	r14, r1
     81a:	f1 2c       	mov	r15, r1
     81c:	00 e0       	ldi	r16, 0x00	; 0
     81e:	10 e0       	ldi	r17, 0x00	; 0
     820:	2d 89       	ldd	r18, Y+21	; 0x15
     822:	3e 89       	ldd	r19, Y+22	; 0x16
     824:	4f 89       	ldd	r20, Y+23	; 0x17
     826:	58 2d       	mov	r21, r8
     828:	67 2d       	mov	r22, r7
     82a:	76 2d       	mov	r23, r6
     82c:	83 2d       	mov	r24, r3
     82e:	92 2d       	mov	r25, r2
     830:	0e 94 3c 09 	call	0x1278	; 0x1278 <__moddi3>
     834:	e1 e0       	ldi	r30, 0x01	; 1
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	ec 0f       	add	r30, r28
     83a:	fd 1f       	adc	r31, r29
     83c:	e4 0d       	add	r30, r4
     83e:	f5 1d       	adc	r31, r5
     840:	20 5d       	subi	r18, 0xD0	; 208
     842:	20 83       	st	Z, r18
		copy_u8num = copy_u8num/10;
     844:	2d 89       	ldd	r18, Y+21	; 0x15
     846:	3e 89       	ldd	r19, Y+22	; 0x16
     848:	4f 89       	ldd	r20, Y+23	; 0x17
     84a:	58 2d       	mov	r21, r8
     84c:	67 2d       	mov	r22, r7
     84e:	76 2d       	mov	r23, r6
     850:	83 2d       	mov	r24, r3
     852:	92 2d       	mov	r25, r2
     854:	0e 94 3e 09 	call	0x127c	; 0x127c <__divdi3>
     858:	2d 8b       	std	Y+21, r18	; 0x15
     85a:	3e 8b       	std	Y+22, r19	; 0x16
     85c:	4f 8b       	std	Y+23, r20	; 0x17
     85e:	85 2e       	mov	r8, r21
     860:	76 2e       	mov	r7, r22
     862:	67 2e       	mov	r6, r23
     864:	38 2e       	mov	r3, r24
     866:	29 2e       	mov	r2, r25
		i++;
     868:	93 94       	inc	r9
    if (copy_u8num<0)
	{
		H_LCD_voidSendChar('-');
		copy_u8num = copy_u8num*-1;
	}
	while(copy_u8num>0)
     86a:	2d 89       	ldd	r18, Y+21	; 0x15
     86c:	3e 89       	ldd	r19, Y+22	; 0x16
     86e:	4f 89       	ldd	r20, Y+23	; 0x17
     870:	58 2d       	mov	r21, r8
     872:	67 2d       	mov	r22, r7
     874:	76 2d       	mov	r23, r6
     876:	83 2d       	mov	r24, r3
     878:	92 2d       	mov	r25, r2
     87a:	a0 e0       	ldi	r26, 0x00	; 0
     87c:	0e 94 13 0a 	call	0x1426	; 0x1426 <__cmpdi2_s8>
     880:	09 f0       	breq	.+2      	; 0x884 <__stack+0x25>
     882:	0c f6       	brge	.-126    	; 0x806 <__DATA_REGION_LENGTH__+0x6>
	{
		lcoal_ArrStrig[i] = copy_u8num%10+'0';
		copy_u8num = copy_u8num/10;
		i++;
	}
	for(j=i-1;j>=0;j--)
     884:	9a 94       	dec	r9
     886:	0c c0       	rjmp	.+24     	; 0x8a0 <__stack+0x41>
	{
		H_LCD_voidSendChar(lcoal_ArrStrig[j]);
     888:	e1 e0       	ldi	r30, 0x01	; 1
     88a:	f0 e0       	ldi	r31, 0x00	; 0
     88c:	ec 0f       	add	r30, r28
     88e:	fd 1f       	adc	r31, r29
     890:	e9 0d       	add	r30, r9
     892:	f1 1d       	adc	r31, r1
     894:	97 fc       	sbrc	r9, 7
     896:	fa 95       	dec	r31
     898:	80 81       	ld	r24, Z
     89a:	0e 94 87 03 	call	0x70e	; 0x70e <H_LCD_voidSendChar>
	{
		lcoal_ArrStrig[i] = copy_u8num%10+'0';
		copy_u8num = copy_u8num/10;
		i++;
	}
	for(j=i-1;j>=0;j--)
     89e:	9a 94       	dec	r9
     8a0:	99 20       	and	r9, r9
     8a2:	94 f7       	brge	.-28     	; 0x888 <__stack+0x29>
	{
		H_LCD_voidSendChar(lcoal_ArrStrig[j]);
	}
}
     8a4:	67 96       	adiw	r28, 0x17	; 23
     8a6:	0f b6       	in	r0, 0x3f	; 63
     8a8:	f8 94       	cli
     8aa:	de bf       	out	0x3e, r29	; 62
     8ac:	0f be       	out	0x3f, r0	; 63
     8ae:	cd bf       	out	0x3d, r28	; 61
     8b0:	df 91       	pop	r29
     8b2:	cf 91       	pop	r28
     8b4:	1f 91       	pop	r17
     8b6:	0f 91       	pop	r16
     8b8:	ff 90       	pop	r15
     8ba:	ef 90       	pop	r14
     8bc:	df 90       	pop	r13
     8be:	cf 90       	pop	r12
     8c0:	bf 90       	pop	r11
     8c2:	af 90       	pop	r10
     8c4:	9f 90       	pop	r9
     8c6:	8f 90       	pop	r8
     8c8:	7f 90       	pop	r7
     8ca:	6f 90       	pop	r6
     8cc:	5f 90       	pop	r5
     8ce:	4f 90       	pop	r4
     8d0:	3f 90       	pop	r3
     8d2:	2f 90       	pop	r2
     8d4:	08 95       	ret

000008d6 <H_LCD_voidClearDisplay>:

void H_LCD_voidClearDisplay(void) {

	H_LCD_voidSendCommand(0x01);
     8d6:	81 e0       	ldi	r24, 0x01	; 1
     8d8:	0e 94 9c 02 	call	0x538	; 0x538 <H_LCD_voidSendCommand>
     8dc:	8f ec       	ldi	r24, 0xCF	; 207
     8de:	97 e0       	ldi	r25, 0x07	; 7
     8e0:	01 97       	sbiw	r24, 0x01	; 1
     8e2:	f1 f7       	brne	.-4      	; 0x8e0 <H_LCD_voidClearDisplay+0xa>
     8e4:	00 c0       	rjmp	.+0      	; 0x8e6 <H_LCD_voidClearDisplay+0x10>
     8e6:	00 00       	nop
     8e8:	08 95       	ret

000008ea <H_Servo_voidInit>:
	/*will do the following*/
	/*
	 * set timer in fast pwm mode ocra top set top value by 19999
	 * set ocr1b value by 999
	 * */
	M_DIO_voidSetPinDirection(SERVO_PIN, OUTPUT);
     8ea:	61 e0       	ldi	r22, 0x01	; 1
     8ec:	8c e1       	ldi	r24, 0x1C	; 28
     8ee:	0e 94 33 05 	call	0xa66	; 0xa66 <M_DIO_voidSetPinDirection>
	//M_TIMER1_voidInit();  //timer 1 is initialized in the ultrasonic init function
	//M_TIMER1_voidStart();
	M_TIMER1_void_Set_OCR1B_Value(999);
     8f2:	87 ee       	ldi	r24, 0xE7	; 231
     8f4:	93 e0       	ldi	r25, 0x03	; 3
     8f6:	0e 94 3a 07 	call	0xe74	; 0xe74 <M_TIMER1_void_Set_OCR1B_Value>
	//enable GIE
	M_Global_Interrupt_Enable();
     8fa:	0e 94 41 06 	call	0xc82	; 0xc82 <M_Global_Interrupt_Enable>
     8fe:	08 95       	ret

00000900 <H_Servo_voidSetAngle>:
}
void H_Servo_voidSetAngle(u8 angle)
{
	M_TIMER1_void_Set_OCR1B_Value(((angle*(u32)1000)/180)+999);
     900:	28 2f       	mov	r18, r24
     902:	30 e0       	ldi	r19, 0x00	; 0
     904:	a8 ee       	ldi	r26, 0xE8	; 232
     906:	b3 e0       	ldi	r27, 0x03	; 3
     908:	0e 94 2d 09 	call	0x125a	; 0x125a <__umulhisi3>
     90c:	24 eb       	ldi	r18, 0xB4	; 180
     90e:	30 e0       	ldi	r19, 0x00	; 0
     910:	40 e0       	ldi	r20, 0x00	; 0
     912:	50 e0       	ldi	r21, 0x00	; 0
     914:	0e 94 0b 09 	call	0x1216	; 0x1216 <__udivmodsi4>
     918:	c9 01       	movw	r24, r18
     91a:	89 51       	subi	r24, 0x19	; 25
     91c:	9c 4f       	sbci	r25, 0xFC	; 252
     91e:	0e 94 3a 07 	call	0xe74	; 0xe74 <M_TIMER1_void_Set_OCR1B_Value>
     922:	08 95       	ret

00000924 <H_Ultra_OVF_Func>:
	}
}

void H_Ultra_OVF_Func(void)
{
	Counter++;
     924:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <Counter>
     928:	8f 5f       	subi	r24, 0xFF	; 255
     92a:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <Counter>
     92e:	08 95       	ret

00000930 <H_Ultra_ICU_Func>:
	return Distance;
}


void H_Ultra_ICU_Func(void) {
	if (flag == 0) {
     930:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <flag>
     934:	81 11       	cpse	r24, r1
     936:	0f c0       	rjmp	.+30     	; 0x956 <H_Ultra_ICU_Func+0x26>
		Reading1 = M_TIMER1_ICU_u16takeReading();
     938:	0e 94 10 07 	call	0xe20	; 0xe20 <M_TIMER1_ICU_u16takeReading>
     93c:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <Reading1+0x1>
     940:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <Reading1>
		Counter = 0;
     944:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <Counter>
		M_TIMER1_ICU_voidSetTrigger(FALLING);
     948:	81 e0       	ldi	r24, 0x01	; 1
     94a:	0e 94 03 07 	call	0xe06	; 0xe06 <M_TIMER1_ICU_voidSetTrigger>
		flag = 1;
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <flag>
     954:	08 95       	ret
	} else if (flag == 1) {
     956:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <flag>
     95a:	81 30       	cpi	r24, 0x01	; 1
     95c:	79 f4       	brne	.+30     	; 0x97c <H_Ultra_ICU_Func+0x4c>
		Reading2 = M_TIMER1_ICU_u16takeReading();
     95e:	0e 94 10 07 	call	0xe20	; 0xe20 <M_TIMER1_ICU_u16takeReading>
     962:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <Reading2+0x1>
     966:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <Reading2>
		Ovf_Counter = Counter;
     96a:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <Counter>
     96e:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <Ovf_Counter>
		//disable icu interrupt
		M_Timer1_ICU_voidInterruptDisable();
     972:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <M_Timer1_ICU_voidInterruptDisable>
		flag = 2;
     976:	82 e0       	ldi	r24, 0x02	; 2
     978:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <flag>
     97c:	08 95       	ret

0000097e <H_Ultrasonic_voidInit>:
void H_Ultrasonic_voidInit(void)
{
	//TIMER 1 INIT

	//init timer 1 in fast pwm ocr1a top mode
	M_TIMER1_voidInit();
     97e:	0e 94 d3 06 	call	0xda6	; 0xda6 <M_TIMER1_voidInit>
	//set icu pin as input
	M_DIO_voidSetPinDirection(PIND6, INPUT);
     982:	60 e0       	ldi	r22, 0x00	; 0
     984:	8e e1       	ldi	r24, 0x1E	; 30
     986:	0e 94 33 05 	call	0xa66	; 0xa66 <M_DIO_voidSetPinDirection>
	//Trig pin direction as output
	M_DIO_voidSetPinDirection(ULTRA_TRIG_PIN, OUTPUT);
     98a:	61 e0       	ldi	r22, 0x01	; 1
     98c:	8f e0       	ldi	r24, 0x0F	; 15
     98e:	0e 94 33 05 	call	0xa66	; 0xa66 <M_DIO_voidSetPinDirection>
	//Set icu trigger
	M_TIMER1_ICU_voidSetTrigger(RISING);
     992:	80 e0       	ldi	r24, 0x00	; 0
     994:	0e 94 03 07 	call	0xe06	; 0xe06 <M_TIMER1_ICU_voidSetTrigger>
	//set callback of icu vector
	M_TIMER1_voidSetCallBack(TIMER1_ICU_INTERRUPT, H_Ultra_ICU_Func);
     998:	68 e9       	ldi	r22, 0x98	; 152
     99a:	74 e0       	ldi	r23, 0x04	; 4
     99c:	81 e0       	ldi	r24, 0x01	; 1
     99e:	0e 94 13 07 	call	0xe26	; 0xe26 <M_TIMER1_voidSetCallBack>
	//set callback of ovf vector
	M_TIMER1_voidSetCallBack(TIMER1_OVF_INTERRUPT, H_Ultra_OVF_Func);
     9a2:	62 e9       	ldi	r22, 0x92	; 146
     9a4:	74 e0       	ldi	r23, 0x04	; 4
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	0e 94 13 07 	call	0xe26	; 0xe26 <M_TIMER1_voidSetCallBack>
	//enable icu interrupt
	M_Timer1_ICU_voidInterruptEnable();
     9ac:	0e 94 f7 06 	call	0xdee	; 0xdee <M_Timer1_ICU_voidInterruptEnable>
	//enable ovf interrupt
	M_Timer1_OVF_voidInterruptEnable();
     9b0:	0e 94 ff 06 	call	0xdfe	; 0xdfe <M_Timer1_OVF_voidInterruptEnable>
	//timer start
	M_TIMER1_voidStart();
     9b4:	0e 94 f0 06 	call	0xde0	; 0xde0 <M_TIMER1_voidStart>

	//enable GIE
	M_Global_Interrupt_Enable();
     9b8:	0e 94 41 06 	call	0xc82	; 0xc82 <M_Global_Interrupt_Enable>
     9bc:	08 95       	ret

000009be <H_Ultrasonic_voidGetDistance>:

}
u16 H_Ultrasonic_voidGetDistance(void)
{
     9be:	cf 92       	push	r12
     9c0:	df 92       	push	r13
     9c2:	ef 92       	push	r14
     9c4:	ff 92       	push	r15
     9c6:	cf 93       	push	r28
     9c8:	df 93       	push	r29
	u16 Distance;
	u16 Time;

	flag = 0;
     9ca:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <flag>
	//enable icu interrupt
	M_Timer1_ICU_voidInterruptEnable();
     9ce:	0e 94 f7 06 	call	0xdee	; 0xdee <M_Timer1_ICU_voidInterruptEnable>
	M_TIMER1_ICU_voidSetTrigger(RISING);
     9d2:	80 e0       	ldi	r24, 0x00	; 0
     9d4:	0e 94 03 07 	call	0xe06	; 0xe06 <M_TIMER1_ICU_voidSetTrigger>
	//send trigger
	M_DIO_voidSetPinValue(PINB7, HIGH);
     9d8:	61 e0       	ldi	r22, 0x01	; 1
     9da:	8f e0       	ldi	r24, 0x0F	; 15
     9dc:	0e 94 ba 05 	call	0xb74	; 0xb74 <M_DIO_voidSetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9e0:	2a e1       	ldi	r18, 0x1A	; 26
     9e2:	2a 95       	dec	r18
     9e4:	f1 f7       	brne	.-4      	; 0x9e2 <H_Ultrasonic_voidGetDistance+0x24>
     9e6:	00 c0       	rjmp	.+0      	; 0x9e8 <H_Ultrasonic_voidGetDistance+0x2a>
	_delay_us(10);
	M_DIO_voidSetPinValue(PINB7, LOW);
     9e8:	60 e0       	ldi	r22, 0x00	; 0
     9ea:	8f e0       	ldi	r24, 0x0F	; 15
     9ec:	0e 94 ba 05 	call	0xb74	; 0xb74 <M_DIO_voidSetPinValue>

	while(flag<2);
     9f0:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <flag>
     9f4:	82 30       	cpi	r24, 0x02	; 2
     9f6:	e0 f3       	brcs	.-8      	; 0x9f0 <H_Ultrasonic_voidGetDistance+0x32>

	//calculate pwm parameter
	//u16 NumOfCounts = Reading2 - Reading1;
	//Time = NumOfCounts * M_TIMER1_f32GetTickTime() ; //time in micro sec
	u16 Timer_Counts = ( Reading2 - Reading1 + ((u32)Ovf_Counter * M_TIMER1_u16GetTopValue())) ;
     9f8:	c0 91 43 01 	lds	r28, 0x0143	; 0x800143 <Reading2>
     9fc:	d0 91 44 01 	lds	r29, 0x0144	; 0x800144 <Reading2+0x1>
     a00:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <Reading1>
     a04:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <Reading1+0x1>
     a08:	c8 1b       	sub	r28, r24
     a0a:	d9 0b       	sbc	r29, r25
     a0c:	f0 90 5a 01 	lds	r15, 0x015A	; 0x80015a <Ovf_Counter>
     a10:	0e 94 37 07 	call	0xe6e	; 0xe6e <M_TIMER1_u16GetTopValue>
     a14:	9c 01       	movw	r18, r24
     a16:	f2 9e       	mul	r15, r18
     a18:	c0 01       	movw	r24, r0
     a1a:	f3 9e       	mul	r15, r19
     a1c:	90 0d       	add	r25, r0
     a1e:	11 24       	eor	r1, r1
     a20:	c8 0f       	add	r28, r24
     a22:	d9 1f       	adc	r29, r25
	Time = ((u32)Timer_Counts * M_TIMER1_f32GetTickTime()) ; //time in micro sec
     a24:	0e 94 32 07 	call	0xe64	; 0xe64 <M_TIMER1_f32GetTickTime>
     a28:	6b 01       	movw	r12, r22
     a2a:	7c 01       	movw	r14, r24
     a2c:	be 01       	movw	r22, r28
     a2e:	80 e0       	ldi	r24, 0x00	; 0
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	0e 94 10 08 	call	0x1020	; 0x1020 <__floatunsisf>
     a36:	a7 01       	movw	r20, r14
     a38:	96 01       	movw	r18, r12
     a3a:	0e 94 76 08 	call	0x10ec	; 0x10ec <__mulsf3>
     a3e:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <__fixunssfsi>
	Distance = Time/58; //converting meter to cm and sec to micro sec
     a42:	9b 01       	movw	r18, r22
     a44:	af e9       	ldi	r26, 0x9F	; 159
     a46:	b6 e4       	ldi	r27, 0x46	; 70
     a48:	0e 94 2d 09 	call	0x125a	; 0x125a <__umulhisi3>

	return Distance;
}
     a4c:	92 95       	swap	r25
     a4e:	82 95       	swap	r24
     a50:	8f 70       	andi	r24, 0x0F	; 15
     a52:	89 27       	eor	r24, r25
     a54:	9f 70       	andi	r25, 0x0F	; 15
     a56:	89 27       	eor	r24, r25
     a58:	df 91       	pop	r29
     a5a:	cf 91       	pop	r28
     a5c:	ff 90       	pop	r15
     a5e:	ef 90       	pop	r14
     a60:	df 90       	pop	r13
     a62:	cf 90       	pop	r12
     a64:	08 95       	ret

00000a66 <M_DIO_voidSetPinDirection>:
/************************** software implementation ****************************/
void M_DIO_voidSetPinDirection(u8 Copy_u8PinId,u8 Copy_u8Direction)
{
	u8 port;
	u8 pin;
	port = Copy_u8PinId / 8;
     a66:	98 2f       	mov	r25, r24
     a68:	96 95       	lsr	r25
     a6a:	96 95       	lsr	r25
     a6c:	96 95       	lsr	r25
	pin  = Copy_u8PinId % 8;
     a6e:	87 70       	andi	r24, 0x07	; 7
	switch(Copy_u8Direction)
     a70:	66 23       	and	r22, r22
     a72:	09 f4       	brne	.+2      	; 0xa76 <M_DIO_voidSetPinDirection+0x10>
     a74:	3f c0       	rjmp	.+126    	; 0xaf4 <M_DIO_voidSetPinDirection+0x8e>
     a76:	61 30       	cpi	r22, 0x01	; 1
     a78:	09 f0       	breq	.+2      	; 0xa7c <M_DIO_voidSetPinDirection+0x16>
     a7a:	7b c0       	rjmp	.+246    	; 0xb72 <M_DIO_voidSetPinDirection+0x10c>
	{
		case OUTPUT:
		switch(port)
     a7c:	91 30       	cpi	r25, 0x01	; 1
     a7e:	99 f0       	breq	.+38     	; 0xaa6 <M_DIO_voidSetPinDirection+0x40>
     a80:	28 f0       	brcs	.+10     	; 0xa8c <M_DIO_voidSetPinDirection+0x26>
     a82:	92 30       	cpi	r25, 0x02	; 2
     a84:	e9 f0       	breq	.+58     	; 0xac0 <M_DIO_voidSetPinDirection+0x5a>
     a86:	93 30       	cpi	r25, 0x03	; 3
     a88:	41 f1       	breq	.+80     	; 0xada <M_DIO_voidSetPinDirection+0x74>
     a8a:	08 95       	ret
		{
			case PORT_A:
			SET_BIT(DDRA,pin);
     a8c:	4a b3       	in	r20, 0x1a	; 26
     a8e:	21 e0       	ldi	r18, 0x01	; 1
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	b9 01       	movw	r22, r18
     a94:	02 c0       	rjmp	.+4      	; 0xa9a <M_DIO_voidSetPinDirection+0x34>
     a96:	66 0f       	add	r22, r22
     a98:	77 1f       	adc	r23, r23
     a9a:	8a 95       	dec	r24
     a9c:	e2 f7       	brpl	.-8      	; 0xa96 <M_DIO_voidSetPinDirection+0x30>
     a9e:	cb 01       	movw	r24, r22
     aa0:	84 2b       	or	r24, r20
     aa2:	8a bb       	out	0x1a, r24	; 26
            break;
     aa4:	08 95       	ret
			case PORT_B:
			SET_BIT(DDRB,pin);
     aa6:	47 b3       	in	r20, 0x17	; 23
     aa8:	21 e0       	ldi	r18, 0x01	; 1
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	b9 01       	movw	r22, r18
     aae:	02 c0       	rjmp	.+4      	; 0xab4 <M_DIO_voidSetPinDirection+0x4e>
     ab0:	66 0f       	add	r22, r22
     ab2:	77 1f       	adc	r23, r23
     ab4:	8a 95       	dec	r24
     ab6:	e2 f7       	brpl	.-8      	; 0xab0 <M_DIO_voidSetPinDirection+0x4a>
     ab8:	cb 01       	movw	r24, r22
     aba:	84 2b       	or	r24, r20
     abc:	87 bb       	out	0x17, r24	; 23
			break;
     abe:	08 95       	ret
			case PORT_C:
			SET_BIT(DDRC,pin);
     ac0:	44 b3       	in	r20, 0x14	; 20
     ac2:	21 e0       	ldi	r18, 0x01	; 1
     ac4:	30 e0       	ldi	r19, 0x00	; 0
     ac6:	b9 01       	movw	r22, r18
     ac8:	02 c0       	rjmp	.+4      	; 0xace <M_DIO_voidSetPinDirection+0x68>
     aca:	66 0f       	add	r22, r22
     acc:	77 1f       	adc	r23, r23
     ace:	8a 95       	dec	r24
     ad0:	e2 f7       	brpl	.-8      	; 0xaca <M_DIO_voidSetPinDirection+0x64>
     ad2:	cb 01       	movw	r24, r22
     ad4:	84 2b       	or	r24, r20
     ad6:	84 bb       	out	0x14, r24	; 20
			break;
     ad8:	08 95       	ret
			case PORT_D:
			SET_BIT(DDRD,pin);
     ada:	41 b3       	in	r20, 0x11	; 17
     adc:	21 e0       	ldi	r18, 0x01	; 1
     ade:	30 e0       	ldi	r19, 0x00	; 0
     ae0:	b9 01       	movw	r22, r18
     ae2:	02 c0       	rjmp	.+4      	; 0xae8 <M_DIO_voidSetPinDirection+0x82>
     ae4:	66 0f       	add	r22, r22
     ae6:	77 1f       	adc	r23, r23
     ae8:	8a 95       	dec	r24
     aea:	e2 f7       	brpl	.-8      	; 0xae4 <M_DIO_voidSetPinDirection+0x7e>
     aec:	cb 01       	movw	r24, r22
     aee:	84 2b       	or	r24, r20
     af0:	81 bb       	out	0x11, r24	; 17
			break;
     af2:	08 95       	ret
		}
		break;
		case INPUT:
		switch(port)
     af4:	91 30       	cpi	r25, 0x01	; 1
     af6:	a1 f0       	breq	.+40     	; 0xb20 <M_DIO_voidSetPinDirection+0xba>
     af8:	28 f0       	brcs	.+10     	; 0xb04 <M_DIO_voidSetPinDirection+0x9e>
     afa:	92 30       	cpi	r25, 0x02	; 2
     afc:	f9 f0       	breq	.+62     	; 0xb3c <M_DIO_voidSetPinDirection+0xd6>
     afe:	93 30       	cpi	r25, 0x03	; 3
     b00:	59 f1       	breq	.+86     	; 0xb58 <M_DIO_voidSetPinDirection+0xf2>
     b02:	08 95       	ret
		{
			case PORT_A:
			CLEAR_BIT(DDRA,pin);
     b04:	4a b3       	in	r20, 0x1a	; 26
     b06:	21 e0       	ldi	r18, 0x01	; 1
     b08:	30 e0       	ldi	r19, 0x00	; 0
     b0a:	b9 01       	movw	r22, r18
     b0c:	02 c0       	rjmp	.+4      	; 0xb12 <M_DIO_voidSetPinDirection+0xac>
     b0e:	66 0f       	add	r22, r22
     b10:	77 1f       	adc	r23, r23
     b12:	8a 95       	dec	r24
     b14:	e2 f7       	brpl	.-8      	; 0xb0e <M_DIO_voidSetPinDirection+0xa8>
     b16:	cb 01       	movw	r24, r22
     b18:	80 95       	com	r24
     b1a:	84 23       	and	r24, r20
     b1c:	8a bb       	out	0x1a, r24	; 26
			break;
     b1e:	08 95       	ret
			case PORT_B:
			CLEAR_BIT(DDRB,pin);
     b20:	47 b3       	in	r20, 0x17	; 23
     b22:	21 e0       	ldi	r18, 0x01	; 1
     b24:	30 e0       	ldi	r19, 0x00	; 0
     b26:	b9 01       	movw	r22, r18
     b28:	02 c0       	rjmp	.+4      	; 0xb2e <M_DIO_voidSetPinDirection+0xc8>
     b2a:	66 0f       	add	r22, r22
     b2c:	77 1f       	adc	r23, r23
     b2e:	8a 95       	dec	r24
     b30:	e2 f7       	brpl	.-8      	; 0xb2a <M_DIO_voidSetPinDirection+0xc4>
     b32:	cb 01       	movw	r24, r22
     b34:	80 95       	com	r24
     b36:	84 23       	and	r24, r20
     b38:	87 bb       	out	0x17, r24	; 23
			break;
     b3a:	08 95       	ret
			case PORT_C:
			CLEAR_BIT(DDRC,pin);
     b3c:	44 b3       	in	r20, 0x14	; 20
     b3e:	21 e0       	ldi	r18, 0x01	; 1
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	b9 01       	movw	r22, r18
     b44:	02 c0       	rjmp	.+4      	; 0xb4a <M_DIO_voidSetPinDirection+0xe4>
     b46:	66 0f       	add	r22, r22
     b48:	77 1f       	adc	r23, r23
     b4a:	8a 95       	dec	r24
     b4c:	e2 f7       	brpl	.-8      	; 0xb46 <M_DIO_voidSetPinDirection+0xe0>
     b4e:	cb 01       	movw	r24, r22
     b50:	80 95       	com	r24
     b52:	84 23       	and	r24, r20
     b54:	84 bb       	out	0x14, r24	; 20
			break;
     b56:	08 95       	ret
			case PORT_D:
			CLEAR_BIT(DDRD,pin);
     b58:	41 b3       	in	r20, 0x11	; 17
     b5a:	21 e0       	ldi	r18, 0x01	; 1
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	b9 01       	movw	r22, r18
     b60:	02 c0       	rjmp	.+4      	; 0xb66 <M_DIO_voidSetPinDirection+0x100>
     b62:	66 0f       	add	r22, r22
     b64:	77 1f       	adc	r23, r23
     b66:	8a 95       	dec	r24
     b68:	e2 f7       	brpl	.-8      	; 0xb62 <M_DIO_voidSetPinDirection+0xfc>
     b6a:	cb 01       	movw	r24, r22
     b6c:	80 95       	com	r24
     b6e:	84 23       	and	r24, r20
     b70:	81 bb       	out	0x11, r24	; 17
     b72:	08 95       	ret

00000b74 <M_DIO_voidSetPinValue>:
}
void M_DIO_voidSetPinValue(u8 Copy_u8PinId,u8 Copy_u8Value)
{
	u8 port;
		u8 pin;
		port = Copy_u8PinId/8;
     b74:	98 2f       	mov	r25, r24
     b76:	96 95       	lsr	r25
     b78:	96 95       	lsr	r25
     b7a:	96 95       	lsr	r25
		pin  = Copy_u8PinId%8;
     b7c:	87 70       	andi	r24, 0x07	; 7
		switch(Copy_u8Value)
     b7e:	66 23       	and	r22, r22
     b80:	09 f4       	brne	.+2      	; 0xb84 <M_DIO_voidSetPinValue+0x10>
     b82:	3f c0       	rjmp	.+126    	; 0xc02 <M_DIO_voidSetPinValue+0x8e>
     b84:	61 30       	cpi	r22, 0x01	; 1
     b86:	09 f0       	breq	.+2      	; 0xb8a <M_DIO_voidSetPinValue+0x16>
     b88:	7b c0       	rjmp	.+246    	; 0xc80 <M_DIO_voidSetPinValue+0x10c>
		{
			case HIGH:
			switch(port)
     b8a:	91 30       	cpi	r25, 0x01	; 1
     b8c:	99 f0       	breq	.+38     	; 0xbb4 <M_DIO_voidSetPinValue+0x40>
     b8e:	28 f0       	brcs	.+10     	; 0xb9a <M_DIO_voidSetPinValue+0x26>
     b90:	92 30       	cpi	r25, 0x02	; 2
     b92:	e9 f0       	breq	.+58     	; 0xbce <M_DIO_voidSetPinValue+0x5a>
     b94:	93 30       	cpi	r25, 0x03	; 3
     b96:	41 f1       	breq	.+80     	; 0xbe8 <M_DIO_voidSetPinValue+0x74>
     b98:	08 95       	ret
			{
				case PORT_A:
				SET_BIT(PORTA,pin);
     b9a:	4b b3       	in	r20, 0x1b	; 27
     b9c:	21 e0       	ldi	r18, 0x01	; 1
     b9e:	30 e0       	ldi	r19, 0x00	; 0
     ba0:	b9 01       	movw	r22, r18
     ba2:	02 c0       	rjmp	.+4      	; 0xba8 <M_DIO_voidSetPinValue+0x34>
     ba4:	66 0f       	add	r22, r22
     ba6:	77 1f       	adc	r23, r23
     ba8:	8a 95       	dec	r24
     baa:	e2 f7       	brpl	.-8      	; 0xba4 <M_DIO_voidSetPinValue+0x30>
     bac:	cb 01       	movw	r24, r22
     bae:	84 2b       	or	r24, r20
     bb0:	8b bb       	out	0x1b, r24	; 27
				break;
     bb2:	08 95       	ret
				case PORT_B:
				SET_BIT(PORTB,pin);
     bb4:	48 b3       	in	r20, 0x18	; 24
     bb6:	21 e0       	ldi	r18, 0x01	; 1
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	b9 01       	movw	r22, r18
     bbc:	02 c0       	rjmp	.+4      	; 0xbc2 <M_DIO_voidSetPinValue+0x4e>
     bbe:	66 0f       	add	r22, r22
     bc0:	77 1f       	adc	r23, r23
     bc2:	8a 95       	dec	r24
     bc4:	e2 f7       	brpl	.-8      	; 0xbbe <M_DIO_voidSetPinValue+0x4a>
     bc6:	cb 01       	movw	r24, r22
     bc8:	84 2b       	or	r24, r20
     bca:	88 bb       	out	0x18, r24	; 24
				break;
     bcc:	08 95       	ret
				case PORT_C:
				SET_BIT(PORTC,pin);
     bce:	45 b3       	in	r20, 0x15	; 21
     bd0:	21 e0       	ldi	r18, 0x01	; 1
     bd2:	30 e0       	ldi	r19, 0x00	; 0
     bd4:	b9 01       	movw	r22, r18
     bd6:	02 c0       	rjmp	.+4      	; 0xbdc <M_DIO_voidSetPinValue+0x68>
     bd8:	66 0f       	add	r22, r22
     bda:	77 1f       	adc	r23, r23
     bdc:	8a 95       	dec	r24
     bde:	e2 f7       	brpl	.-8      	; 0xbd8 <M_DIO_voidSetPinValue+0x64>
     be0:	cb 01       	movw	r24, r22
     be2:	84 2b       	or	r24, r20
     be4:	85 bb       	out	0x15, r24	; 21
				break;
     be6:	08 95       	ret
				case PORT_D:
				SET_BIT(PORTD,pin);
     be8:	42 b3       	in	r20, 0x12	; 18
     bea:	21 e0       	ldi	r18, 0x01	; 1
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	b9 01       	movw	r22, r18
     bf0:	02 c0       	rjmp	.+4      	; 0xbf6 <M_DIO_voidSetPinValue+0x82>
     bf2:	66 0f       	add	r22, r22
     bf4:	77 1f       	adc	r23, r23
     bf6:	8a 95       	dec	r24
     bf8:	e2 f7       	brpl	.-8      	; 0xbf2 <M_DIO_voidSetPinValue+0x7e>
     bfa:	cb 01       	movw	r24, r22
     bfc:	84 2b       	or	r24, r20
     bfe:	82 bb       	out	0x12, r24	; 18
				break;
     c00:	08 95       	ret
			}
			break;
			case LOW:
			switch(port)
     c02:	91 30       	cpi	r25, 0x01	; 1
     c04:	a1 f0       	breq	.+40     	; 0xc2e <M_DIO_voidSetPinValue+0xba>
     c06:	28 f0       	brcs	.+10     	; 0xc12 <M_DIO_voidSetPinValue+0x9e>
     c08:	92 30       	cpi	r25, 0x02	; 2
     c0a:	f9 f0       	breq	.+62     	; 0xc4a <M_DIO_voidSetPinValue+0xd6>
     c0c:	93 30       	cpi	r25, 0x03	; 3
     c0e:	59 f1       	breq	.+86     	; 0xc66 <M_DIO_voidSetPinValue+0xf2>
     c10:	08 95       	ret
			{
				case PORT_A:
				CLEAR_BIT(PORTA,pin);
     c12:	4b b3       	in	r20, 0x1b	; 27
     c14:	21 e0       	ldi	r18, 0x01	; 1
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	b9 01       	movw	r22, r18
     c1a:	02 c0       	rjmp	.+4      	; 0xc20 <M_DIO_voidSetPinValue+0xac>
     c1c:	66 0f       	add	r22, r22
     c1e:	77 1f       	adc	r23, r23
     c20:	8a 95       	dec	r24
     c22:	e2 f7       	brpl	.-8      	; 0xc1c <M_DIO_voidSetPinValue+0xa8>
     c24:	cb 01       	movw	r24, r22
     c26:	80 95       	com	r24
     c28:	84 23       	and	r24, r20
     c2a:	8b bb       	out	0x1b, r24	; 27
				break;
     c2c:	08 95       	ret
				case PORT_B:
				CLEAR_BIT(PORTB,pin);
     c2e:	48 b3       	in	r20, 0x18	; 24
     c30:	21 e0       	ldi	r18, 0x01	; 1
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	b9 01       	movw	r22, r18
     c36:	02 c0       	rjmp	.+4      	; 0xc3c <M_DIO_voidSetPinValue+0xc8>
     c38:	66 0f       	add	r22, r22
     c3a:	77 1f       	adc	r23, r23
     c3c:	8a 95       	dec	r24
     c3e:	e2 f7       	brpl	.-8      	; 0xc38 <M_DIO_voidSetPinValue+0xc4>
     c40:	cb 01       	movw	r24, r22
     c42:	80 95       	com	r24
     c44:	84 23       	and	r24, r20
     c46:	88 bb       	out	0x18, r24	; 24
				break;
     c48:	08 95       	ret
				case PORT_C:
				CLEAR_BIT(PORTC,pin);
     c4a:	45 b3       	in	r20, 0x15	; 21
     c4c:	21 e0       	ldi	r18, 0x01	; 1
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	b9 01       	movw	r22, r18
     c52:	02 c0       	rjmp	.+4      	; 0xc58 <M_DIO_voidSetPinValue+0xe4>
     c54:	66 0f       	add	r22, r22
     c56:	77 1f       	adc	r23, r23
     c58:	8a 95       	dec	r24
     c5a:	e2 f7       	brpl	.-8      	; 0xc54 <M_DIO_voidSetPinValue+0xe0>
     c5c:	cb 01       	movw	r24, r22
     c5e:	80 95       	com	r24
     c60:	84 23       	and	r24, r20
     c62:	85 bb       	out	0x15, r24	; 21
				break;
     c64:	08 95       	ret
				case PORT_D:
				CLEAR_BIT(PORTD,pin);
     c66:	42 b3       	in	r20, 0x12	; 18
     c68:	21 e0       	ldi	r18, 0x01	; 1
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	b9 01       	movw	r22, r18
     c6e:	02 c0       	rjmp	.+4      	; 0xc74 <M_DIO_voidSetPinValue+0x100>
     c70:	66 0f       	add	r22, r22
     c72:	77 1f       	adc	r23, r23
     c74:	8a 95       	dec	r24
     c76:	e2 f7       	brpl	.-8      	; 0xc70 <M_DIO_voidSetPinValue+0xfc>
     c78:	cb 01       	movw	r24, r22
     c7a:	80 95       	com	r24
     c7c:	84 23       	and	r24, r20
     c7e:	82 bb       	out	0x12, r24	; 18
     c80:	08 95       	ret

00000c82 <M_Global_Interrupt_Enable>:
#include "GIE_private.h"
#include "GIE_interface.h"

void M_Global_Interrupt_Enable(void)
{
	SET_BIT(SREG,GIE);
     c82:	8f b7       	in	r24, 0x3f	; 63
     c84:	80 68       	ori	r24, 0x80	; 128
     c86:	8f bf       	out	0x3f, r24	; 63
     c88:	08 95       	ret

00000c8a <M_Timer0_Init>:
	return state;
}
Error_Status_t M_TIMER0_void_Set_OCR0_Value(u8 value)
{
	OCR0 = value;
}
     c8a:	83 b7       	in	r24, 0x33	; 51
     c8c:	80 64       	ori	r24, 0x40	; 64
     c8e:	83 bf       	out	0x33, r24	; 51
     c90:	83 b7       	in	r24, 0x33	; 51
     c92:	88 60       	ori	r24, 0x08	; 8
     c94:	83 bf       	out	0x33, r24	; 51
     c96:	83 b7       	in	r24, 0x33	; 51
     c98:	8f 7c       	andi	r24, 0xCF	; 207
     c9a:	83 bf       	out	0x33, r24	; 51
     c9c:	83 b7       	in	r24, 0x33	; 51
     c9e:	80 62       	ori	r24, 0x20	; 32
     ca0:	83 bf       	out	0x33, r24	; 51
     ca2:	82 e0       	ldi	r24, 0x02	; 2
     ca4:	08 95       	ret

00000ca6 <M_Timer0_start>:
     ca6:	83 b7       	in	r24, 0x33	; 51
     ca8:	88 7f       	andi	r24, 0xF8	; 248
     caa:	83 bf       	out	0x33, r24	; 51
     cac:	83 b7       	in	r24, 0x33	; 51
     cae:	82 60       	ori	r24, 0x02	; 2
     cb0:	83 bf       	out	0x33, r24	; 51
     cb2:	82 e0       	ldi	r24, 0x02	; 2
     cb4:	08 95       	ret

00000cb6 <M_Timer0_SetFastPWM>:
     cb6:	85 36       	cpi	r24, 0x65	; 101
     cb8:	c0 f4       	brcc	.+48     	; 0xcea <M_Timer0_SetFastPWM+0x34>
     cba:	81 11       	cpse	r24, r1
     cbc:	04 c0       	rjmp	.+8      	; 0xcc6 <M_Timer0_SetFastPWM+0x10>
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	8c bf       	out	0x3c, r24	; 60
     cc2:	82 e0       	ldi	r24, 0x02	; 2
     cc4:	08 95       	ret
     cc6:	28 2f       	mov	r18, r24
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	32 2f       	mov	r19, r18
     ccc:	22 27       	eor	r18, r18
     cce:	36 95       	lsr	r19
     cd0:	27 95       	ror	r18
     cd2:	36 95       	lsr	r19
     cd4:	27 95       	ror	r18
     cd6:	ab e7       	ldi	r26, 0x7B	; 123
     cd8:	b4 e1       	ldi	r27, 0x14	; 20
     cda:	0e 94 2d 09 	call	0x125a	; 0x125a <__umulhisi3>
     cde:	96 95       	lsr	r25
     ce0:	87 95       	ror	r24
     ce2:	81 50       	subi	r24, 0x01	; 1
     ce4:	8c bf       	out	0x3c, r24	; 60
     ce6:	82 e0       	ldi	r24, 0x02	; 2
     ce8:	08 95       	ret
     cea:	80 e0       	ldi	r24, 0x00	; 0
     cec:	08 95       	ret

00000cee <__vector_10>:
	   }
   }
}
*/
ISR(TIMER0_OC_vect)
{
     cee:	1f 92       	push	r1
     cf0:	0f 92       	push	r0
     cf2:	0f b6       	in	r0, 0x3f	; 63
     cf4:	0f 92       	push	r0
     cf6:	11 24       	eor	r1, r1
     cf8:	2f 93       	push	r18
     cfa:	3f 93       	push	r19
     cfc:	4f 93       	push	r20
     cfe:	5f 93       	push	r21
     d00:	6f 93       	push	r22
     d02:	7f 93       	push	r23
     d04:	8f 93       	push	r24
     d06:	9f 93       	push	r25
     d08:	af 93       	push	r26
     d0a:	bf 93       	push	r27
     d0c:	ef 93       	push	r30
     d0e:	ff 93       	push	r31
   static u32 cmpcounter = 0;
   cmpcounter++;
     d10:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <cmpcounter.1790>
     d14:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <cmpcounter.1790+0x1>
     d18:	a0 91 4a 01 	lds	r26, 0x014A	; 0x80014a <cmpcounter.1790+0x2>
     d1c:	b0 91 4b 01 	lds	r27, 0x014B	; 0x80014b <cmpcounter.1790+0x3>
     d20:	01 96       	adiw	r24, 0x01	; 1
     d22:	a1 1d       	adc	r26, r1
     d24:	b1 1d       	adc	r27, r1
     d26:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <cmpcounter.1790>
     d2a:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <cmpcounter.1790+0x1>
     d2e:	a0 93 4a 01 	sts	0x014A, r26	; 0x80014a <cmpcounter.1790+0x2>
     d32:	b0 93 4b 01 	sts	0x014B, r27	; 0x80014b <cmpcounter.1790+0x3>
   session_counter++;
     d36:	40 91 4e 01 	lds	r20, 0x014E	; 0x80014e <session_counter>
     d3a:	50 91 4f 01 	lds	r21, 0x014F	; 0x80014f <session_counter+0x1>
     d3e:	60 91 50 01 	lds	r22, 0x0150	; 0x800150 <session_counter+0x2>
     d42:	70 91 51 01 	lds	r23, 0x0151	; 0x800151 <session_counter+0x3>
     d46:	4f 5f       	subi	r20, 0xFF	; 255
     d48:	5f 4f       	sbci	r21, 0xFF	; 255
     d4a:	6f 4f       	sbci	r22, 0xFF	; 255
     d4c:	7f 4f       	sbci	r23, 0xFF	; 255
     d4e:	40 93 4e 01 	sts	0x014E, r20	; 0x80014e <session_counter>
     d52:	50 93 4f 01 	sts	0x014F, r21	; 0x80014f <session_counter+0x1>
     d56:	60 93 50 01 	sts	0x0150, r22	; 0x800150 <session_counter+0x2>
     d5a:	70 93 51 01 	sts	0x0151, r23	; 0x800151 <session_counter+0x3>
   if(cmpcounter == NumberOfCmpMatches)
     d5e:	89 2b       	or	r24, r25
     d60:	8a 2b       	or	r24, r26
     d62:	8b 2b       	or	r24, r27
     d64:	79 f4       	brne	.+30     	; 0xd84 <__vector_10+0x96>
   {
	   cmpcounter=0;
     d66:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <cmpcounter.1790>
     d6a:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <cmpcounter.1790+0x1>
     d6e:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <cmpcounter.1790+0x2>
     d72:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <cmpcounter.1790+0x3>
	   if(PTR_TIMER0_OC!=NULL)
     d76:	e0 91 4c 01 	lds	r30, 0x014C	; 0x80014c <PTR_TIMER0_OC>
     d7a:	f0 91 4d 01 	lds	r31, 0x014D	; 0x80014d <PTR_TIMER0_OC+0x1>
     d7e:	30 97       	sbiw	r30, 0x00	; 0
     d80:	09 f0       	breq	.+2      	; 0xd84 <__vector_10+0x96>
	   {
		   PTR_TIMER0_OC();
     d82:	09 95       	icall
	   }
   }
}
     d84:	ff 91       	pop	r31
     d86:	ef 91       	pop	r30
     d88:	bf 91       	pop	r27
     d8a:	af 91       	pop	r26
     d8c:	9f 91       	pop	r25
     d8e:	8f 91       	pop	r24
     d90:	7f 91       	pop	r23
     d92:	6f 91       	pop	r22
     d94:	5f 91       	pop	r21
     d96:	4f 91       	pop	r20
     d98:	3f 91       	pop	r19
     d9a:	2f 91       	pop	r18
     d9c:	0f 90       	pop	r0
     d9e:	0f be       	out	0x3f, r0	; 63
     da0:	0f 90       	pop	r0
     da2:	1f 90       	pop	r1
     da4:	18 95       	reti

00000da6 <M_TIMER1_voidInit>:
	return TCNT1;
}
/************************************************************/
void  M_TIMER1_ClearTCNT(void)
{
	TCNT1 = 0;
     da6:	8f b5       	in	r24, 0x2f	; 47
     da8:	81 60       	ori	r24, 0x01	; 1
     daa:	8f bd       	out	0x2f, r24	; 47
     dac:	8f b5       	in	r24, 0x2f	; 47
     dae:	82 60       	ori	r24, 0x02	; 2
     db0:	8f bd       	out	0x2f, r24	; 47
     db2:	8e b5       	in	r24, 0x2e	; 46
     db4:	88 60       	ori	r24, 0x08	; 8
     db6:	8e bd       	out	0x2e, r24	; 46
     db8:	8e b5       	in	r24, 0x2e	; 46
     dba:	80 61       	ori	r24, 0x10	; 16
     dbc:	8e bd       	out	0x2e, r24	; 46
     dbe:	8f e1       	ldi	r24, 0x1F	; 31
     dc0:	9e e4       	ldi	r25, 0x4E	; 78
     dc2:	9b bd       	out	0x2b, r25	; 43
     dc4:	8a bd       	out	0x2a, r24	; 42
     dc6:	8f b5       	in	r24, 0x2f	; 47
     dc8:	8f 7b       	andi	r24, 0xBF	; 191
     dca:	8f bd       	out	0x2f, r24	; 47
     dcc:	8f b5       	in	r24, 0x2f	; 47
     dce:	8f 77       	andi	r24, 0x7F	; 127
     dd0:	8f bd       	out	0x2f, r24	; 47
     dd2:	8f b5       	in	r24, 0x2f	; 47
     dd4:	8f 7e       	andi	r24, 0xEF	; 239
     dd6:	8f bd       	out	0x2f, r24	; 47
     dd8:	8f b5       	in	r24, 0x2f	; 47
     dda:	80 62       	ori	r24, 0x20	; 32
     ddc:	8f bd       	out	0x2f, r24	; 47
     dde:	08 95       	ret

00000de0 <M_TIMER1_voidStart>:
     de0:	8e b5       	in	r24, 0x2e	; 46
     de2:	88 7f       	andi	r24, 0xF8	; 248
     de4:	8e bd       	out	0x2e, r24	; 46
     de6:	8e b5       	in	r24, 0x2e	; 46
     de8:	82 60       	ori	r24, 0x02	; 2
     dea:	8e bd       	out	0x2e, r24	; 46
     dec:	08 95       	ret

00000dee <M_Timer1_ICU_voidInterruptEnable>:
     dee:	89 b7       	in	r24, 0x39	; 57
     df0:	80 62       	ori	r24, 0x20	; 32
     df2:	89 bf       	out	0x39, r24	; 57
     df4:	08 95       	ret

00000df6 <M_Timer1_ICU_voidInterruptDisable>:
     df6:	89 b7       	in	r24, 0x39	; 57
     df8:	8f 7d       	andi	r24, 0xDF	; 223
     dfa:	89 bf       	out	0x39, r24	; 57
     dfc:	08 95       	ret

00000dfe <M_Timer1_OVF_voidInterruptEnable>:
     dfe:	89 b7       	in	r24, 0x39	; 57
     e00:	84 60       	ori	r24, 0x04	; 4
     e02:	89 bf       	out	0x39, r24	; 57
     e04:	08 95       	ret

00000e06 <M_TIMER1_ICU_voidSetTrigger>:
     e06:	88 23       	and	r24, r24
     e08:	19 f0       	breq	.+6      	; 0xe10 <M_TIMER1_ICU_voidSetTrigger+0xa>
     e0a:	81 30       	cpi	r24, 0x01	; 1
     e0c:	29 f0       	breq	.+10     	; 0xe18 <M_TIMER1_ICU_voidSetTrigger+0x12>
     e0e:	08 95       	ret
     e10:	8e b5       	in	r24, 0x2e	; 46
     e12:	80 64       	ori	r24, 0x40	; 64
     e14:	8e bd       	out	0x2e, r24	; 46
     e16:	08 95       	ret
     e18:	8e b5       	in	r24, 0x2e	; 46
     e1a:	8f 7b       	andi	r24, 0xBF	; 191
     e1c:	8e bd       	out	0x2e, r24	; 46
     e1e:	08 95       	ret

00000e20 <M_TIMER1_ICU_u16takeReading>:
     e20:	86 b5       	in	r24, 0x26	; 38
     e22:	97 b5       	in	r25, 0x27	; 39
     e24:	08 95       	ret

00000e26 <M_TIMER1_voidSetCallBack>:
     e26:	61 15       	cp	r22, r1
     e28:	71 05       	cpc	r23, r1
     e2a:	d9 f0       	breq	.+54     	; 0xe62 <M_TIMER1_voidSetCallBack+0x3c>
     e2c:	81 30       	cpi	r24, 0x01	; 1
     e2e:	59 f0       	breq	.+22     	; 0xe46 <M_TIMER1_voidSetCallBack+0x20>
     e30:	28 f0       	brcs	.+10     	; 0xe3c <M_TIMER1_voidSetCallBack+0x16>
     e32:	82 30       	cpi	r24, 0x02	; 2
     e34:	69 f0       	breq	.+26     	; 0xe50 <M_TIMER1_voidSetCallBack+0x2a>
     e36:	83 30       	cpi	r24, 0x03	; 3
     e38:	81 f0       	breq	.+32     	; 0xe5a <M_TIMER1_voidSetCallBack+0x34>
     e3a:	08 95       	ret
     e3c:	70 93 59 01 	sts	0x0159, r23	; 0x800159 <Timer1_OVF_ptr_func+0x1>
     e40:	60 93 58 01 	sts	0x0158, r22	; 0x800158 <Timer1_OVF_ptr_func>
     e44:	08 95       	ret
     e46:	70 93 53 01 	sts	0x0153, r23	; 0x800153 <Timer1_ICU_ptr_func+0x1>
     e4a:	60 93 52 01 	sts	0x0152, r22	; 0x800152 <Timer1_ICU_ptr_func>
     e4e:	08 95       	ret
     e50:	70 93 57 01 	sts	0x0157, r23	; 0x800157 <Timer1_OCA_ptr_func+0x1>
     e54:	60 93 56 01 	sts	0x0156, r22	; 0x800156 <Timer1_OCA_ptr_func>
     e58:	08 95       	ret
     e5a:	70 93 55 01 	sts	0x0155, r23	; 0x800155 <Timer1_OCB_ptr_func+0x1>
     e5e:	60 93 54 01 	sts	0x0154, r22	; 0x800154 <Timer1_OCB_ptr_func>
     e62:	08 95       	ret

00000e64 <M_TIMER1_f32GetTickTime>:
	u16 Arr[]={1,8,64,256,1024};
		//calculate tick time
		F32 TickTime = ((F32)Arr[TIMER1_PRESCALER-1]/CPU_F);
		//calculate number of ticks
		return TickTime;
}
     e64:	60 e0       	ldi	r22, 0x00	; 0
     e66:	70 e0       	ldi	r23, 0x00	; 0
     e68:	80 e8       	ldi	r24, 0x80	; 128
     e6a:	9f e3       	ldi	r25, 0x3F	; 63
     e6c:	08 95       	ret

00000e6e <M_TIMER1_u16GetTopValue>:

/**************************************************************/
u16 M_TIMER1_u16GetTopValue(void)
{
	return TIMER1_TOP_VALUE;
}
     e6e:	8f e1       	ldi	r24, 0x1F	; 31
     e70:	9e e4       	ldi	r25, 0x4E	; 78
     e72:	08 95       	ret

00000e74 <M_TIMER1_void_Set_OCR1B_Value>:

void M_TIMER1_void_Set_OCR1B_Value(u16 value)
{
	if(value>255)
     e74:	99 bd       	out	0x29, r25	; 41
     e76:	88 bd       	out	0x28, r24	; 40
     e78:	08 95       	ret

00000e7a <__vector_9>:
	{
		value = 255;
	}
	else if(value<0)
	{
     e7a:	1f 92       	push	r1
     e7c:	0f 92       	push	r0
     e7e:	0f b6       	in	r0, 0x3f	; 63
     e80:	0f 92       	push	r0
     e82:	11 24       	eor	r1, r1
     e84:	2f 93       	push	r18
     e86:	3f 93       	push	r19
     e88:	4f 93       	push	r20
     e8a:	5f 93       	push	r21
     e8c:	6f 93       	push	r22
     e8e:	7f 93       	push	r23
     e90:	8f 93       	push	r24
     e92:	9f 93       	push	r25
     e94:	af 93       	push	r26
     e96:	bf 93       	push	r27
     e98:	ef 93       	push	r30
     e9a:	ff 93       	push	r31
		value = 0;
     e9c:	e0 91 58 01 	lds	r30, 0x0158	; 0x800158 <Timer1_OVF_ptr_func>
     ea0:	f0 91 59 01 	lds	r31, 0x0159	; 0x800159 <Timer1_OVF_ptr_func+0x1>
     ea4:	30 97       	sbiw	r30, 0x00	; 0
     ea6:	09 f0       	breq	.+2      	; 0xeaa <__vector_9+0x30>
	}
	OCR1B = value;
     ea8:	09 95       	icall
}

     eaa:	ff 91       	pop	r31
     eac:	ef 91       	pop	r30
     eae:	bf 91       	pop	r27
     eb0:	af 91       	pop	r26
     eb2:	9f 91       	pop	r25
     eb4:	8f 91       	pop	r24
     eb6:	7f 91       	pop	r23
     eb8:	6f 91       	pop	r22
     eba:	5f 91       	pop	r21
     ebc:	4f 91       	pop	r20
     ebe:	3f 91       	pop	r19
     ec0:	2f 91       	pop	r18
     ec2:	0f 90       	pop	r0
     ec4:	0f be       	out	0x3f, r0	; 63
     ec6:	0f 90       	pop	r0
     ec8:	1f 90       	pop	r1
     eca:	18 95       	reti

00000ecc <__vector_7>:
void M_TIMER1_void_Set_OCR1A_Value(u16 value)
{
     ecc:	1f 92       	push	r1
     ece:	0f 92       	push	r0
     ed0:	0f b6       	in	r0, 0x3f	; 63
     ed2:	0f 92       	push	r0
     ed4:	11 24       	eor	r1, r1
     ed6:	2f 93       	push	r18
     ed8:	3f 93       	push	r19
     eda:	4f 93       	push	r20
     edc:	5f 93       	push	r21
     ede:	6f 93       	push	r22
     ee0:	7f 93       	push	r23
     ee2:	8f 93       	push	r24
     ee4:	9f 93       	push	r25
     ee6:	af 93       	push	r26
     ee8:	bf 93       	push	r27
     eea:	ef 93       	push	r30
     eec:	ff 93       	push	r31
	if(value>255)
     eee:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <Timer1_OCA_ptr_func>
     ef2:	f0 91 57 01 	lds	r31, 0x0157	; 0x800157 <Timer1_OCA_ptr_func+0x1>
     ef6:	30 97       	sbiw	r30, 0x00	; 0
     ef8:	09 f0       	breq	.+2      	; 0xefc <__vector_7+0x30>
	{
		value = 255;
     efa:	09 95       	icall
	}
	else if(value<0)
     efc:	ff 91       	pop	r31
     efe:	ef 91       	pop	r30
     f00:	bf 91       	pop	r27
     f02:	af 91       	pop	r26
     f04:	9f 91       	pop	r25
     f06:	8f 91       	pop	r24
     f08:	7f 91       	pop	r23
     f0a:	6f 91       	pop	r22
     f0c:	5f 91       	pop	r21
     f0e:	4f 91       	pop	r20
     f10:	3f 91       	pop	r19
     f12:	2f 91       	pop	r18
     f14:	0f 90       	pop	r0
     f16:	0f be       	out	0x3f, r0	; 63
     f18:	0f 90       	pop	r0
     f1a:	1f 90       	pop	r1
     f1c:	18 95       	reti

00000f1e <__vector_8>:
	{
		value = 0;
     f1e:	1f 92       	push	r1
     f20:	0f 92       	push	r0
     f22:	0f b6       	in	r0, 0x3f	; 63
     f24:	0f 92       	push	r0
     f26:	11 24       	eor	r1, r1
     f28:	2f 93       	push	r18
     f2a:	3f 93       	push	r19
     f2c:	4f 93       	push	r20
     f2e:	5f 93       	push	r21
     f30:	6f 93       	push	r22
     f32:	7f 93       	push	r23
     f34:	8f 93       	push	r24
     f36:	9f 93       	push	r25
     f38:	af 93       	push	r26
     f3a:	bf 93       	push	r27
     f3c:	ef 93       	push	r30
     f3e:	ff 93       	push	r31
	}
     f40:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <Timer1_OCB_ptr_func>
     f44:	f0 91 55 01 	lds	r31, 0x0155	; 0x800155 <Timer1_OCB_ptr_func+0x1>
     f48:	30 97       	sbiw	r30, 0x00	; 0
     f4a:	09 f0       	breq	.+2      	; 0xf4e <__vector_8+0x30>
	OCR1A = value;
}
     f4c:	09 95       	icall
/************************************ ISR *************************************/
ISR(TIMER1_OVF_vect)
     f4e:	ff 91       	pop	r31
     f50:	ef 91       	pop	r30
     f52:	bf 91       	pop	r27
     f54:	af 91       	pop	r26
     f56:	9f 91       	pop	r25
     f58:	8f 91       	pop	r24
     f5a:	7f 91       	pop	r23
     f5c:	6f 91       	pop	r22
     f5e:	5f 91       	pop	r21
     f60:	4f 91       	pop	r20
     f62:	3f 91       	pop	r19
     f64:	2f 91       	pop	r18
     f66:	0f 90       	pop	r0
     f68:	0f be       	out	0x3f, r0	; 63
     f6a:	0f 90       	pop	r0
     f6c:	1f 90       	pop	r1
     f6e:	18 95       	reti

00000f70 <__vector_6>:
{
	if(Timer1_OVF_ptr_func!=NULL)
     f70:	1f 92       	push	r1
     f72:	0f 92       	push	r0
     f74:	0f b6       	in	r0, 0x3f	; 63
     f76:	0f 92       	push	r0
     f78:	11 24       	eor	r1, r1
     f7a:	2f 93       	push	r18
     f7c:	3f 93       	push	r19
     f7e:	4f 93       	push	r20
     f80:	5f 93       	push	r21
     f82:	6f 93       	push	r22
     f84:	7f 93       	push	r23
     f86:	8f 93       	push	r24
     f88:	9f 93       	push	r25
     f8a:	af 93       	push	r26
     f8c:	bf 93       	push	r27
     f8e:	ef 93       	push	r30
     f90:	ff 93       	push	r31
	{
     f92:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <Timer1_ICU_ptr_func>
     f96:	f0 91 53 01 	lds	r31, 0x0153	; 0x800153 <Timer1_ICU_ptr_func+0x1>
     f9a:	30 97       	sbiw	r30, 0x00	; 0
     f9c:	09 f0       	breq	.+2      	; 0xfa0 <__vector_6+0x30>
		Timer1_OVF_ptr_func();
	}
     f9e:	09 95       	icall
}
ISR(TIMER1_OCA_vect)
     fa0:	ff 91       	pop	r31
     fa2:	ef 91       	pop	r30
     fa4:	bf 91       	pop	r27
     fa6:	af 91       	pop	r26
     fa8:	9f 91       	pop	r25
     faa:	8f 91       	pop	r24
     fac:	7f 91       	pop	r23
     fae:	6f 91       	pop	r22
     fb0:	5f 91       	pop	r21
     fb2:	4f 91       	pop	r20
     fb4:	3f 91       	pop	r19
     fb6:	2f 91       	pop	r18
     fb8:	0f 90       	pop	r0
     fba:	0f be       	out	0x3f, r0	; 63
     fbc:	0f 90       	pop	r0
     fbe:	1f 90       	pop	r1
     fc0:	18 95       	reti

00000fc2 <__fixunssfsi>:
     fc2:	0e 94 55 08 	call	0x10aa	; 0x10aa <__fp_splitA>
     fc6:	88 f0       	brcs	.+34     	; 0xfea <__fixunssfsi+0x28>
     fc8:	9f 57       	subi	r25, 0x7F	; 127
     fca:	98 f0       	brcs	.+38     	; 0xff2 <__fixunssfsi+0x30>
     fcc:	b9 2f       	mov	r27, r25
     fce:	99 27       	eor	r25, r25
     fd0:	b7 51       	subi	r27, 0x17	; 23
     fd2:	b0 f0       	brcs	.+44     	; 0x1000 <__fixunssfsi+0x3e>
     fd4:	e1 f0       	breq	.+56     	; 0x100e <__fixunssfsi+0x4c>
     fd6:	66 0f       	add	r22, r22
     fd8:	77 1f       	adc	r23, r23
     fda:	88 1f       	adc	r24, r24
     fdc:	99 1f       	adc	r25, r25
     fde:	1a f0       	brmi	.+6      	; 0xfe6 <__fixunssfsi+0x24>
     fe0:	ba 95       	dec	r27
     fe2:	c9 f7       	brne	.-14     	; 0xfd6 <__fixunssfsi+0x14>
     fe4:	14 c0       	rjmp	.+40     	; 0x100e <__fixunssfsi+0x4c>
     fe6:	b1 30       	cpi	r27, 0x01	; 1
     fe8:	91 f0       	breq	.+36     	; 0x100e <__fixunssfsi+0x4c>
     fea:	0e 94 6f 08 	call	0x10de	; 0x10de <__fp_zero>
     fee:	b1 e0       	ldi	r27, 0x01	; 1
     ff0:	08 95       	ret
     ff2:	0c 94 6f 08 	jmp	0x10de	; 0x10de <__fp_zero>
     ff6:	67 2f       	mov	r22, r23
     ff8:	78 2f       	mov	r23, r24
     ffa:	88 27       	eor	r24, r24
     ffc:	b8 5f       	subi	r27, 0xF8	; 248
     ffe:	39 f0       	breq	.+14     	; 0x100e <__fixunssfsi+0x4c>
    1000:	b9 3f       	cpi	r27, 0xF9	; 249
    1002:	cc f3       	brlt	.-14     	; 0xff6 <__fixunssfsi+0x34>
    1004:	86 95       	lsr	r24
    1006:	77 95       	ror	r23
    1008:	67 95       	ror	r22
    100a:	b3 95       	inc	r27
    100c:	d9 f7       	brne	.-10     	; 0x1004 <__fixunssfsi+0x42>
    100e:	3e f4       	brtc	.+14     	; 0x101e <__fixunssfsi+0x5c>
    1010:	90 95       	com	r25
    1012:	80 95       	com	r24
    1014:	70 95       	com	r23
    1016:	61 95       	neg	r22
    1018:	7f 4f       	sbci	r23, 0xFF	; 255
    101a:	8f 4f       	sbci	r24, 0xFF	; 255
    101c:	9f 4f       	sbci	r25, 0xFF	; 255
    101e:	08 95       	ret

00001020 <__floatunsisf>:
    1020:	e8 94       	clt
    1022:	09 c0       	rjmp	.+18     	; 0x1036 <__floatsisf+0x12>

00001024 <__floatsisf>:
    1024:	97 fb       	bst	r25, 7
    1026:	3e f4       	brtc	.+14     	; 0x1036 <__floatsisf+0x12>
    1028:	90 95       	com	r25
    102a:	80 95       	com	r24
    102c:	70 95       	com	r23
    102e:	61 95       	neg	r22
    1030:	7f 4f       	sbci	r23, 0xFF	; 255
    1032:	8f 4f       	sbci	r24, 0xFF	; 255
    1034:	9f 4f       	sbci	r25, 0xFF	; 255
    1036:	99 23       	and	r25, r25
    1038:	a9 f0       	breq	.+42     	; 0x1064 <__floatsisf+0x40>
    103a:	f9 2f       	mov	r31, r25
    103c:	96 e9       	ldi	r25, 0x96	; 150
    103e:	bb 27       	eor	r27, r27
    1040:	93 95       	inc	r25
    1042:	f6 95       	lsr	r31
    1044:	87 95       	ror	r24
    1046:	77 95       	ror	r23
    1048:	67 95       	ror	r22
    104a:	b7 95       	ror	r27
    104c:	f1 11       	cpse	r31, r1
    104e:	f8 cf       	rjmp	.-16     	; 0x1040 <__floatsisf+0x1c>
    1050:	fa f4       	brpl	.+62     	; 0x1090 <__floatsisf+0x6c>
    1052:	bb 0f       	add	r27, r27
    1054:	11 f4       	brne	.+4      	; 0x105a <__floatsisf+0x36>
    1056:	60 ff       	sbrs	r22, 0
    1058:	1b c0       	rjmp	.+54     	; 0x1090 <__floatsisf+0x6c>
    105a:	6f 5f       	subi	r22, 0xFF	; 255
    105c:	7f 4f       	sbci	r23, 0xFF	; 255
    105e:	8f 4f       	sbci	r24, 0xFF	; 255
    1060:	9f 4f       	sbci	r25, 0xFF	; 255
    1062:	16 c0       	rjmp	.+44     	; 0x1090 <__floatsisf+0x6c>
    1064:	88 23       	and	r24, r24
    1066:	11 f0       	breq	.+4      	; 0x106c <__floatsisf+0x48>
    1068:	96 e9       	ldi	r25, 0x96	; 150
    106a:	11 c0       	rjmp	.+34     	; 0x108e <__floatsisf+0x6a>
    106c:	77 23       	and	r23, r23
    106e:	21 f0       	breq	.+8      	; 0x1078 <__floatsisf+0x54>
    1070:	9e e8       	ldi	r25, 0x8E	; 142
    1072:	87 2f       	mov	r24, r23
    1074:	76 2f       	mov	r23, r22
    1076:	05 c0       	rjmp	.+10     	; 0x1082 <__floatsisf+0x5e>
    1078:	66 23       	and	r22, r22
    107a:	71 f0       	breq	.+28     	; 0x1098 <__floatsisf+0x74>
    107c:	96 e8       	ldi	r25, 0x86	; 134
    107e:	86 2f       	mov	r24, r22
    1080:	70 e0       	ldi	r23, 0x00	; 0
    1082:	60 e0       	ldi	r22, 0x00	; 0
    1084:	2a f0       	brmi	.+10     	; 0x1090 <__floatsisf+0x6c>
    1086:	9a 95       	dec	r25
    1088:	66 0f       	add	r22, r22
    108a:	77 1f       	adc	r23, r23
    108c:	88 1f       	adc	r24, r24
    108e:	da f7       	brpl	.-10     	; 0x1086 <__floatsisf+0x62>
    1090:	88 0f       	add	r24, r24
    1092:	96 95       	lsr	r25
    1094:	87 95       	ror	r24
    1096:	97 f9       	bld	r25, 7
    1098:	08 95       	ret

0000109a <__fp_split3>:
    109a:	57 fd       	sbrc	r21, 7
    109c:	90 58       	subi	r25, 0x80	; 128
    109e:	44 0f       	add	r20, r20
    10a0:	55 1f       	adc	r21, r21
    10a2:	59 f0       	breq	.+22     	; 0x10ba <__fp_splitA+0x10>
    10a4:	5f 3f       	cpi	r21, 0xFF	; 255
    10a6:	71 f0       	breq	.+28     	; 0x10c4 <__fp_splitA+0x1a>
    10a8:	47 95       	ror	r20

000010aa <__fp_splitA>:
    10aa:	88 0f       	add	r24, r24
    10ac:	97 fb       	bst	r25, 7
    10ae:	99 1f       	adc	r25, r25
    10b0:	61 f0       	breq	.+24     	; 0x10ca <__fp_splitA+0x20>
    10b2:	9f 3f       	cpi	r25, 0xFF	; 255
    10b4:	79 f0       	breq	.+30     	; 0x10d4 <__fp_splitA+0x2a>
    10b6:	87 95       	ror	r24
    10b8:	08 95       	ret
    10ba:	12 16       	cp	r1, r18
    10bc:	13 06       	cpc	r1, r19
    10be:	14 06       	cpc	r1, r20
    10c0:	55 1f       	adc	r21, r21
    10c2:	f2 cf       	rjmp	.-28     	; 0x10a8 <__fp_split3+0xe>
    10c4:	46 95       	lsr	r20
    10c6:	f1 df       	rcall	.-30     	; 0x10aa <__fp_splitA>
    10c8:	08 c0       	rjmp	.+16     	; 0x10da <__fp_splitA+0x30>
    10ca:	16 16       	cp	r1, r22
    10cc:	17 06       	cpc	r1, r23
    10ce:	18 06       	cpc	r1, r24
    10d0:	99 1f       	adc	r25, r25
    10d2:	f1 cf       	rjmp	.-30     	; 0x10b6 <__fp_splitA+0xc>
    10d4:	86 95       	lsr	r24
    10d6:	71 05       	cpc	r23, r1
    10d8:	61 05       	cpc	r22, r1
    10da:	08 94       	sec
    10dc:	08 95       	ret

000010de <__fp_zero>:
    10de:	e8 94       	clt

000010e0 <__fp_szero>:
    10e0:	bb 27       	eor	r27, r27
    10e2:	66 27       	eor	r22, r22
    10e4:	77 27       	eor	r23, r23
    10e6:	cb 01       	movw	r24, r22
    10e8:	97 f9       	bld	r25, 7
    10ea:	08 95       	ret

000010ec <__mulsf3>:
    10ec:	0e 94 89 08 	call	0x1112	; 0x1112 <__mulsf3x>
    10f0:	0c 94 fa 08 	jmp	0x11f4	; 0x11f4 <__fp_round>
    10f4:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__fp_pscA>
    10f8:	38 f0       	brcs	.+14     	; 0x1108 <__mulsf3+0x1c>
    10fa:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <__fp_pscB>
    10fe:	20 f0       	brcs	.+8      	; 0x1108 <__mulsf3+0x1c>
    1100:	95 23       	and	r25, r21
    1102:	11 f0       	breq	.+4      	; 0x1108 <__mulsf3+0x1c>
    1104:	0c 94 e3 08 	jmp	0x11c6	; 0x11c6 <__fp_inf>
    1108:	0c 94 e9 08 	jmp	0x11d2	; 0x11d2 <__fp_nan>
    110c:	11 24       	eor	r1, r1
    110e:	0c 94 70 08 	jmp	0x10e0	; 0x10e0 <__fp_szero>

00001112 <__mulsf3x>:
    1112:	0e 94 4d 08 	call	0x109a	; 0x109a <__fp_split3>
    1116:	70 f3       	brcs	.-36     	; 0x10f4 <__mulsf3+0x8>

00001118 <__mulsf3_pse>:
    1118:	95 9f       	mul	r25, r21
    111a:	c1 f3       	breq	.-16     	; 0x110c <__mulsf3+0x20>
    111c:	95 0f       	add	r25, r21
    111e:	50 e0       	ldi	r21, 0x00	; 0
    1120:	55 1f       	adc	r21, r21
    1122:	62 9f       	mul	r22, r18
    1124:	f0 01       	movw	r30, r0
    1126:	72 9f       	mul	r23, r18
    1128:	bb 27       	eor	r27, r27
    112a:	f0 0d       	add	r31, r0
    112c:	b1 1d       	adc	r27, r1
    112e:	63 9f       	mul	r22, r19
    1130:	aa 27       	eor	r26, r26
    1132:	f0 0d       	add	r31, r0
    1134:	b1 1d       	adc	r27, r1
    1136:	aa 1f       	adc	r26, r26
    1138:	64 9f       	mul	r22, r20
    113a:	66 27       	eor	r22, r22
    113c:	b0 0d       	add	r27, r0
    113e:	a1 1d       	adc	r26, r1
    1140:	66 1f       	adc	r22, r22
    1142:	82 9f       	mul	r24, r18
    1144:	22 27       	eor	r18, r18
    1146:	b0 0d       	add	r27, r0
    1148:	a1 1d       	adc	r26, r1
    114a:	62 1f       	adc	r22, r18
    114c:	73 9f       	mul	r23, r19
    114e:	b0 0d       	add	r27, r0
    1150:	a1 1d       	adc	r26, r1
    1152:	62 1f       	adc	r22, r18
    1154:	83 9f       	mul	r24, r19
    1156:	a0 0d       	add	r26, r0
    1158:	61 1d       	adc	r22, r1
    115a:	22 1f       	adc	r18, r18
    115c:	74 9f       	mul	r23, r20
    115e:	33 27       	eor	r19, r19
    1160:	a0 0d       	add	r26, r0
    1162:	61 1d       	adc	r22, r1
    1164:	23 1f       	adc	r18, r19
    1166:	84 9f       	mul	r24, r20
    1168:	60 0d       	add	r22, r0
    116a:	21 1d       	adc	r18, r1
    116c:	82 2f       	mov	r24, r18
    116e:	76 2f       	mov	r23, r22
    1170:	6a 2f       	mov	r22, r26
    1172:	11 24       	eor	r1, r1
    1174:	9f 57       	subi	r25, 0x7F	; 127
    1176:	50 40       	sbci	r21, 0x00	; 0
    1178:	9a f0       	brmi	.+38     	; 0x11a0 <__mulsf3_pse+0x88>
    117a:	f1 f0       	breq	.+60     	; 0x11b8 <__mulsf3_pse+0xa0>
    117c:	88 23       	and	r24, r24
    117e:	4a f0       	brmi	.+18     	; 0x1192 <__mulsf3_pse+0x7a>
    1180:	ee 0f       	add	r30, r30
    1182:	ff 1f       	adc	r31, r31
    1184:	bb 1f       	adc	r27, r27
    1186:	66 1f       	adc	r22, r22
    1188:	77 1f       	adc	r23, r23
    118a:	88 1f       	adc	r24, r24
    118c:	91 50       	subi	r25, 0x01	; 1
    118e:	50 40       	sbci	r21, 0x00	; 0
    1190:	a9 f7       	brne	.-22     	; 0x117c <__mulsf3_pse+0x64>
    1192:	9e 3f       	cpi	r25, 0xFE	; 254
    1194:	51 05       	cpc	r21, r1
    1196:	80 f0       	brcs	.+32     	; 0x11b8 <__mulsf3_pse+0xa0>
    1198:	0c 94 e3 08 	jmp	0x11c6	; 0x11c6 <__fp_inf>
    119c:	0c 94 70 08 	jmp	0x10e0	; 0x10e0 <__fp_szero>
    11a0:	5f 3f       	cpi	r21, 0xFF	; 255
    11a2:	e4 f3       	brlt	.-8      	; 0x119c <__mulsf3_pse+0x84>
    11a4:	98 3e       	cpi	r25, 0xE8	; 232
    11a6:	d4 f3       	brlt	.-12     	; 0x119c <__mulsf3_pse+0x84>
    11a8:	86 95       	lsr	r24
    11aa:	77 95       	ror	r23
    11ac:	67 95       	ror	r22
    11ae:	b7 95       	ror	r27
    11b0:	f7 95       	ror	r31
    11b2:	e7 95       	ror	r30
    11b4:	9f 5f       	subi	r25, 0xFF	; 255
    11b6:	c1 f7       	brne	.-16     	; 0x11a8 <__mulsf3_pse+0x90>
    11b8:	fe 2b       	or	r31, r30
    11ba:	88 0f       	add	r24, r24
    11bc:	91 1d       	adc	r25, r1
    11be:	96 95       	lsr	r25
    11c0:	87 95       	ror	r24
    11c2:	97 f9       	bld	r25, 7
    11c4:	08 95       	ret

000011c6 <__fp_inf>:
    11c6:	97 f9       	bld	r25, 7
    11c8:	9f 67       	ori	r25, 0x7F	; 127
    11ca:	80 e8       	ldi	r24, 0x80	; 128
    11cc:	70 e0       	ldi	r23, 0x00	; 0
    11ce:	60 e0       	ldi	r22, 0x00	; 0
    11d0:	08 95       	ret

000011d2 <__fp_nan>:
    11d2:	9f ef       	ldi	r25, 0xFF	; 255
    11d4:	80 ec       	ldi	r24, 0xC0	; 192
    11d6:	08 95       	ret

000011d8 <__fp_pscA>:
    11d8:	00 24       	eor	r0, r0
    11da:	0a 94       	dec	r0
    11dc:	16 16       	cp	r1, r22
    11de:	17 06       	cpc	r1, r23
    11e0:	18 06       	cpc	r1, r24
    11e2:	09 06       	cpc	r0, r25
    11e4:	08 95       	ret

000011e6 <__fp_pscB>:
    11e6:	00 24       	eor	r0, r0
    11e8:	0a 94       	dec	r0
    11ea:	12 16       	cp	r1, r18
    11ec:	13 06       	cpc	r1, r19
    11ee:	14 06       	cpc	r1, r20
    11f0:	05 06       	cpc	r0, r21
    11f2:	08 95       	ret

000011f4 <__fp_round>:
    11f4:	09 2e       	mov	r0, r25
    11f6:	03 94       	inc	r0
    11f8:	00 0c       	add	r0, r0
    11fa:	11 f4       	brne	.+4      	; 0x1200 <__fp_round+0xc>
    11fc:	88 23       	and	r24, r24
    11fe:	52 f0       	brmi	.+20     	; 0x1214 <__fp_round+0x20>
    1200:	bb 0f       	add	r27, r27
    1202:	40 f4       	brcc	.+16     	; 0x1214 <__fp_round+0x20>
    1204:	bf 2b       	or	r27, r31
    1206:	11 f4       	brne	.+4      	; 0x120c <__fp_round+0x18>
    1208:	60 ff       	sbrs	r22, 0
    120a:	04 c0       	rjmp	.+8      	; 0x1214 <__fp_round+0x20>
    120c:	6f 5f       	subi	r22, 0xFF	; 255
    120e:	7f 4f       	sbci	r23, 0xFF	; 255
    1210:	8f 4f       	sbci	r24, 0xFF	; 255
    1212:	9f 4f       	sbci	r25, 0xFF	; 255
    1214:	08 95       	ret

00001216 <__udivmodsi4>:
    1216:	a1 e2       	ldi	r26, 0x21	; 33
    1218:	1a 2e       	mov	r1, r26
    121a:	aa 1b       	sub	r26, r26
    121c:	bb 1b       	sub	r27, r27
    121e:	fd 01       	movw	r30, r26
    1220:	0d c0       	rjmp	.+26     	; 0x123c <__udivmodsi4_ep>

00001222 <__udivmodsi4_loop>:
    1222:	aa 1f       	adc	r26, r26
    1224:	bb 1f       	adc	r27, r27
    1226:	ee 1f       	adc	r30, r30
    1228:	ff 1f       	adc	r31, r31
    122a:	a2 17       	cp	r26, r18
    122c:	b3 07       	cpc	r27, r19
    122e:	e4 07       	cpc	r30, r20
    1230:	f5 07       	cpc	r31, r21
    1232:	20 f0       	brcs	.+8      	; 0x123c <__udivmodsi4_ep>
    1234:	a2 1b       	sub	r26, r18
    1236:	b3 0b       	sbc	r27, r19
    1238:	e4 0b       	sbc	r30, r20
    123a:	f5 0b       	sbc	r31, r21

0000123c <__udivmodsi4_ep>:
    123c:	66 1f       	adc	r22, r22
    123e:	77 1f       	adc	r23, r23
    1240:	88 1f       	adc	r24, r24
    1242:	99 1f       	adc	r25, r25
    1244:	1a 94       	dec	r1
    1246:	69 f7       	brne	.-38     	; 0x1222 <__udivmodsi4_loop>
    1248:	60 95       	com	r22
    124a:	70 95       	com	r23
    124c:	80 95       	com	r24
    124e:	90 95       	com	r25
    1250:	9b 01       	movw	r18, r22
    1252:	ac 01       	movw	r20, r24
    1254:	bd 01       	movw	r22, r26
    1256:	cf 01       	movw	r24, r30
    1258:	08 95       	ret

0000125a <__umulhisi3>:
    125a:	a2 9f       	mul	r26, r18
    125c:	b0 01       	movw	r22, r0
    125e:	b3 9f       	mul	r27, r19
    1260:	c0 01       	movw	r24, r0
    1262:	a3 9f       	mul	r26, r19
    1264:	70 0d       	add	r23, r0
    1266:	81 1d       	adc	r24, r1
    1268:	11 24       	eor	r1, r1
    126a:	91 1d       	adc	r25, r1
    126c:	b2 9f       	mul	r27, r18
    126e:	70 0d       	add	r23, r0
    1270:	81 1d       	adc	r24, r1
    1272:	11 24       	eor	r1, r1
    1274:	91 1d       	adc	r25, r1
    1276:	08 95       	ret

00001278 <__moddi3>:
    1278:	68 94       	set
    127a:	01 c0       	rjmp	.+2      	; 0x127e <__divdi3_moddi3>

0000127c <__divdi3>:
    127c:	e8 94       	clt

0000127e <__divdi3_moddi3>:
    127e:	f9 2f       	mov	r31, r25
    1280:	f1 2b       	or	r31, r17
    1282:	12 f0       	brmi	.+4      	; 0x1288 <__divdi3_moddi3+0xa>
    1284:	0c 94 70 09 	jmp	0x12e0	; 0x12e0 <__udivdi3_umoddi3>
    1288:	a0 e0       	ldi	r26, 0x00	; 0
    128a:	b0 e0       	ldi	r27, 0x00	; 0
    128c:	ea e4       	ldi	r30, 0x4A	; 74
    128e:	f9 e0       	ldi	r31, 0x09	; 9
    1290:	0c 94 e2 09 	jmp	0x13c4	; 0x13c4 <__prologue_saves__+0xc>
    1294:	09 2e       	mov	r0, r25
    1296:	05 94       	asr	r0
    1298:	22 f4       	brpl	.+8      	; 0x12a2 <__divdi3_moddi3+0x24>
    129a:	0e 94 cc 09 	call	0x1398	; 0x1398 <__negdi2>
    129e:	11 23       	and	r17, r17
    12a0:	92 f4       	brpl	.+36     	; 0x12c6 <__divdi3_moddi3+0x48>
    12a2:	f0 e8       	ldi	r31, 0x80	; 128
    12a4:	0f 26       	eor	r0, r31
    12a6:	ff ef       	ldi	r31, 0xFF	; 255
    12a8:	e0 94       	com	r14
    12aa:	f0 94       	com	r15
    12ac:	00 95       	com	r16
    12ae:	10 95       	com	r17
    12b0:	b0 94       	com	r11
    12b2:	c0 94       	com	r12
    12b4:	d0 94       	com	r13
    12b6:	a1 94       	neg	r10
    12b8:	bf 0a       	sbc	r11, r31
    12ba:	cf 0a       	sbc	r12, r31
    12bc:	df 0a       	sbc	r13, r31
    12be:	ef 0a       	sbc	r14, r31
    12c0:	ff 0a       	sbc	r15, r31
    12c2:	0f 0b       	sbc	r16, r31
    12c4:	1f 0b       	sbc	r17, r31
    12c6:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <__udivmod64>
    12ca:	07 fc       	sbrc	r0, 7
    12cc:	0e 94 cc 09 	call	0x1398	; 0x1398 <__negdi2>
    12d0:	cd b7       	in	r28, 0x3d	; 61
    12d2:	de b7       	in	r29, 0x3e	; 62
    12d4:	ec e0       	ldi	r30, 0x0C	; 12
    12d6:	0c 94 fe 09 	jmp	0x13fc	; 0x13fc <__epilogue_restores__+0xc>

000012da <__umoddi3>:
    12da:	68 94       	set
    12dc:	01 c0       	rjmp	.+2      	; 0x12e0 <__udivdi3_umoddi3>

000012de <__udivdi3>:
    12de:	e8 94       	clt

000012e0 <__udivdi3_umoddi3>:
    12e0:	8f 92       	push	r8
    12e2:	9f 92       	push	r9
    12e4:	cf 93       	push	r28
    12e6:	df 93       	push	r29
    12e8:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <__udivmod64>
    12ec:	df 91       	pop	r29
    12ee:	cf 91       	pop	r28
    12f0:	9f 90       	pop	r9
    12f2:	8f 90       	pop	r8
    12f4:	08 95       	ret

000012f6 <__udivmod64>:
    12f6:	88 24       	eor	r8, r8
    12f8:	99 24       	eor	r9, r9
    12fa:	f4 01       	movw	r30, r8
    12fc:	e4 01       	movw	r28, r8
    12fe:	b0 e4       	ldi	r27, 0x40	; 64
    1300:	9f 93       	push	r25
    1302:	aa 27       	eor	r26, r26
    1304:	9a 15       	cp	r25, r10
    1306:	8b 04       	cpc	r8, r11
    1308:	9c 04       	cpc	r9, r12
    130a:	ed 05       	cpc	r30, r13
    130c:	fe 05       	cpc	r31, r14
    130e:	cf 05       	cpc	r28, r15
    1310:	d0 07       	cpc	r29, r16
    1312:	a1 07       	cpc	r26, r17
    1314:	98 f4       	brcc	.+38     	; 0x133c <__udivmod64+0x46>
    1316:	ad 2f       	mov	r26, r29
    1318:	dc 2f       	mov	r29, r28
    131a:	cf 2f       	mov	r28, r31
    131c:	fe 2f       	mov	r31, r30
    131e:	e9 2d       	mov	r30, r9
    1320:	98 2c       	mov	r9, r8
    1322:	89 2e       	mov	r8, r25
    1324:	98 2f       	mov	r25, r24
    1326:	87 2f       	mov	r24, r23
    1328:	76 2f       	mov	r23, r22
    132a:	65 2f       	mov	r22, r21
    132c:	54 2f       	mov	r21, r20
    132e:	43 2f       	mov	r20, r19
    1330:	32 2f       	mov	r19, r18
    1332:	22 27       	eor	r18, r18
    1334:	b8 50       	subi	r27, 0x08	; 8
    1336:	31 f7       	brne	.-52     	; 0x1304 <__udivmod64+0xe>
    1338:	bf 91       	pop	r27
    133a:	27 c0       	rjmp	.+78     	; 0x138a <__udivmod64+0x94>
    133c:	1b 2e       	mov	r1, r27
    133e:	bf 91       	pop	r27
    1340:	bb 27       	eor	r27, r27
    1342:	22 0f       	add	r18, r18
    1344:	33 1f       	adc	r19, r19
    1346:	44 1f       	adc	r20, r20
    1348:	55 1f       	adc	r21, r21
    134a:	66 1f       	adc	r22, r22
    134c:	77 1f       	adc	r23, r23
    134e:	88 1f       	adc	r24, r24
    1350:	99 1f       	adc	r25, r25
    1352:	88 1c       	adc	r8, r8
    1354:	99 1c       	adc	r9, r9
    1356:	ee 1f       	adc	r30, r30
    1358:	ff 1f       	adc	r31, r31
    135a:	cc 1f       	adc	r28, r28
    135c:	dd 1f       	adc	r29, r29
    135e:	aa 1f       	adc	r26, r26
    1360:	bb 1f       	adc	r27, r27
    1362:	8a 14       	cp	r8, r10
    1364:	9b 04       	cpc	r9, r11
    1366:	ec 05       	cpc	r30, r12
    1368:	fd 05       	cpc	r31, r13
    136a:	ce 05       	cpc	r28, r14
    136c:	df 05       	cpc	r29, r15
    136e:	a0 07       	cpc	r26, r16
    1370:	b1 07       	cpc	r27, r17
    1372:	48 f0       	brcs	.+18     	; 0x1386 <__udivmod64+0x90>
    1374:	8a 18       	sub	r8, r10
    1376:	9b 08       	sbc	r9, r11
    1378:	ec 09       	sbc	r30, r12
    137a:	fd 09       	sbc	r31, r13
    137c:	ce 09       	sbc	r28, r14
    137e:	df 09       	sbc	r29, r15
    1380:	a0 0b       	sbc	r26, r16
    1382:	b1 0b       	sbc	r27, r17
    1384:	21 60       	ori	r18, 0x01	; 1
    1386:	1a 94       	dec	r1
    1388:	e1 f6       	brne	.-72     	; 0x1342 <__udivmod64+0x4c>
    138a:	2e f4       	brtc	.+10     	; 0x1396 <__udivmod64+0xa0>
    138c:	94 01       	movw	r18, r8
    138e:	af 01       	movw	r20, r30
    1390:	be 01       	movw	r22, r28
    1392:	cd 01       	movw	r24, r26
    1394:	00 0c       	add	r0, r0
    1396:	08 95       	ret

00001398 <__negdi2>:
    1398:	60 95       	com	r22
    139a:	70 95       	com	r23
    139c:	80 95       	com	r24
    139e:	90 95       	com	r25
    13a0:	30 95       	com	r19
    13a2:	40 95       	com	r20
    13a4:	50 95       	com	r21
    13a6:	21 95       	neg	r18
    13a8:	3f 4f       	sbci	r19, 0xFF	; 255
    13aa:	4f 4f       	sbci	r20, 0xFF	; 255
    13ac:	5f 4f       	sbci	r21, 0xFF	; 255
    13ae:	6f 4f       	sbci	r22, 0xFF	; 255
    13b0:	7f 4f       	sbci	r23, 0xFF	; 255
    13b2:	8f 4f       	sbci	r24, 0xFF	; 255
    13b4:	9f 4f       	sbci	r25, 0xFF	; 255
    13b6:	08 95       	ret

000013b8 <__prologue_saves__>:
    13b8:	2f 92       	push	r2
    13ba:	3f 92       	push	r3
    13bc:	4f 92       	push	r4
    13be:	5f 92       	push	r5
    13c0:	6f 92       	push	r6
    13c2:	7f 92       	push	r7
    13c4:	8f 92       	push	r8
    13c6:	9f 92       	push	r9
    13c8:	af 92       	push	r10
    13ca:	bf 92       	push	r11
    13cc:	cf 92       	push	r12
    13ce:	df 92       	push	r13
    13d0:	ef 92       	push	r14
    13d2:	ff 92       	push	r15
    13d4:	0f 93       	push	r16
    13d6:	1f 93       	push	r17
    13d8:	cf 93       	push	r28
    13da:	df 93       	push	r29
    13dc:	cd b7       	in	r28, 0x3d	; 61
    13de:	de b7       	in	r29, 0x3e	; 62
    13e0:	ca 1b       	sub	r28, r26
    13e2:	db 0b       	sbc	r29, r27
    13e4:	0f b6       	in	r0, 0x3f	; 63
    13e6:	f8 94       	cli
    13e8:	de bf       	out	0x3e, r29	; 62
    13ea:	0f be       	out	0x3f, r0	; 63
    13ec:	cd bf       	out	0x3d, r28	; 61
    13ee:	09 94       	ijmp

000013f0 <__epilogue_restores__>:
    13f0:	2a 88       	ldd	r2, Y+18	; 0x12
    13f2:	39 88       	ldd	r3, Y+17	; 0x11
    13f4:	48 88       	ldd	r4, Y+16	; 0x10
    13f6:	5f 84       	ldd	r5, Y+15	; 0x0f
    13f8:	6e 84       	ldd	r6, Y+14	; 0x0e
    13fa:	7d 84       	ldd	r7, Y+13	; 0x0d
    13fc:	8c 84       	ldd	r8, Y+12	; 0x0c
    13fe:	9b 84       	ldd	r9, Y+11	; 0x0b
    1400:	aa 84       	ldd	r10, Y+10	; 0x0a
    1402:	b9 84       	ldd	r11, Y+9	; 0x09
    1404:	c8 84       	ldd	r12, Y+8	; 0x08
    1406:	df 80       	ldd	r13, Y+7	; 0x07
    1408:	ee 80       	ldd	r14, Y+6	; 0x06
    140a:	fd 80       	ldd	r15, Y+5	; 0x05
    140c:	0c 81       	ldd	r16, Y+4	; 0x04
    140e:	1b 81       	ldd	r17, Y+3	; 0x03
    1410:	aa 81       	ldd	r26, Y+2	; 0x02
    1412:	b9 81       	ldd	r27, Y+1	; 0x01
    1414:	ce 0f       	add	r28, r30
    1416:	d1 1d       	adc	r29, r1
    1418:	0f b6       	in	r0, 0x3f	; 63
    141a:	f8 94       	cli
    141c:	de bf       	out	0x3e, r29	; 62
    141e:	0f be       	out	0x3f, r0	; 63
    1420:	cd bf       	out	0x3d, r28	; 61
    1422:	ed 01       	movw	r28, r26
    1424:	08 95       	ret

00001426 <__cmpdi2_s8>:
    1426:	00 24       	eor	r0, r0
    1428:	a7 fd       	sbrc	r26, 7
    142a:	00 94       	com	r0
    142c:	2a 17       	cp	r18, r26
    142e:	30 05       	cpc	r19, r0
    1430:	40 05       	cpc	r20, r0
    1432:	50 05       	cpc	r21, r0
    1434:	60 05       	cpc	r22, r0
    1436:	70 05       	cpc	r23, r0
    1438:	80 05       	cpc	r24, r0
    143a:	90 05       	cpc	r25, r0
    143c:	08 95       	ret

0000143e <_exit>:
    143e:	f8 94       	cli

00001440 <__stop_program>:
    1440:	ff cf       	rjmp	.-2      	; 0x1440 <__stop_program>
