
Smart_Home_Control_Microcontroller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001548  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000056  00800060  00001548  000015dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000023  008000b6  008000b6  00001632  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001632  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001664  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003d0  00000000  00000000  000016a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000037a8  00000000  00000000  00001a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000111d  00000000  00000000  00005218  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000201c  00000000  00000000  00006335  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000974  00000000  00000000  00008354  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000111d  00000000  00000000  00008cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002319  00000000  00000000  00009de5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000300  00000000  00000000  0000c0fe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 fd 07 	jmp	0xffa	; 0xffa <__vector_1>
       8:	0c 94 26 08 	jmp	0x104c	; 0x104c <__vector_2>
       c:	0c 94 4f 08 	jmp	0x109e	; 0x109e <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 a7 08 	jmp	0x114e	; 0x114e <__vector_10>
      2c:	0c 94 68 03 	jmp	0x6d0	; 0x6d0 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 20 09 	jmp	0x1240	; 0x1240 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e4       	ldi	r30, 0x48	; 72
      68:	f5 e1       	ldi	r31, 0x15	; 21
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 3b       	cpi	r26, 0xB6	; 182
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a6 eb       	ldi	r26, 0xB6	; 182
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 3d       	cpi	r26, 0xD9	; 217
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 00 	call	0x92	; 0x92 <main>
      8a:	0c 94 a2 0a 	jmp	0x1544	; 0x1544 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
volatile u8  counter=0; // the counter which determine the periodic time of implementing ISR
volatile u8  last_air_conditioning_value=AIR_CONDTIONING_OFF; // last air conditioning value which will help in hysteresis

int main(void)
{
	M_DIO_voidSetPortDirection(PORT_C,OUTPUT);
      92:	61 e0       	ldi	r22, 0x01	; 1
      94:	82 e0       	ldi	r24, 0x02	; 2
      96:	0e 94 c5 07 	call	0xf8a	; 0xf8a <M_DIO_voidSetPortDirection>
	H_LED_voidInit(LED_RED_PIN);
      9a:	84 e0       	ldi	r24, 0x04	; 4
      9c:	0e 94 05 06 	call	0xc0a	; 0xc0a <H_LED_voidInit>
	H_LED_voidInit(LED_GREEN_PIN);
      a0:	85 e0       	ldi	r24, 0x05	; 5
      a2:	0e 94 05 06 	call	0xc0a	; 0xc0a <H_LED_voidInit>
	H_LED_voidInit(LED_ORANGE_PIN);
      a6:	86 e0       	ldi	r24, 0x06	; 6
      a8:	0e 94 05 06 	call	0xc0a	; 0xc0a <H_LED_voidInit>
	H_LED_voidInit(ROOM1_LED_PIN);
      ac:	8a e1       	ldi	r24, 0x1A	; 26
      ae:	0e 94 05 06 	call	0xc0a	; 0xc0a <H_LED_voidInit>
	H_LED_voidInit(ROOM2_LED_PIN);
      b2:	8b e1       	ldi	r24, 0x1B	; 27
      b4:	0e 94 05 06 	call	0xc0a	; 0xc0a <H_LED_voidInit>
	H_LED_voidInit(ROOM3_LED_PIN);
      b8:	8c e1       	ldi	r24, 0x1C	; 28
      ba:	0e 94 05 06 	call	0xc0a	; 0xc0a <H_LED_voidInit>
	H_LED_voidInit(ROOM4_LED_PIN);
      be:	8d e1       	ldi	r24, 0x1D	; 29
      c0:	0e 94 05 06 	call	0xc0a	; 0xc0a <H_LED_voidInit>
	H_LED_voidInit(TV_LED_PIN);
      c4:	8e e1       	ldi	r24, 0x1E	; 30
      c6:	0e 94 05 06 	call	0xc0a	; 0xc0a <H_LED_voidInit>
	H_LED_voidInit(AIR_COND_LED_PIN);
      ca:	8f e1       	ldi	r24, 0x1F	; 31
      cc:	0e 94 05 06 	call	0xc0a	; 0xc0a <H_LED_voidInit>

	H_BUZZER_voidInit();
      d0:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <H_BUZZER_voidInit>
	H_MOTOR_voidInit();
      d4:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <H_MOTOR_voidInit>
	H_SENSORS_voidInit();
      d8:	0e 94 11 06 	call	0xc22	; 0xc22 <H_SENSORS_voidInit>
	H_LCD_voidInit();
      dc:	0e 94 e6 04 	call	0x9cc	; 0x9cc <H_LCD_voidInit>
	M_UART_voidInit();
      e0:	0e 94 03 09 	call	0x1206	; 0x1206 <M_UART_voidInit>
	M_Timer0_Init();
      e4:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <M_Timer0_Init>
	M_TIMER0_EnableInt(TIMER0_OVF_INTERRUPT);
      e8:	80 e0       	ldi	r24, 0x00	; 0
      ea:	0e 94 96 08 	call	0x112c	; 0x112c <M_TIMER0_EnableInt>
	M_Global_Interrupt_Enable();
      ee:	0e 94 78 08 	call	0x10f0	; 0x10f0 <M_Global_Interrupt_Enable>
	S_UART_void_ReceiveCharAsynch(&data_recieved);
      f2:	81 e6       	ldi	r24, 0x61	; 97
      f4:	90 e0       	ldi	r25, 0x00	; 0
      f6:	0e 94 7e 09 	call	0x12fc	; 0x12fc <S_UART_void_ReceiveCharAsynch>
	u8 room1_status = OFF_STATUS;
	u8 room2_status = OFF_STATUS;
    u8 room3_status = OFF_STATUS;
	u8 room4_status = OFF_STATUS;
	u8 TV_status    = OFF_STATUS;	
	u8 AC_status    = OFF_STATUS;
      fa:	c1 2c       	mov	r12, r1
	
	u8 room1_status = OFF_STATUS;
	u8 room2_status = OFF_STATUS;
    u8 room3_status = OFF_STATUS;
	u8 room4_status = OFF_STATUS;
	u8 TV_status    = OFF_STATUS;	
      fc:	d1 2c       	mov	r13, r1
	S_UART_void_ReceiveCharAsynch(&data_recieved);
	
	u8 room1_status = OFF_STATUS;
	u8 room2_status = OFF_STATUS;
    u8 room3_status = OFF_STATUS;
	u8 room4_status = OFF_STATUS;
      fe:	e1 2c       	mov	r14, r1
	M_Global_Interrupt_Enable();
	S_UART_void_ReceiveCharAsynch(&data_recieved);
	
	u8 room1_status = OFF_STATUS;
	u8 room2_status = OFF_STATUS;
    u8 room3_status = OFF_STATUS;
     100:	f1 2c       	mov	r15, r1
	M_TIMER0_EnableInt(TIMER0_OVF_INTERRUPT);
	M_Global_Interrupt_Enable();
	S_UART_void_ReceiveCharAsynch(&data_recieved);
	
	u8 room1_status = OFF_STATUS;
	u8 room2_status = OFF_STATUS;
     102:	00 e0       	ldi	r16, 0x00	; 0
	M_Timer0_Init();
	M_TIMER0_EnableInt(TIMER0_OVF_INTERRUPT);
	M_Global_Interrupt_Enable();
	S_UART_void_ReceiveCharAsynch(&data_recieved);
	
	u8 room1_status = OFF_STATUS;
     104:	10 e0       	ldi	r17, 0x00	; 0
	u8 AC_status    = OFF_STATUS;
	
	u16 volt=0;
    while (1) 
    {
		volt= LDR_GetVolt();
     106:	0e 94 26 06 	call	0xc4c	; 0xc4c <LDR_GetVolt>
	    if(volt<=454 && volt>=0)
     10a:	87 3c       	cpi	r24, 0xC7	; 199
     10c:	21 e0       	ldi	r18, 0x01	; 1
     10e:	92 07       	cpc	r25, r18
     110:	28 f4       	brcc	.+10     	; 0x11c <main+0x8a>
		{
			//turn all
	        M_DIO_voidSetPortValue(PORT_C, 0b11111111);
     112:	6f ef       	ldi	r22, 0xFF	; 255
     114:	82 e0       	ldi	r24, 0x02	; 2
     116:	0e 94 ed 07 	call	0xfda	; 0xfda <M_DIO_voidSetPortValue>
     11a:	55 c0       	rjmp	.+170    	; 0x1c6 <main+0x134>
					
		}
		else if(volt<=1665 && volt>=460)
     11c:	9c 01       	movw	r18, r24
     11e:	2c 5c       	subi	r18, 0xCC	; 204
     120:	31 40       	sbci	r19, 0x01	; 1
     122:	26 3b       	cpi	r18, 0xB6	; 182
     124:	34 40       	sbci	r19, 0x04	; 4
     126:	28 f4       	brcc	.+10     	; 0x132 <main+0xa0>
		{
			//turn on first 6
			M_DIO_voidSetPortValue(PORT_C, 0b01111111);
     128:	6f e7       	ldi	r22, 0x7F	; 127
     12a:	82 e0       	ldi	r24, 0x02	; 2
     12c:	0e 94 ed 07 	call	0xfda	; 0xfda <M_DIO_voidSetPortValue>
     130:	4a c0       	rjmp	.+148    	; 0x1c6 <main+0x134>
		}
		else if(volt<=2500 && volt>1665)
     132:	9c 01       	movw	r18, r24
     134:	22 58       	subi	r18, 0x82	; 130
     136:	36 40       	sbci	r19, 0x06	; 6
     138:	23 34       	cpi	r18, 0x43	; 67
     13a:	33 40       	sbci	r19, 0x03	; 3
     13c:	28 f4       	brcc	.+10     	; 0x148 <main+0xb6>
		{
			//turn on first 4
			M_DIO_voidSetPortValue(PORT_C, 0b00111111);
     13e:	6f e3       	ldi	r22, 0x3F	; 63
     140:	82 e0       	ldi	r24, 0x02	; 2
     142:	0e 94 ed 07 	call	0xfda	; 0xfda <M_DIO_voidSetPortValue>
     146:	3f c0       	rjmp	.+126    	; 0x1c6 <main+0x134>
		}
		else if(volt<=3330 && volt>2500)
     148:	9c 01       	movw	r18, r24
     14a:	25 5c       	subi	r18, 0xC5	; 197
     14c:	39 40       	sbci	r19, 0x09	; 9
     14e:	2e 33       	cpi	r18, 0x3E	; 62
     150:	33 40       	sbci	r19, 0x03	; 3
     152:	28 f4       	brcc	.+10     	; 0x15e <main+0xcc>
		{
			//turn on first 2
			M_DIO_voidSetPortValue(PORT_C, 0b00011111);
     154:	6f e1       	ldi	r22, 0x1F	; 31
     156:	82 e0       	ldi	r24, 0x02	; 2
     158:	0e 94 ed 07 	call	0xfda	; 0xfda <M_DIO_voidSetPortValue>
     15c:	34 c0       	rjmp	.+104    	; 0x1c6 <main+0x134>
		}
		else if(volt<=4165 && volt>3330)
     15e:	9c 01       	movw	r18, r24
     160:	23 50       	subi	r18, 0x03	; 3
     162:	3d 40       	sbci	r19, 0x0D	; 13
     164:	23 34       	cpi	r18, 0x43	; 67
     166:	33 40       	sbci	r19, 0x03	; 3
     168:	28 f4       	brcc	.+10     	; 0x174 <main+0xe2>
		{
			//turn off all leds
			M_DIO_voidSetPortValue(PORT_C, 0b00001111);
     16a:	6f e0       	ldi	r22, 0x0F	; 15
     16c:	82 e0       	ldi	r24, 0x02	; 2
     16e:	0e 94 ed 07 	call	0xfda	; 0xfda <M_DIO_voidSetPortValue>
     172:	29 c0       	rjmp	.+82     	; 0x1c6 <main+0x134>
		}
		else if(volt<=4760 && volt>4165)
     174:	9c 01       	movw	r18, r24
     176:	26 54       	subi	r18, 0x46	; 70
     178:	30 41       	sbci	r19, 0x10	; 16
     17a:	23 35       	cpi	r18, 0x53	; 83
     17c:	32 40       	sbci	r19, 0x02	; 2
     17e:	28 f4       	brcc	.+10     	; 0x18a <main+0xf8>
		{
			//turn off all leds
			M_DIO_voidSetPortValue(PORT_C, 0b00000111);
     180:	67 e0       	ldi	r22, 0x07	; 7
     182:	82 e0       	ldi	r24, 0x02	; 2
     184:	0e 94 ed 07 	call	0xfda	; 0xfda <M_DIO_voidSetPortValue>
     188:	1e c0       	rjmp	.+60     	; 0x1c6 <main+0x134>
		}
		else if(volt<=4902 && volt>4760)
     18a:	9c 01       	movw	r18, r24
     18c:	29 59       	subi	r18, 0x99	; 153
     18e:	32 41       	sbci	r19, 0x12	; 18
     190:	2e 38       	cpi	r18, 0x8E	; 142
     192:	31 05       	cpc	r19, r1
     194:	28 f4       	brcc	.+10     	; 0x1a0 <main+0x10e>
		{
			//turn off all leds
			M_DIO_voidSetPortValue(PORT_C, 0b00000011);
     196:	63 e0       	ldi	r22, 0x03	; 3
     198:	82 e0       	ldi	r24, 0x02	; 2
     19a:	0e 94 ed 07 	call	0xfda	; 0xfda <M_DIO_voidSetPortValue>
     19e:	13 c0       	rjmp	.+38     	; 0x1c6 <main+0x134>
		}
		else if(volt<=4951 && volt>4902)
     1a0:	9c 01       	movw	r18, r24
     1a2:	27 52       	subi	r18, 0x27	; 39
     1a4:	33 41       	sbci	r19, 0x13	; 19
     1a6:	21 33       	cpi	r18, 0x31	; 49
     1a8:	31 05       	cpc	r19, r1
     1aa:	28 f4       	brcc	.+10     	; 0x1b6 <main+0x124>
		{
			//turn off all leds
			M_DIO_voidSetPortValue(PORT_C, 0b00000001);
     1ac:	61 e0       	ldi	r22, 0x01	; 1
     1ae:	82 e0       	ldi	r24, 0x02	; 2
     1b0:	0e 94 ed 07 	call	0xfda	; 0xfda <M_DIO_voidSetPortValue>
     1b4:	08 c0       	rjmp	.+16     	; 0x1c6 <main+0x134>
		}
		else if(volt<=4975 && volt>4951)
     1b6:	88 55       	subi	r24, 0x58	; 88
     1b8:	93 41       	sbci	r25, 0x13	; 19
     1ba:	48 97       	sbiw	r24, 0x18	; 24
     1bc:	20 f4       	brcc	.+8      	; 0x1c6 <main+0x134>
		{
			//turn off all leds
			M_DIO_voidSetPortValue(PORT_C, 0b00000000);
     1be:	60 e0       	ldi	r22, 0x00	; 0
     1c0:	82 e0       	ldi	r24, 0x02	; 2
     1c2:	0e 94 ed 07 	call	0xfda	; 0xfda <M_DIO_voidSetPortValue>
		}		
		temp_sensor_reading=(H_LM35_GetTemp()/10);
     1c6:	0e 94 22 06 	call	0xc44	; 0xc44 <H_LM35_GetTemp>
     1ca:	9c 01       	movw	r18, r24
     1cc:	ad ec       	ldi	r26, 0xCD	; 205
     1ce:	bc ec       	ldi	r27, 0xCC	; 204
     1d0:	0e 94 b0 09 	call	0x1360	; 0x1360 <__umulhisi3>
     1d4:	96 95       	lsr	r25
     1d6:	87 95       	ror	r24
     1d8:	96 95       	lsr	r25
     1da:	87 95       	ror	r24
     1dc:	96 95       	lsr	r25
     1de:	87 95       	ror	r24
     1e0:	90 93 b9 00 	sts	0x00B9, r25	; 0x8000b9 <temp_sensor_reading+0x1>
     1e4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <temp_sensor_reading>
		H_LCD_voidSetPosition(1,33);
     1e8:	61 e2       	ldi	r22, 0x21	; 33
     1ea:	81 e0       	ldi	r24, 0x01	; 1
     1ec:	0e 94 35 05 	call	0xa6a	; 0xa6a <H_LCD_voidSetPosition>
		H_LCD_voidSendString("CT:");
     1f0:	8a e6       	ldi	r24, 0x6A	; 106
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	0e 94 20 05 	call	0xa40	; 0xa40 <H_LCD_voidSendString>
		H_LCD_voidSetPosition(1,36);
     1f8:	64 e2       	ldi	r22, 0x24	; 36
     1fa:	81 e0       	ldi	r24, 0x01	; 1
     1fc:	0e 94 35 05 	call	0xa6a	; 0xa6a <H_LCD_voidSetPosition>
		H_LCD_SendNumber(temp_sensor_reading);
     200:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <temp_sensor_reading>
     204:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <temp_sensor_reading+0x1>
     208:	28 2f       	mov	r18, r24
     20a:	39 2f       	mov	r19, r25
     20c:	40 e0       	ldi	r20, 0x00	; 0
     20e:	50 e0       	ldi	r21, 0x00	; 0
     210:	60 e0       	ldi	r22, 0x00	; 0
     212:	70 e0       	ldi	r23, 0x00	; 0
     214:	80 e0       	ldi	r24, 0x00	; 0
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	0e 94 51 05 	call	0xaa2	; 0xaa2 <H_LCD_SendNumber>
		H_LCD_voidSendChar(DEGREES_SYMBOL); // print the symbol of degree
     21c:	8f ed       	ldi	r24, 0xDF	; 223
     21e:	0e 94 1d 05 	call	0xa3a	; 0xa3a <H_LCD_voidSendChar>
		H_LCD_voidSendChar('C'); // print the C character
     222:	83 e4       	ldi	r24, 0x43	; 67
     224:	0e 94 1d 05 	call	0xa3a	; 0xa3a <H_LCD_voidSendChar>
		
		H_LCD_voidSetPosition(2,33);
     228:	61 e2       	ldi	r22, 0x21	; 33
     22a:	82 e0       	ldi	r24, 0x02	; 2
     22c:	0e 94 35 05 	call	0xa6a	; 0xa6a <H_LCD_voidSetPosition>
		H_LCD_voidSendString("RT:");
     230:	8e e6       	ldi	r24, 0x6E	; 110
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	0e 94 20 05 	call	0xa40	; 0xa40 <H_LCD_voidSendString>
		H_LCD_voidSetPosition(2,36);
     238:	64 e2       	ldi	r22, 0x24	; 36
     23a:	82 e0       	ldi	r24, 0x02	; 2
     23c:	0e 94 35 05 	call	0xa6a	; 0xa6a <H_LCD_voidSetPosition>
		H_LCD_SendNumber(required_temperature);
     240:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     244:	30 e0       	ldi	r19, 0x00	; 0
     246:	40 e0       	ldi	r20, 0x00	; 0
     248:	50 e0       	ldi	r21, 0x00	; 0
     24a:	60 e0       	ldi	r22, 0x00	; 0
     24c:	70 e0       	ldi	r23, 0x00	; 0
     24e:	80 e0       	ldi	r24, 0x00	; 0
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	0e 94 51 05 	call	0xaa2	; 0xaa2 <H_LCD_SendNumber>
		H_LCD_voidSendChar(DEGREES_SYMBOL); // print the symbol of degree
     256:	8f ed       	ldi	r24, 0xDF	; 223
     258:	0e 94 1d 05 	call	0xa3a	; 0xa3a <H_LCD_voidSendChar>
		H_LCD_voidSendChar('C'); // print the C character
     25c:	83 e4       	ldi	r24, 0x43	; 67
     25e:	0e 94 1d 05 	call	0xa3a	; 0xa3a <H_LCD_voidSendChar>
		
		smoke_reading = POT_GetPerc();
     262:	0e 94 2a 06 	call	0xc54	; 0xc54 <POT_GetPerc>
     266:	80 93 cf 00 	sts	0x00CF, r24	; 0x8000cf <smoke_reading>
		H_LCD_voidSetPosition(2,21);
     26a:	65 e1       	ldi	r22, 0x15	; 21
     26c:	82 e0       	ldi	r24, 0x02	; 2
     26e:	0e 94 35 05 	call	0xa6a	; 0xa6a <H_LCD_voidSetPosition>
		H_LCD_voidSendString("Smoke :");
     272:	82 e7       	ldi	r24, 0x72	; 114
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	0e 94 20 05 	call	0xa40	; 0xa40 <H_LCD_voidSendString>
		H_LCD_voidSetPosition(2,28);
     27a:	6c e1       	ldi	r22, 0x1C	; 28
     27c:	82 e0       	ldi	r24, 0x02	; 2
     27e:	0e 94 35 05 	call	0xa6a	; 0xa6a <H_LCD_voidSetPosition>
		H_LCD_SendNumber(smoke_reading);
     282:	20 91 cf 00 	lds	r18, 0x00CF	; 0x8000cf <smoke_reading>
     286:	30 e0       	ldi	r19, 0x00	; 0
     288:	40 e0       	ldi	r20, 0x00	; 0
     28a:	50 e0       	ldi	r21, 0x00	; 0
     28c:	60 e0       	ldi	r22, 0x00	; 0
     28e:	70 e0       	ldi	r23, 0x00	; 0
     290:	80 e0       	ldi	r24, 0x00	; 0
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	0e 94 51 05 	call	0xaa2	; 0xaa2 <H_LCD_SendNumber>
		H_LCD_voidSendChar('%');
     298:	85 e2       	ldi	r24, 0x25	; 37
     29a:	0e 94 1d 05 	call	0xa3a	; 0xa3a <H_LCD_voidSendChar>
		

		H_LCD_voidSetPosition(1,0);
     29e:	60 e0       	ldi	r22, 0x00	; 0
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	0e 94 35 05 	call	0xa6a	; 0xa6a <H_LCD_voidSetPosition>
		H_LCD_voidSendString("R1:");
     2a6:	8a e7       	ldi	r24, 0x7A	; 122
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	0e 94 20 05 	call	0xa40	; 0xa40 <H_LCD_voidSendString>
		H_LCD_voidSetPosition(1,3);
     2ae:	63 e0       	ldi	r22, 0x03	; 3
     2b0:	81 e0       	ldi	r24, 0x01	; 1
     2b2:	0e 94 35 05 	call	0xa6a	; 0xa6a <H_LCD_voidSetPosition>
		//print room1 status
		if(room1_status==OFF_STATUS)
     2b6:	11 11       	cpse	r17, r1
     2b8:	05 c0       	rjmp	.+10     	; 0x2c4 <main+0x232>
		{
			H_LCD_voidSendString("off");
     2ba:	8e e7       	ldi	r24, 0x7E	; 126
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	0e 94 20 05 	call	0xa40	; 0xa40 <H_LCD_voidSendString>
     2c2:	04 c0       	rjmp	.+8      	; 0x2cc <main+0x23a>
		}
		else
		{
			H_LCD_voidSendString("on ");
     2c4:	82 e8       	ldi	r24, 0x82	; 130
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	0e 94 20 05 	call	0xa40	; 0xa40 <H_LCD_voidSendString>
		}
		
		H_LCD_voidSetPosition(2,0);
     2cc:	60 e0       	ldi	r22, 0x00	; 0
     2ce:	82 e0       	ldi	r24, 0x02	; 2
     2d0:	0e 94 35 05 	call	0xa6a	; 0xa6a <H_LCD_voidSetPosition>
		H_LCD_voidSendString("R2:");
     2d4:	86 e8       	ldi	r24, 0x86	; 134
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	0e 94 20 05 	call	0xa40	; 0xa40 <H_LCD_voidSendString>
		H_LCD_voidSetPosition(2,3);
     2dc:	63 e0       	ldi	r22, 0x03	; 3
     2de:	82 e0       	ldi	r24, 0x02	; 2
     2e0:	0e 94 35 05 	call	0xa6a	; 0xa6a <H_LCD_voidSetPosition>
		if(room2_status==OFF_STATUS)
     2e4:	01 11       	cpse	r16, r1
     2e6:	05 c0       	rjmp	.+10     	; 0x2f2 <main+0x260>
		{
			H_LCD_voidSendString("off");
     2e8:	8e e7       	ldi	r24, 0x7E	; 126
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	0e 94 20 05 	call	0xa40	; 0xa40 <H_LCD_voidSendString>
     2f0:	04 c0       	rjmp	.+8      	; 0x2fa <main+0x268>
		}
		else
		{
			H_LCD_voidSendString("on ");
     2f2:	82 e8       	ldi	r24, 0x82	; 130
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	0e 94 20 05 	call	0xa40	; 0xa40 <H_LCD_voidSendString>
		}
		
				
		H_LCD_voidSetPosition(1,7);
     2fa:	67 e0       	ldi	r22, 0x07	; 7
     2fc:	81 e0       	ldi	r24, 0x01	; 1
     2fe:	0e 94 35 05 	call	0xa6a	; 0xa6a <H_LCD_voidSetPosition>
		H_LCD_voidSendString("R3:");
     302:	8a e8       	ldi	r24, 0x8A	; 138
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	0e 94 20 05 	call	0xa40	; 0xa40 <H_LCD_voidSendString>
		H_LCD_voidSetPosition(1,10);
     30a:	6a e0       	ldi	r22, 0x0A	; 10
     30c:	81 e0       	ldi	r24, 0x01	; 1
     30e:	0e 94 35 05 	call	0xa6a	; 0xa6a <H_LCD_voidSetPosition>
		if(room3_status==OFF_STATUS)
     312:	f1 10       	cpse	r15, r1
     314:	05 c0       	rjmp	.+10     	; 0x320 <main+0x28e>
		{
			H_LCD_voidSendString("off");
     316:	8e e7       	ldi	r24, 0x7E	; 126
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	0e 94 20 05 	call	0xa40	; 0xa40 <H_LCD_voidSendString>
     31e:	04 c0       	rjmp	.+8      	; 0x328 <main+0x296>
		}
		else
		{
			H_LCD_voidSendString("on ");
     320:	82 e8       	ldi	r24, 0x82	; 130
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	0e 94 20 05 	call	0xa40	; 0xa40 <H_LCD_voidSendString>
		}
		
				
		H_LCD_voidSetPosition(2,7);
     328:	67 e0       	ldi	r22, 0x07	; 7
     32a:	82 e0       	ldi	r24, 0x02	; 2
     32c:	0e 94 35 05 	call	0xa6a	; 0xa6a <H_LCD_voidSetPosition>
		H_LCD_voidSendString("R4:");
     330:	8e e8       	ldi	r24, 0x8E	; 142
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	0e 94 20 05 	call	0xa40	; 0xa40 <H_LCD_voidSendString>
		H_LCD_voidSetPosition(2,10);	
     338:	6a e0       	ldi	r22, 0x0A	; 10
     33a:	82 e0       	ldi	r24, 0x02	; 2
     33c:	0e 94 35 05 	call	0xa6a	; 0xa6a <H_LCD_voidSetPosition>
		if(room4_status==OFF_STATUS)
     340:	e1 10       	cpse	r14, r1
     342:	05 c0       	rjmp	.+10     	; 0x34e <main+0x2bc>
		{
			H_LCD_voidSendString("off");
     344:	8e e7       	ldi	r24, 0x7E	; 126
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	0e 94 20 05 	call	0xa40	; 0xa40 <H_LCD_voidSendString>
     34c:	04 c0       	rjmp	.+8      	; 0x356 <main+0x2c4>
		}
		else
		{
			H_LCD_voidSendString("on ");
     34e:	82 e8       	ldi	r24, 0x82	; 130
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	0e 94 20 05 	call	0xa40	; 0xa40 <H_LCD_voidSendString>
		}		
	    //TV
		H_LCD_voidSetPosition(1,14);
     356:	6e e0       	ldi	r22, 0x0E	; 14
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	0e 94 35 05 	call	0xa6a	; 0xa6a <H_LCD_voidSetPosition>
		H_LCD_voidSendString("TV:");
     35e:	82 e9       	ldi	r24, 0x92	; 146
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	0e 94 20 05 	call	0xa40	; 0xa40 <H_LCD_voidSendString>
		H_LCD_voidSetPosition(1,17);
     366:	61 e1       	ldi	r22, 0x11	; 17
     368:	81 e0       	ldi	r24, 0x01	; 1
     36a:	0e 94 35 05 	call	0xa6a	; 0xa6a <H_LCD_voidSetPosition>
		if(TV_status==OFF_STATUS)
     36e:	d1 10       	cpse	r13, r1
     370:	05 c0       	rjmp	.+10     	; 0x37c <main+0x2ea>
		{
			H_LCD_voidSendString("off");
     372:	8e e7       	ldi	r24, 0x7E	; 126
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	0e 94 20 05 	call	0xa40	; 0xa40 <H_LCD_voidSendString>
     37a:	04 c0       	rjmp	.+8      	; 0x384 <main+0x2f2>
		}
		else
		{
			H_LCD_voidSendString("on ");
     37c:	82 e8       	ldi	r24, 0x82	; 130
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	0e 94 20 05 	call	0xa40	; 0xa40 <H_LCD_voidSendString>
		}		
		
		//AC
		H_LCD_voidSetPosition(2,14);
     384:	6e e0       	ldi	r22, 0x0E	; 14
     386:	82 e0       	ldi	r24, 0x02	; 2
     388:	0e 94 35 05 	call	0xa6a	; 0xa6a <H_LCD_voidSetPosition>
		H_LCD_voidSendString("AC:");
     38c:	86 e9       	ldi	r24, 0x96	; 150
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	0e 94 20 05 	call	0xa40	; 0xa40 <H_LCD_voidSendString>
		H_LCD_voidSetPosition(2,17);
     394:	61 e1       	ldi	r22, 0x11	; 17
     396:	82 e0       	ldi	r24, 0x02	; 2
     398:	0e 94 35 05 	call	0xa6a	; 0xa6a <H_LCD_voidSetPosition>
		if(AC_status==OFF_STATUS)
     39c:	c1 10       	cpse	r12, r1
     39e:	05 c0       	rjmp	.+10     	; 0x3aa <main+0x318>
		{
			H_LCD_voidSendString("off");
     3a0:	8e e7       	ldi	r24, 0x7E	; 126
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	0e 94 20 05 	call	0xa40	; 0xa40 <H_LCD_voidSendString>
     3a8:	04 c0       	rjmp	.+8      	; 0x3b2 <main+0x320>
		}
		else
		{
			H_LCD_voidSendString("on ");
     3aa:	82 e8       	ldi	r24, 0x82	; 130
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	0e 94 20 05 	call	0xa40	; 0xa40 <H_LCD_voidSendString>
		}
		
		H_LCD_voidSetPosition(1,21);
     3b2:	65 e1       	ldi	r22, 0x15	; 21
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	0e 94 35 05 	call	0xa6a	; 0xa6a <H_LCD_voidSetPosition>
		H_LCD_voidSendString("Status:");
     3ba:	8a e9       	ldi	r24, 0x9A	; 154
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	0e 94 20 05 	call	0xa40	; 0xa40 <H_LCD_voidSendString>
		/*---------------------------------Fire System------------------------------------*/
		
		if(temp_sensor_reading<=40 && fire_flag == 0)
     3c2:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <temp_sensor_reading>
     3c6:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <temp_sensor_reading+0x1>
     3ca:	89 97       	sbiw	r24, 0x29	; 41
     3cc:	b0 f4       	brcc	.+44     	; 0x3fa <main+0x368>
     3ce:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <fire_flag>
     3d2:	81 11       	cpse	r24, r1
     3d4:	12 c0       	rjmp	.+36     	; 0x3fa <main+0x368>
		{
			H_LCD_voidSetPosition(1,28);
     3d6:	6c e1       	ldi	r22, 0x1C	; 28
     3d8:	81 e0       	ldi	r24, 0x01	; 1
     3da:	0e 94 35 05 	call	0xa6a	; 0xa6a <H_LCD_voidSetPosition>
			H_LCD_voidSendString("Fine");
     3de:	82 ea       	ldi	r24, 0xA2	; 162
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	0e 94 20 05 	call	0xa40	; 0xa40 <H_LCD_voidSendString>
			H_LED_voidTurnOn(LED_GREEN_PIN);
     3e6:	85 e0       	ldi	r24, 0x05	; 5
     3e8:	0e 94 09 06 	call	0xc12	; 0xc12 <H_LED_voidTurnOn>
			H_LED_voidTurnOff(LED_ORANGE_PIN);
     3ec:	86 e0       	ldi	r24, 0x06	; 6
     3ee:	0e 94 0d 06 	call	0xc1a	; 0xc1a <H_LED_voidTurnOff>
			H_LED_voidTurnOff(LED_RED_PIN);
     3f2:	84 e0       	ldi	r24, 0x04	; 4
     3f4:	0e 94 0d 06 	call	0xc1a	; 0xc1a <H_LED_voidTurnOff>
     3f8:	33 c0       	rjmp	.+102    	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
		}
		else
		{

			if(smoke_reading <=50 && fire_flag == 0)
     3fa:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <smoke_reading>
     3fe:	83 33       	cpi	r24, 0x33	; 51
     400:	b0 f4       	brcc	.+44     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
     402:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <fire_flag>
     406:	81 11       	cpse	r24, r1
     408:	12 c0       	rjmp	.+36     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
			{
				H_LCD_voidSetPosition(1,28);
     40a:	6c e1       	ldi	r22, 0x1C	; 28
     40c:	81 e0       	ldi	r24, 0x01	; 1
     40e:	0e 94 35 05 	call	0xa6a	; 0xa6a <H_LCD_voidSetPosition>
				H_LCD_voidSendString("Heat");
     412:	87 ea       	ldi	r24, 0xA7	; 167
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	0e 94 20 05 	call	0xa40	; 0xa40 <H_LCD_voidSendString>
				H_LED_voidTurnOn(LED_ORANGE_PIN);
     41a:	86 e0       	ldi	r24, 0x06	; 6
     41c:	0e 94 09 06 	call	0xc12	; 0xc12 <H_LED_voidTurnOn>
				H_LED_voidTurnOff(LED_GREEN_PIN);
     420:	85 e0       	ldi	r24, 0x05	; 5
     422:	0e 94 0d 06 	call	0xc1a	; 0xc1a <H_LED_voidTurnOff>
				H_LED_voidTurnOff(LED_RED_PIN);
     426:	84 e0       	ldi	r24, 0x04	; 4
     428:	0e 94 0d 06 	call	0xc1a	; 0xc1a <H_LED_voidTurnOff>
     42c:	19 c0       	rjmp	.+50     	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
			}
			else //if(POT_GetPerc()>50)
			{
				H_LCD_voidSetPosition(1,28);
     42e:	6c e1       	ldi	r22, 0x1C	; 28
     430:	81 e0       	ldi	r24, 0x01	; 1
     432:	0e 94 35 05 	call	0xa6a	; 0xa6a <H_LCD_voidSetPosition>
				H_LCD_voidSendString("Fire");
     436:	8c ea       	ldi	r24, 0xAC	; 172
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	0e 94 20 05 	call	0xa40	; 0xa40 <H_LCD_voidSendString>
				H_LED_voidTurnOn(LED_RED_PIN);
     43e:	84 e0       	ldi	r24, 0x04	; 4
     440:	0e 94 09 06 	call	0xc12	; 0xc12 <H_LED_voidTurnOn>
			    H_LED_voidTurnOff(LED_ORANGE_PIN);
     444:	86 e0       	ldi	r24, 0x06	; 6
     446:	0e 94 0d 06 	call	0xc1a	; 0xc1a <H_LED_voidTurnOff>
			    H_LED_voidTurnOff(LED_GREEN_PIN);
     44a:	85 e0       	ldi	r24, 0x05	; 5
     44c:	0e 94 0d 06 	call	0xc1a	; 0xc1a <H_LED_voidTurnOff>
				H_MOTOR_voidCW(Motor_1);
     450:	80 e0       	ldi	r24, 0x00	; 0
     452:	0e 94 0c 04 	call	0x818	; 0x818 <H_MOTOR_voidCW>
				H_BUZZER_voidTurnOn();
     456:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <H_BUZZER_voidTurnOn>
				fire_flag = 1;				
     45a:	81 e0       	ldi	r24, 0x01	; 1
     45c:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <fire_flag>
			}
		}
		if(Reset_fire_flag==1)
     460:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <Reset_fire_flag>
     464:	81 30       	cpi	r24, 0x01	; 1
     466:	99 f4       	brne	.+38     	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
		{
			H_LCD_voidSetPosition(1,28);
     468:	6c e1       	ldi	r22, 0x1C	; 28
     46a:	0e 94 35 05 	call	0xa6a	; 0xa6a <H_LCD_voidSetPosition>
			H_LCD_voidSendString("Done");
     46e:	81 eb       	ldi	r24, 0xB1	; 177
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	0e 94 20 05 	call	0xa40	; 0xa40 <H_LCD_voidSendString>
			fire_flag=0;
     476:	10 92 d2 00 	sts	0x00D2, r1	; 0x8000d2 <fire_flag>
			Reset_fire_flag=0;
     47a:	10 92 ce 00 	sts	0x00CE, r1	; 0x8000ce <Reset_fire_flag>
			H_MOTOR_voidStop(Motor_1);
     47e:	80 e0       	ldi	r24, 0x00	; 0
     480:	0e 94 1f 04 	call	0x83e	; 0x83e <H_MOTOR_voidStop>
			H_LED_voidTurnOff(LED_RED_PIN);
     484:	84 e0       	ldi	r24, 0x04	; 4
     486:	0e 94 0d 06 	call	0xc1a	; 0xc1a <H_LED_voidTurnOff>
			H_BUZZER_voidTurnOff();
     48a:	0e 94 ed 03 	call	0x7da	; 0x7da <H_BUZZER_voidTurnOff>
		}

		switch(data_recieved)
     48e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <data_recieved>
     492:	84 32       	cpi	r24, 0x24	; 36
     494:	09 f4       	brne	.+2      	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
     496:	cc c0       	rjmp	.+408    	; 0x630 <__EEPROM_REGION_LENGTH__+0x230>
     498:	08 f5       	brcc	.+66     	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
     49a:	85 31       	cpi	r24, 0x15	; 21
     49c:	09 f4       	brne	.+2      	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
     49e:	a4 c0       	rjmp	.+328    	; 0x5e8 <__EEPROM_REGION_LENGTH__+0x1e8>
     4a0:	70 f4       	brcc	.+28     	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
     4a2:	82 31       	cpi	r24, 0x12	; 18
     4a4:	09 f4       	brne	.+2      	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
     4a6:	50 c0       	rjmp	.+160    	; 0x548 <__EEPROM_REGION_LENGTH__+0x148>
     4a8:	18 f4       	brcc	.+6      	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
     4aa:	81 31       	cpi	r24, 0x11	; 17
     4ac:	c9 f1       	breq	.+114    	; 0x520 <__EEPROM_REGION_LENGTH__+0x120>
     4ae:	0a c1       	rjmp	.+532    	; 0x6c4 <__EEPROM_REGION_LENGTH__+0x2c4>
     4b0:	83 31       	cpi	r24, 0x13	; 19
     4b2:	09 f4       	brne	.+2      	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
     4b4:	5d c0       	rjmp	.+186    	; 0x570 <__EEPROM_REGION_LENGTH__+0x170>
     4b6:	84 31       	cpi	r24, 0x14	; 20
     4b8:	09 f4       	brne	.+2      	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
     4ba:	6e c0       	rjmp	.+220    	; 0x598 <__EEPROM_REGION_LENGTH__+0x198>
     4bc:	03 c1       	rjmp	.+518    	; 0x6c4 <__EEPROM_REGION_LENGTH__+0x2c4>
     4be:	81 32       	cpi	r24, 0x21	; 33
     4c0:	09 f4       	brne	.+2      	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
     4c2:	a6 c0       	rjmp	.+332    	; 0x610 <__EEPROM_REGION_LENGTH__+0x210>
     4c4:	20 f4       	brcc	.+8      	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
     4c6:	86 31       	cpi	r24, 0x16	; 22
     4c8:	09 f4       	brne	.+2      	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
     4ca:	7a c0       	rjmp	.+244    	; 0x5c0 <__EEPROM_REGION_LENGTH__+0x1c0>
     4cc:	fb c0       	rjmp	.+502    	; 0x6c4 <__EEPROM_REGION_LENGTH__+0x2c4>
     4ce:	82 32       	cpi	r24, 0x22	; 34
     4d0:	09 f4       	brne	.+2      	; 0x4d4 <__EEPROM_REGION_LENGTH__+0xd4>
     4d2:	a3 c0       	rjmp	.+326    	; 0x61a <__EEPROM_REGION_LENGTH__+0x21a>
     4d4:	83 32       	cpi	r24, 0x23	; 35
     4d6:	09 f4       	brne	.+2      	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
     4d8:	a5 c0       	rjmp	.+330    	; 0x624 <__EEPROM_REGION_LENGTH__+0x224>
     4da:	f4 c0       	rjmp	.+488    	; 0x6c4 <__EEPROM_REGION_LENGTH__+0x2c4>
     4dc:	83 33       	cpi	r24, 0x33	; 51
     4de:	09 f4       	brne	.+2      	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
     4e0:	d0 c0       	rjmp	.+416    	; 0x682 <__EEPROM_REGION_LENGTH__+0x282>
     4e2:	60 f4       	brcc	.+24     	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
     4e4:	86 32       	cpi	r24, 0x26	; 38
     4e6:	09 f4       	brne	.+2      	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
     4e8:	a9 c0       	rjmp	.+338    	; 0x63c <__EEPROM_REGION_LENGTH__+0x23c>
     4ea:	08 f4       	brcc	.+2      	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
     4ec:	ba c0       	rjmp	.+372    	; 0x662 <__EEPROM_REGION_LENGTH__+0x262>
     4ee:	81 33       	cpi	r24, 0x31	; 49
     4f0:	09 f4       	brne	.+2      	; 0x4f4 <__EEPROM_REGION_LENGTH__+0xf4>
     4f2:	bd c0       	rjmp	.+378    	; 0x66e <__EEPROM_REGION_LENGTH__+0x26e>
     4f4:	82 33       	cpi	r24, 0x32	; 50
     4f6:	09 f4       	brne	.+2      	; 0x4fa <__EEPROM_REGION_LENGTH__+0xfa>
     4f8:	bf c0       	rjmp	.+382    	; 0x678 <__EEPROM_REGION_LENGTH__+0x278>
     4fa:	e4 c0       	rjmp	.+456    	; 0x6c4 <__EEPROM_REGION_LENGTH__+0x2c4>
     4fc:	86 33       	cpi	r24, 0x36	; 54
     4fe:	09 f4       	brne	.+2      	; 0x502 <__EEPROM_REGION_LENGTH__+0x102>
     500:	ca c0       	rjmp	.+404    	; 0x696 <__EEPROM_REGION_LENGTH__+0x296>
     502:	38 f4       	brcc	.+14     	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
     504:	84 33       	cpi	r24, 0x34	; 52
     506:	09 f4       	brne	.+2      	; 0x50a <__EEPROM_REGION_LENGTH__+0x10a>
     508:	c1 c0       	rjmp	.+386    	; 0x68c <__EEPROM_REGION_LENGTH__+0x28c>
     50a:	85 33       	cpi	r24, 0x35	; 53
     50c:	09 f4       	brne	.+2      	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
     50e:	ca c0       	rjmp	.+404    	; 0x6a4 <__EEPROM_REGION_LENGTH__+0x2a4>
     510:	d9 c0       	rjmp	.+434    	; 0x6c4 <__EEPROM_REGION_LENGTH__+0x2c4>
     512:	87 33       	cpi	r24, 0x37	; 55
     514:	09 f4       	brne	.+2      	; 0x518 <__EEPROM_REGION_LENGTH__+0x118>
     516:	cb c0       	rjmp	.+406    	; 0x6ae <__EEPROM_REGION_LENGTH__+0x2ae>
     518:	8f 3f       	cpi	r24, 0xFF	; 255
     51a:	09 f4       	brne	.+2      	; 0x51e <__EEPROM_REGION_LENGTH__+0x11e>
     51c:	cf c0       	rjmp	.+414    	; 0x6bc <__EEPROM_REGION_LENGTH__+0x2bc>
     51e:	d2 c0       	rjmp	.+420    	; 0x6c4 <__EEPROM_REGION_LENGTH__+0x2c4>
		{
			//commands related to send the current status back to the sender
			case ROOM1_STATUS:
			if (M_DIO_u8GetPinValue(ROOM1_LED_PIN)==0)//if the led is turned off
     520:	8a e1       	ldi	r24, 0x1A	; 26
     522:	0e 94 8d 07 	call	0xf1a	; 0xf1a <M_DIO_u8GetPinValue>
     526:	81 11       	cpse	r24, r1
     528:	03 c0       	rjmp	.+6      	; 0x530 <__EEPROM_REGION_LENGTH__+0x130>
			{
				data_send = OFF_STATUS;//set the data_recieved as off status
     52a:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <data_send>
     52e:	07 c0       	rjmp	.+14     	; 0x53e <__EEPROM_REGION_LENGTH__+0x13e>
			}
			else if (M_DIO_u8GetPinValue(ROOM1_LED_PIN)==1)//if the led is turned on
     530:	8a e1       	ldi	r24, 0x1A	; 26
     532:	0e 94 8d 07 	call	0xf1a	; 0xf1a <M_DIO_u8GetPinValue>
     536:	81 30       	cpi	r24, 0x01	; 1
     538:	11 f4       	brne	.+4      	; 0x53e <__EEPROM_REGION_LENGTH__+0x13e>
			{
				data_send = ON_STATUS;//set the data_recieved as on status
     53a:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <data_send>
			}
			else
			{
			}
			M_UART_voidSend(data_send);//data_recieved to the transmitter with the status
     53e:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <data_send>
     542:	0e 94 11 09 	call	0x1222	; 0x1222 <M_UART_voidSend>

			break;//break the switch case
     546:	df cd       	rjmp	.-1090   	; 0x106 <main+0x74>
			case ROOM2_STATUS:
			if (M_DIO_u8GetPinValue(ROOM2_LED_PIN)==0)//if the led is turned off
     548:	8b e1       	ldi	r24, 0x1B	; 27
     54a:	0e 94 8d 07 	call	0xf1a	; 0xf1a <M_DIO_u8GetPinValue>
     54e:	81 11       	cpse	r24, r1
     550:	03 c0       	rjmp	.+6      	; 0x558 <__EEPROM_REGION_LENGTH__+0x158>
			{
				data_send = OFF_STATUS;//set the data_recieved as off status
     552:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <data_send>
     556:	07 c0       	rjmp	.+14     	; 0x566 <__EEPROM_REGION_LENGTH__+0x166>
			}
			else if (M_DIO_u8GetPinValue(ROOM2_LED_PIN)==1)//if the led is turned on
     558:	8b e1       	ldi	r24, 0x1B	; 27
     55a:	0e 94 8d 07 	call	0xf1a	; 0xf1a <M_DIO_u8GetPinValue>
     55e:	81 30       	cpi	r24, 0x01	; 1
     560:	11 f4       	brne	.+4      	; 0x566 <__EEPROM_REGION_LENGTH__+0x166>
			{
				data_send = ON_STATUS;//set the data_recieved as on status
     562:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <data_send>
			}
			else
			{
			}
			M_UART_voidSend(data_send);//data_recieved to the transmitter with the status
     566:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <data_send>
     56a:	0e 94 11 09 	call	0x1222	; 0x1222 <M_UART_voidSend>

			break;//break the switch case
     56e:	cb cd       	rjmp	.-1130   	; 0x106 <main+0x74>
			case ROOM3_STATUS:
			if (M_DIO_u8GetPinValue(ROOM3_LED_PIN)==0)//if the led is turned off
     570:	8c e1       	ldi	r24, 0x1C	; 28
     572:	0e 94 8d 07 	call	0xf1a	; 0xf1a <M_DIO_u8GetPinValue>
     576:	81 11       	cpse	r24, r1
     578:	03 c0       	rjmp	.+6      	; 0x580 <__EEPROM_REGION_LENGTH__+0x180>
			{
				data_send = OFF_STATUS;//set the data_recieved as off status
     57a:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <data_send>
     57e:	07 c0       	rjmp	.+14     	; 0x58e <__EEPROM_REGION_LENGTH__+0x18e>
			}
			else if (M_DIO_u8GetPinValue(ROOM3_LED_PIN)==1)//if the led is turned on
     580:	8c e1       	ldi	r24, 0x1C	; 28
     582:	0e 94 8d 07 	call	0xf1a	; 0xf1a <M_DIO_u8GetPinValue>
     586:	81 30       	cpi	r24, 0x01	; 1
     588:	11 f4       	brne	.+4      	; 0x58e <__EEPROM_REGION_LENGTH__+0x18e>
			{
				data_send = ON_STATUS;//set the data_recieved as on status
     58a:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <data_send>
			}
			else
			{
			}
			M_UART_voidSend(data_send);//data_recieved to the transmitter with the status
     58e:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <data_send>
     592:	0e 94 11 09 	call	0x1222	; 0x1222 <M_UART_voidSend>

			break;//break the switch case
     596:	b7 cd       	rjmp	.-1170   	; 0x106 <main+0x74>
			case ROOM4_STATUS:
			if (M_DIO_u8GetPinValue(ROOM4_LED_PIN)==0)//if the led is turned off
     598:	8d e1       	ldi	r24, 0x1D	; 29
     59a:	0e 94 8d 07 	call	0xf1a	; 0xf1a <M_DIO_u8GetPinValue>
     59e:	81 11       	cpse	r24, r1
     5a0:	03 c0       	rjmp	.+6      	; 0x5a8 <__EEPROM_REGION_LENGTH__+0x1a8>
			{
				data_send = OFF_STATUS;//set the data_recieved as off status
     5a2:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <data_send>
     5a6:	07 c0       	rjmp	.+14     	; 0x5b6 <__EEPROM_REGION_LENGTH__+0x1b6>
			}
			else if (M_DIO_u8GetPinValue(ROOM4_LED_PIN)==1)//if the led is turned on
     5a8:	8d e1       	ldi	r24, 0x1D	; 29
     5aa:	0e 94 8d 07 	call	0xf1a	; 0xf1a <M_DIO_u8GetPinValue>
     5ae:	81 30       	cpi	r24, 0x01	; 1
     5b0:	11 f4       	brne	.+4      	; 0x5b6 <__EEPROM_REGION_LENGTH__+0x1b6>
			{
				data_send = ON_STATUS;//set the data_recieved as on status
     5b2:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <data_send>
			}
			else
			{
			}
			M_UART_voidSend(data_send);//data_recieved to the transmitter with the status
     5b6:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <data_send>
     5ba:	0e 94 11 09 	call	0x1222	; 0x1222 <M_UART_voidSend>

			break;//break the switch case
     5be:	a3 cd       	rjmp	.-1210   	; 0x106 <main+0x74>
			case AIR_COND_STATUS:
			if (M_DIO_u8GetPinValue(AIR_COND_LED_PIN)==0)//if the led is turned off
     5c0:	8f e1       	ldi	r24, 0x1F	; 31
     5c2:	0e 94 8d 07 	call	0xf1a	; 0xf1a <M_DIO_u8GetPinValue>
     5c6:	81 11       	cpse	r24, r1
     5c8:	03 c0       	rjmp	.+6      	; 0x5d0 <__EEPROM_REGION_LENGTH__+0x1d0>
			{
				data_send = OFF_STATUS;//set the data_recieved as off status
     5ca:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <data_send>
     5ce:	07 c0       	rjmp	.+14     	; 0x5de <__EEPROM_REGION_LENGTH__+0x1de>
			}
			else if (M_DIO_u8GetPinValue(AIR_COND_LED_PIN)==1)//if the led is turned on
     5d0:	8f e1       	ldi	r24, 0x1F	; 31
     5d2:	0e 94 8d 07 	call	0xf1a	; 0xf1a <M_DIO_u8GetPinValue>
     5d6:	81 30       	cpi	r24, 0x01	; 1
     5d8:	11 f4       	brne	.+4      	; 0x5de <__EEPROM_REGION_LENGTH__+0x1de>
			{
				data_send = ON_STATUS;//set the data_recieved as on status
     5da:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <data_send>
			}
			else
			{
			}
			M_UART_voidSend(data_send);//data_recieved to the transmitter with the status
     5de:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <data_send>
     5e2:	0e 94 11 09 	call	0x1222	; 0x1222 <M_UART_voidSend>
			break;
     5e6:	8f cd       	rjmp	.-1250   	; 0x106 <main+0x74>
			case TV_STATUS:
			if (M_DIO_u8GetPinValue(TV_LED_PIN)==0)//if the led is turned off
     5e8:	8e e1       	ldi	r24, 0x1E	; 30
     5ea:	0e 94 8d 07 	call	0xf1a	; 0xf1a <M_DIO_u8GetPinValue>
     5ee:	81 11       	cpse	r24, r1
     5f0:	03 c0       	rjmp	.+6      	; 0x5f8 <__EEPROM_REGION_LENGTH__+0x1f8>
			{
				data_send = OFF_STATUS;//set the data_recieved as off status
     5f2:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <data_send>
     5f6:	07 c0       	rjmp	.+14     	; 0x606 <__EEPROM_REGION_LENGTH__+0x206>
			}
			else if (M_DIO_u8GetPinValue(TV_LED_PIN)==1)//if the led is turned on
     5f8:	8e e1       	ldi	r24, 0x1E	; 30
     5fa:	0e 94 8d 07 	call	0xf1a	; 0xf1a <M_DIO_u8GetPinValue>
     5fe:	81 30       	cpi	r24, 0x01	; 1
     600:	11 f4       	brne	.+4      	; 0x606 <__EEPROM_REGION_LENGTH__+0x206>
			{
				data_send = ON_STATUS;//set the data_recieved as on status
     602:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <data_send>
			}
			else
			{
			}
			M_UART_voidSend(data_send);//data_recieved to the transmitter with the status
     606:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <data_send>
     60a:	0e 94 11 09 	call	0x1222	; 0x1222 <M_UART_voidSend>
			break;//break the switch case
     60e:	7b cd       	rjmp	.-1290   	; 0x106 <main+0x74>

			/*********************************   TURN ON COMMANDS ********************************/
			case ROOM1_TURN_ON:
			H_LED_voidTurnOn(ROOM1_LED_PIN);//turn on the led of room 1
     610:	8a e1       	ldi	r24, 0x1A	; 26
     612:	0e 94 09 06 	call	0xc12	; 0xc12 <H_LED_voidTurnOn>
			room1_status=ON_STATUS;
     616:	11 e0       	ldi	r17, 0x01	; 1
			break;//break the switch case
     618:	76 cd       	rjmp	.-1300   	; 0x106 <main+0x74>
			case ROOM2_TURN_ON:
			H_LED_voidTurnOn(ROOM2_LED_PIN);//turn on the led of room 2
     61a:	8b e1       	ldi	r24, 0x1B	; 27
     61c:	0e 94 09 06 	call	0xc12	; 0xc12 <H_LED_voidTurnOn>
			room2_status=ON_STATUS;
     620:	01 e0       	ldi	r16, 0x01	; 1
			break;//break the switch case
     622:	71 cd       	rjmp	.-1310   	; 0x106 <main+0x74>
			case ROOM3_TURN_ON:
			H_LED_voidTurnOn(ROOM3_LED_PIN);//turn on the led of room 3
     624:	8c e1       	ldi	r24, 0x1C	; 28
     626:	0e 94 09 06 	call	0xc12	; 0xc12 <H_LED_voidTurnOn>
			room3_status=ON_STATUS;
     62a:	ff 24       	eor	r15, r15
     62c:	f3 94       	inc	r15
			break;//break the switch case
     62e:	6b cd       	rjmp	.-1322   	; 0x106 <main+0x74>
			case ROOM4_TURN_ON:
			H_LED_voidTurnOn(ROOM4_LED_PIN);//turn on the led of room 4
     630:	8d e1       	ldi	r24, 0x1D	; 29
     632:	0e 94 09 06 	call	0xc12	; 0xc12 <H_LED_voidTurnOn>
			room4_status=ON_STATUS;
     636:	ee 24       	eor	r14, r14
     638:	e3 94       	inc	r14
			break;//break the switch case
     63a:	65 cd       	rjmp	.-1334   	; 0x106 <main+0x74>
			case AIR_COND_TURN_ON:
			M_Timer0_start();
     63c:	0e 94 89 08 	call	0x1112	; 0x1112 <M_Timer0_start>
			if(temp_sensor_reading>required_temperature)
     640:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	20 91 b8 00 	lds	r18, 0x00B8	; 0x8000b8 <temp_sensor_reading>
     64a:	30 91 b9 00 	lds	r19, 0x00B9	; 0x8000b9 <temp_sensor_reading+0x1>
     64e:	82 17       	cp	r24, r18
     650:	93 07       	cpc	r25, r19
     652:	08 f0       	brcs	.+2      	; 0x656 <__EEPROM_REGION_LENGTH__+0x256>
     654:	58 cd       	rjmp	.-1360   	; 0x106 <main+0x74>
			{
				H_LED_voidTurnOn(AIR_COND_LED_PIN);//turn on the led of air conditioning
     656:	8f e1       	ldi	r24, 0x1F	; 31
     658:	0e 94 09 06 	call	0xc12	; 0xc12 <H_LED_voidTurnOn>
				AC_status=ON_STATUS;				
     65c:	cc 24       	eor	r12, r12
     65e:	c3 94       	inc	r12
     660:	52 cd       	rjmp	.-1372   	; 0x106 <main+0x74>
			}

			break;//break the switch case
			case TV_TURN_ON:
			H_LED_voidTurnOn(TV_LED_PIN);//turn on the led of the TV
     662:	8e e1       	ldi	r24, 0x1E	; 30
     664:	0e 94 09 06 	call	0xc12	; 0xc12 <H_LED_voidTurnOn>
			TV_status=ON_STATUS;
     668:	dd 24       	eor	r13, r13
     66a:	d3 94       	inc	r13
			break;//break the switch case
     66c:	4c cd       	rjmp	.-1384   	; 0x106 <main+0x74>

			/*********************************   TURN OFF COMMANDS ********************************/
			case ROOM1_TURN_OFF:
			H_LED_voidTurnOff(ROOM1_LED_PIN);//turn off the led of room 1
     66e:	8a e1       	ldi	r24, 0x1A	; 26
     670:	0e 94 0d 06 	call	0xc1a	; 0xc1a <H_LED_voidTurnOff>
			room1_status=OFF_STATUS;
     674:	10 e0       	ldi	r17, 0x00	; 0
			break;//break the switch case
     676:	47 cd       	rjmp	.-1394   	; 0x106 <main+0x74>
			case ROOM2_TURN_OFF:
			H_LED_voidTurnOff(ROOM2_LED_PIN);//turn off the led of room 2
     678:	8b e1       	ldi	r24, 0x1B	; 27
     67a:	0e 94 0d 06 	call	0xc1a	; 0xc1a <H_LED_voidTurnOff>
			room2_status=OFF_STATUS;
     67e:	00 e0       	ldi	r16, 0x00	; 0
			break;//break the switch case
     680:	42 cd       	rjmp	.-1404   	; 0x106 <main+0x74>
			case ROOM3_TURN_OFF:
			H_LED_voidTurnOff(ROOM3_LED_PIN);//turn off the led of room 3
     682:	8c e1       	ldi	r24, 0x1C	; 28
     684:	0e 94 0d 06 	call	0xc1a	; 0xc1a <H_LED_voidTurnOff>
			room3_status=OFF_STATUS;
     688:	f1 2c       	mov	r15, r1
			break;//break the switch case
     68a:	3d cd       	rjmp	.-1414   	; 0x106 <main+0x74>
			case ROOM4_TURN_OFF:
			H_LED_voidTurnOff(ROOM4_LED_PIN);//turn off the led of room 4
     68c:	8d e1       	ldi	r24, 0x1D	; 29
     68e:	0e 94 0d 06 	call	0xc1a	; 0xc1a <H_LED_voidTurnOff>
			room4_status=OFF_STATUS;
     692:	e1 2c       	mov	r14, r1
			break;//break the switch case
     694:	38 cd       	rjmp	.-1424   	; 0x106 <main+0x74>
			case AIR_COND_TURN_OFF:
			M_Timer0_stop();
     696:	0e 94 91 08 	call	0x1122	; 0x1122 <M_Timer0_stop>
			H_LED_voidTurnOff(AIR_COND_LED_PIN);//turn off the led of air conditioning
     69a:	8f e1       	ldi	r24, 0x1F	; 31
     69c:	0e 94 0d 06 	call	0xc1a	; 0xc1a <H_LED_voidTurnOff>
			AC_status=OFF_STATUS;
     6a0:	c1 2c       	mov	r12, r1
			break;//break the switch case
     6a2:	31 cd       	rjmp	.-1438   	; 0x106 <main+0x74>
			case TV_TURN_OFF:
			H_LED_voidTurnOff(TV_LED_PIN);//turn off the led of the TV
     6a4:	8e e1       	ldi	r24, 0x1E	; 30
     6a6:	0e 94 0d 06 	call	0xc1a	; 0xc1a <H_LED_voidTurnOff>
			TV_status=OFF_STATUS;
     6aa:	d1 2c       	mov	r13, r1
			break;//break the switch case
     6ac:	2c cd       	rjmp	.-1448   	; 0x106 <main+0x74>
            case RESET_FIRE_ALARM:
			Reset_fire_flag=1;
     6ae:	81 e0       	ldi	r24, 0x01	; 1
     6b0:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <Reset_fire_flag>
			data_recieved = NO_ACTION;
     6b4:	8f ef       	ldi	r24, 0xFF	; 255
     6b6:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <data_recieved>
			break;
     6ba:	25 cd       	rjmp	.-1462   	; 0x106 <main+0x74>
			case NO_ACTION:
			data_recieved=NO_ACTION;
     6bc:	8f ef       	ldi	r24, 0xFF	; 255
     6be:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <data_recieved>
			break;
     6c2:	21 cd       	rjmp	.-1470   	; 0x106 <main+0x74>
			/*********************************   Set temperature   ********************************/
            default:
			required_temperature = data_recieved;
     6c4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			data_recieved=NO_ACTION;
     6c8:	8f ef       	ldi	r24, 0xFF	; 255
     6ca:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <data_recieved>
			break;//break the switch case
     6ce:	1b cd       	rjmp	.-1482   	; 0x106 <main+0x74>

000006d0 <__vector_11>:
		}
    }
}

ISR(TIMER0_OVF_vect)
{
     6d0:	1f 92       	push	r1
     6d2:	0f 92       	push	r0
     6d4:	0f b6       	in	r0, 0x3f	; 63
     6d6:	0f 92       	push	r0
     6d8:	11 24       	eor	r1, r1
     6da:	2f 93       	push	r18
     6dc:	3f 93       	push	r19
     6de:	4f 93       	push	r20
     6e0:	5f 93       	push	r21
     6e2:	6f 93       	push	r22
     6e4:	7f 93       	push	r23
     6e6:	8f 93       	push	r24
     6e8:	9f 93       	push	r25
     6ea:	af 93       	push	r26
     6ec:	bf 93       	push	r27
     6ee:	ef 93       	push	r30
     6f0:	ff 93       	push	r31
	counter++;//count the ticks of the timer zero
     6f2:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <counter>
     6f6:	8f 5f       	subi	r24, 0xFF	; 255
     6f8:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <counter>
	if(counter>=HYSTERESIS)//do that code every 10 ticks
     6fc:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <counter>
     700:	86 30       	cpi	r24, 0x06	; 6
     702:	08 f4       	brcc	.+2      	; 0x706 <__vector_11+0x36>
     704:	4f c0       	rjmp	.+158    	; 0x7a4 <__vector_11+0xd4>
	{
		counter=0;//clear the counter of ticks
     706:	10 92 b7 00 	sts	0x00B7, r1	; 0x8000b7 <counter>
		temp_sensor_reading=(H_LM35_GetTemp()/10);//read the temperature from the temperature sensor connected to the ADC of the micro controller
     70a:	0e 94 22 06 	call	0xc44	; 0xc44 <H_LM35_GetTemp>
     70e:	9c 01       	movw	r18, r24
     710:	ad ec       	ldi	r26, 0xCD	; 205
     712:	bc ec       	ldi	r27, 0xCC	; 204
     714:	0e 94 b0 09 	call	0x1360	; 0x1360 <__umulhisi3>
     718:	96 95       	lsr	r25
     71a:	87 95       	ror	r24
     71c:	96 95       	lsr	r25
     71e:	87 95       	ror	r24
     720:	96 95       	lsr	r25
     722:	87 95       	ror	r24
     724:	90 93 b9 00 	sts	0x00B9, r25	; 0x8000b9 <temp_sensor_reading+0x1>
     728:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <temp_sensor_reading>
		if (temp_sensor_reading>=(required_temperature+1))//do that code if the read temperature if greater than required temperature by one or more
     72c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     730:	90 e0       	ldi	r25, 0x00	; 0
     732:	01 96       	adiw	r24, 0x01	; 1
     734:	20 91 b8 00 	lds	r18, 0x00B8	; 0x8000b8 <temp_sensor_reading>
     738:	30 91 b9 00 	lds	r19, 0x00B9	; 0x8000b9 <temp_sensor_reading+0x1>
     73c:	28 17       	cp	r18, r24
     73e:	39 07       	cpc	r19, r25
     740:	38 f0       	brcs	.+14     	; 0x750 <__vector_11+0x80>
		{
			H_LED_voidTurnOn(AIR_COND_LED_PIN);//turn on the led of the air conditioning
     742:	8f e1       	ldi	r24, 0x1F	; 31
     744:	0e 94 09 06 	call	0xc12	; 0xc12 <H_LED_voidTurnOn>
			last_air_conditioning_value=AIR_CONDTIONING_ON;//save the value of the state of the air conditioning
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__data_end>
     74e:	2a c0       	rjmp	.+84     	; 0x7a4 <__vector_11+0xd4>
		}
		else if (temp_sensor_reading<=(required_temperature-1))//do that code if the read temperature if lesser than required temperature by one or more
     750:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	01 97       	sbiw	r24, 0x01	; 1
     758:	20 91 b8 00 	lds	r18, 0x00B8	; 0x8000b8 <temp_sensor_reading>
     75c:	30 91 b9 00 	lds	r19, 0x00B9	; 0x8000b9 <temp_sensor_reading+0x1>
     760:	82 17       	cp	r24, r18
     762:	93 07       	cpc	r25, r19
     764:	30 f0       	brcs	.+12     	; 0x772 <__vector_11+0xa2>
		{
			H_LED_voidTurnOff(AIR_COND_LED_PIN);//turn off the led of the air conditioning
     766:	8f e1       	ldi	r24, 0x1F	; 31
     768:	0e 94 0d 06 	call	0xc1a	; 0xc1a <H_LED_voidTurnOff>
			last_air_conditioning_value=AIR_CONDTIONING_OFF;//save the value of the state of the air conditioning
     76c:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__data_end>
     770:	19 c0       	rjmp	.+50     	; 0x7a4 <__vector_11+0xd4>
		}
		else if (required_temperature==temp_sensor_reading)//do that code if the read temperature is equal to the required temperature
     772:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	20 91 b8 00 	lds	r18, 0x00B8	; 0x8000b8 <temp_sensor_reading>
     77c:	30 91 b9 00 	lds	r19, 0x00B9	; 0x8000b9 <temp_sensor_reading+0x1>
     780:	82 17       	cp	r24, r18
     782:	93 07       	cpc	r25, r19
     784:	79 f4       	brne	.+30     	; 0x7a4 <__vector_11+0xd4>
		{
			if (last_air_conditioning_value==AIR_CONDTIONING_ON)//in the case of the last saved status of the air conditioning was on
     786:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <__data_end>
     78a:	81 30       	cpi	r24, 0x01	; 1
     78c:	21 f4       	brne	.+8      	; 0x796 <__vector_11+0xc6>
			{
				H_LED_voidTurnOn(AIR_COND_LED_PIN);//turn on the led of the air conditioning
     78e:	8f e1       	ldi	r24, 0x1F	; 31
     790:	0e 94 09 06 	call	0xc12	; 0xc12 <H_LED_voidTurnOn>
     794:	07 c0       	rjmp	.+14     	; 0x7a4 <__vector_11+0xd4>
			}
			else if (last_air_conditioning_value==AIR_CONDTIONING_OFF)//in the case of the last saved status of the air conditioning was off
     796:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <__data_end>
     79a:	81 11       	cpse	r24, r1
     79c:	03 c0       	rjmp	.+6      	; 0x7a4 <__vector_11+0xd4>
			{
				H_LED_voidTurnOff(AIR_COND_LED_PIN);//turn off the led of the air conditioning
     79e:	8f e1       	ldi	r24, 0x1F	; 31
     7a0:	0e 94 0d 06 	call	0xc1a	; 0xc1a <H_LED_voidTurnOff>
			}
		}
	}
     7a4:	ff 91       	pop	r31
     7a6:	ef 91       	pop	r30
     7a8:	bf 91       	pop	r27
     7aa:	af 91       	pop	r26
     7ac:	9f 91       	pop	r25
     7ae:	8f 91       	pop	r24
     7b0:	7f 91       	pop	r23
     7b2:	6f 91       	pop	r22
     7b4:	5f 91       	pop	r21
     7b6:	4f 91       	pop	r20
     7b8:	3f 91       	pop	r19
     7ba:	2f 91       	pop	r18
     7bc:	0f 90       	pop	r0
     7be:	0f be       	out	0x3f, r0	; 63
     7c0:	0f 90       	pop	r0
     7c2:	1f 90       	pop	r1
     7c4:	18 95       	reti

000007c6 <H_BUZZER_voidInit>:
#include "BUZZER_configuration.h"
#include "BUZZER_interface.h"

void H_BUZZER_voidInit(void)
{
	M_DIO_voidSetPinDirection(BUZZER_PIN, OUTPUT);
     7c6:	61 e0       	ldi	r22, 0x01	; 1
     7c8:	8f e0       	ldi	r24, 0x0F	; 15
     7ca:	0e 94 7f 06 	call	0xcfe	; 0xcfe <M_DIO_voidSetPinDirection>
     7ce:	08 95       	ret

000007d0 <H_BUZZER_voidTurnOn>:
}
void H_BUZZER_voidTurnOn(void)
{
	M_DIO_voidSetPinValue(BUZZER_PIN, HIGH);
     7d0:	61 e0       	ldi	r22, 0x01	; 1
     7d2:	8f e0       	ldi	r24, 0x0F	; 15
     7d4:	0e 94 06 07 	call	0xe0c	; 0xe0c <M_DIO_voidSetPinValue>
     7d8:	08 95       	ret

000007da <H_BUZZER_voidTurnOff>:
}
void H_BUZZER_voidTurnOff(void)
{
	M_DIO_voidSetPinValue(BUZZER_PIN, LOW);
     7da:	60 e0       	ldi	r22, 0x00	; 0
     7dc:	8f e0       	ldi	r24, 0x0F	; 15
     7de:	0e 94 06 07 	call	0xe0c	; 0xe0c <M_DIO_voidSetPinValue>
     7e2:	08 95       	ret

000007e4 <H_MOTOR_voidInit>:
void H_MOTOR_voidCCW(MOTOR_type motor)
{
	M_DIO_voidSetPinValue(MotorPinsArray[motor][IN1],LOW);
	M_DIO_voidSetPinValue(MotorPinsArray[motor][IN2],HIGH);

}
     7e4:	1f 93       	push	r17
     7e6:	cf 93       	push	r28
     7e8:	df 93       	push	r29
     7ea:	10 e0       	ldi	r17, 0x00	; 0
     7ec:	0f c0       	rjmp	.+30     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     7ee:	c1 2f       	mov	r28, r17
     7f0:	d0 e0       	ldi	r29, 0x00	; 0
     7f2:	cc 0f       	add	r28, r28
     7f4:	dd 1f       	adc	r29, r29
     7f6:	ce 59       	subi	r28, 0x9E	; 158
     7f8:	df 4f       	sbci	r29, 0xFF	; 255
     7fa:	61 e0       	ldi	r22, 0x01	; 1
     7fc:	88 81       	ld	r24, Y
     7fe:	0e 94 7f 06 	call	0xcfe	; 0xcfe <M_DIO_voidSetPinDirection>
     802:	61 e0       	ldi	r22, 0x01	; 1
     804:	89 81       	ldd	r24, Y+1	; 0x01
     806:	0e 94 7f 06 	call	0xcfe	; 0xcfe <M_DIO_voidSetPinDirection>
     80a:	1f 5f       	subi	r17, 0xFF	; 255
     80c:	14 30       	cpi	r17, 0x04	; 4
     80e:	78 f3       	brcs	.-34     	; 0x7ee <H_MOTOR_voidInit+0xa>
     810:	df 91       	pop	r29
     812:	cf 91       	pop	r28
     814:	1f 91       	pop	r17
     816:	08 95       	ret

00000818 <H_MOTOR_voidCW>:
     818:	cf 93       	push	r28
     81a:	df 93       	push	r29
     81c:	c8 2f       	mov	r28, r24
     81e:	d0 e0       	ldi	r29, 0x00	; 0
     820:	cc 0f       	add	r28, r28
     822:	dd 1f       	adc	r29, r29
     824:	ce 59       	subi	r28, 0x9E	; 158
     826:	df 4f       	sbci	r29, 0xFF	; 255
     828:	61 e0       	ldi	r22, 0x01	; 1
     82a:	88 81       	ld	r24, Y
     82c:	0e 94 06 07 	call	0xe0c	; 0xe0c <M_DIO_voidSetPinValue>
     830:	60 e0       	ldi	r22, 0x00	; 0
     832:	89 81       	ldd	r24, Y+1	; 0x01
     834:	0e 94 06 07 	call	0xe0c	; 0xe0c <M_DIO_voidSetPinValue>
     838:	df 91       	pop	r29
     83a:	cf 91       	pop	r28
     83c:	08 95       	ret

0000083e <H_MOTOR_voidStop>:
void H_MOTOR_voidStop(MOTOR_type motor)
{
     83e:	cf 93       	push	r28
     840:	df 93       	push	r29
	M_DIO_voidSetPinValue(MotorPinsArray[motor][IN1],HIGH);
     842:	c8 2f       	mov	r28, r24
     844:	d0 e0       	ldi	r29, 0x00	; 0
     846:	cc 0f       	add	r28, r28
     848:	dd 1f       	adc	r29, r29
     84a:	ce 59       	subi	r28, 0x9E	; 158
     84c:	df 4f       	sbci	r29, 0xFF	; 255
     84e:	61 e0       	ldi	r22, 0x01	; 1
     850:	88 81       	ld	r24, Y
     852:	0e 94 06 07 	call	0xe0c	; 0xe0c <M_DIO_voidSetPinValue>
	M_DIO_voidSetPinValue(MotorPinsArray[motor][IN2],HIGH);
     856:	61 e0       	ldi	r22, 0x01	; 1
     858:	89 81       	ldd	r24, Y+1	; 0x01
     85a:	0e 94 06 07 	call	0xe0c	; 0xe0c <M_DIO_voidSetPinValue>
}
     85e:	df 91       	pop	r29
     860:	cf 91       	pop	r28
     862:	08 95       	ret

00000864 <H_LCD_voidSendCommand>:
#include "LCD_configuration.h"
#include "LCD_interface.h"
/*---------------------------- Software Interfaces ---------------------------*/

#if  LCD_MODE == LCD_4BIT
void H_LCD_voidSendCommand(u8 copy_u8command) {
     864:	cf 93       	push	r28
     866:	c8 2f       	mov	r28, r24
	M_DIO_voidSetPinValue(RS_PIN, LOW); //RS=0
     868:	60 e0       	ldi	r22, 0x00	; 0
     86a:	83 e0       	ldi	r24, 0x03	; 3
     86c:	0e 94 06 07 	call	0xe0c	; 0xe0c <M_DIO_voidSetPinValue>
	M_DIO_voidSetPinValue(D4_PIN, READ_BIT(copy_u8command, 4));
     870:	c4 fb       	bst	r28, 4
     872:	66 27       	eor	r22, r22
     874:	60 f9       	bld	r22, 0
     876:	88 e0       	ldi	r24, 0x08	; 8
     878:	0e 94 06 07 	call	0xe0c	; 0xe0c <M_DIO_voidSetPinValue>
	M_DIO_voidSetPinValue(D5_PIN, READ_BIT(copy_u8command, 5));
     87c:	c5 fb       	bst	r28, 5
     87e:	66 27       	eor	r22, r22
     880:	60 f9       	bld	r22, 0
     882:	89 e0       	ldi	r24, 0x09	; 9
     884:	0e 94 06 07 	call	0xe0c	; 0xe0c <M_DIO_voidSetPinValue>
	M_DIO_voidSetPinValue(D6_PIN, READ_BIT(copy_u8command, 6));
     888:	c6 fb       	bst	r28, 6
     88a:	66 27       	eor	r22, r22
     88c:	60 f9       	bld	r22, 0
     88e:	8a e0       	ldi	r24, 0x0A	; 10
     890:	0e 94 06 07 	call	0xe0c	; 0xe0c <M_DIO_voidSetPinValue>
	M_DIO_voidSetPinValue(D7_PIN, READ_BIT(copy_u8command, 7));
     894:	6c 2f       	mov	r22, r28
     896:	66 1f       	adc	r22, r22
     898:	66 27       	eor	r22, r22
     89a:	66 1f       	adc	r22, r22
     89c:	8c e0       	ldi	r24, 0x0C	; 12
     89e:	0e 94 06 07 	call	0xe0c	; 0xe0c <M_DIO_voidSetPinValue>

	M_DIO_voidSetPinValue(EN_PIN, HIGH);
     8a2:	61 e0       	ldi	r22, 0x01	; 1
     8a4:	82 e0       	ldi	r24, 0x02	; 2
     8a6:	0e 94 06 07 	call	0xe0c	; 0xe0c <M_DIO_voidSetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8aa:	8f ec       	ldi	r24, 0xCF	; 207
     8ac:	97 e0       	ldi	r25, 0x07	; 7
     8ae:	01 97       	sbiw	r24, 0x01	; 1
     8b0:	f1 f7       	brne	.-4      	; 0x8ae <H_LCD_voidSendCommand+0x4a>
     8b2:	00 c0       	rjmp	.+0      	; 0x8b4 <H_LCD_voidSendCommand+0x50>
     8b4:	00 00       	nop
	_delay_ms(1);
	M_DIO_voidSetPinValue(EN_PIN, LOW);
     8b6:	60 e0       	ldi	r22, 0x00	; 0
     8b8:	82 e0       	ldi	r24, 0x02	; 2
     8ba:	0e 94 06 07 	call	0xe0c	; 0xe0c <M_DIO_voidSetPinValue>

	M_DIO_voidSetPinValue(D4_PIN, READ_BIT(copy_u8command, 0));
     8be:	6c 2f       	mov	r22, r28
     8c0:	61 70       	andi	r22, 0x01	; 1
     8c2:	88 e0       	ldi	r24, 0x08	; 8
     8c4:	0e 94 06 07 	call	0xe0c	; 0xe0c <M_DIO_voidSetPinValue>
	M_DIO_voidSetPinValue(D5_PIN, READ_BIT(copy_u8command, 1));
     8c8:	c1 fb       	bst	r28, 1
     8ca:	66 27       	eor	r22, r22
     8cc:	60 f9       	bld	r22, 0
     8ce:	89 e0       	ldi	r24, 0x09	; 9
     8d0:	0e 94 06 07 	call	0xe0c	; 0xe0c <M_DIO_voidSetPinValue>
	M_DIO_voidSetPinValue(D6_PIN, READ_BIT(copy_u8command, 2));
     8d4:	c2 fb       	bst	r28, 2
     8d6:	66 27       	eor	r22, r22
     8d8:	60 f9       	bld	r22, 0
     8da:	8a e0       	ldi	r24, 0x0A	; 10
     8dc:	0e 94 06 07 	call	0xe0c	; 0xe0c <M_DIO_voidSetPinValue>
	M_DIO_voidSetPinValue(D7_PIN, READ_BIT(copy_u8command, 3));
     8e0:	c3 fb       	bst	r28, 3
     8e2:	66 27       	eor	r22, r22
     8e4:	60 f9       	bld	r22, 0
     8e6:	8c e0       	ldi	r24, 0x0C	; 12
     8e8:	0e 94 06 07 	call	0xe0c	; 0xe0c <M_DIO_voidSetPinValue>

	M_DIO_voidSetPinValue(EN_PIN, HIGH);
     8ec:	61 e0       	ldi	r22, 0x01	; 1
     8ee:	82 e0       	ldi	r24, 0x02	; 2
     8f0:	0e 94 06 07 	call	0xe0c	; 0xe0c <M_DIO_voidSetPinValue>
     8f4:	8f ec       	ldi	r24, 0xCF	; 207
     8f6:	97 e0       	ldi	r25, 0x07	; 7
     8f8:	01 97       	sbiw	r24, 0x01	; 1
     8fa:	f1 f7       	brne	.-4      	; 0x8f8 <H_LCD_voidSendCommand+0x94>
     8fc:	00 c0       	rjmp	.+0      	; 0x8fe <H_LCD_voidSendCommand+0x9a>
     8fe:	00 00       	nop
	_delay_ms(1);
	M_DIO_voidSetPinValue(EN_PIN, LOW);
     900:	60 e0       	ldi	r22, 0x00	; 0
     902:	82 e0       	ldi	r24, 0x02	; 2
     904:	0e 94 06 07 	call	0xe0c	; 0xe0c <M_DIO_voidSetPinValue>
     908:	8f ec       	ldi	r24, 0xCF	; 207
     90a:	97 e0       	ldi	r25, 0x07	; 7
     90c:	01 97       	sbiw	r24, 0x01	; 1
     90e:	f1 f7       	brne	.-4      	; 0x90c <H_LCD_voidSendCommand+0xa8>
     910:	00 c0       	rjmp	.+0      	; 0x912 <H_LCD_voidSendCommand+0xae>
     912:	00 00       	nop
	_delay_ms(1);
}
     914:	cf 91       	pop	r28
     916:	08 95       	ret

00000918 <H_LCD_voidSendData>:
void H_LCD_voidSendData(u8 copy_u8data) {
     918:	cf 93       	push	r28
     91a:	c8 2f       	mov	r28, r24
	M_DIO_voidSetPinValue(RS_PIN, HIGH); //RS=1
     91c:	61 e0       	ldi	r22, 0x01	; 1
     91e:	83 e0       	ldi	r24, 0x03	; 3
     920:	0e 94 06 07 	call	0xe0c	; 0xe0c <M_DIO_voidSetPinValue>
	M_DIO_voidSetPinValue(D4_PIN, READ_BIT(copy_u8data, 4));
     924:	c4 fb       	bst	r28, 4
     926:	66 27       	eor	r22, r22
     928:	60 f9       	bld	r22, 0
     92a:	88 e0       	ldi	r24, 0x08	; 8
     92c:	0e 94 06 07 	call	0xe0c	; 0xe0c <M_DIO_voidSetPinValue>
	M_DIO_voidSetPinValue(D5_PIN, READ_BIT(copy_u8data, 5));
     930:	c5 fb       	bst	r28, 5
     932:	66 27       	eor	r22, r22
     934:	60 f9       	bld	r22, 0
     936:	89 e0       	ldi	r24, 0x09	; 9
     938:	0e 94 06 07 	call	0xe0c	; 0xe0c <M_DIO_voidSetPinValue>
	M_DIO_voidSetPinValue(D6_PIN, READ_BIT(copy_u8data, 6));
     93c:	c6 fb       	bst	r28, 6
     93e:	66 27       	eor	r22, r22
     940:	60 f9       	bld	r22, 0
     942:	8a e0       	ldi	r24, 0x0A	; 10
     944:	0e 94 06 07 	call	0xe0c	; 0xe0c <M_DIO_voidSetPinValue>
	M_DIO_voidSetPinValue(D7_PIN, READ_BIT(copy_u8data, 7));
     948:	6c 2f       	mov	r22, r28
     94a:	66 1f       	adc	r22, r22
     94c:	66 27       	eor	r22, r22
     94e:	66 1f       	adc	r22, r22
     950:	8c e0       	ldi	r24, 0x0C	; 12
     952:	0e 94 06 07 	call	0xe0c	; 0xe0c <M_DIO_voidSetPinValue>

	M_DIO_voidSetPinValue(EN_PIN, HIGH);
     956:	61 e0       	ldi	r22, 0x01	; 1
     958:	82 e0       	ldi	r24, 0x02	; 2
     95a:	0e 94 06 07 	call	0xe0c	; 0xe0c <M_DIO_voidSetPinValue>
     95e:	8f ec       	ldi	r24, 0xCF	; 207
     960:	97 e0       	ldi	r25, 0x07	; 7
     962:	01 97       	sbiw	r24, 0x01	; 1
     964:	f1 f7       	brne	.-4      	; 0x962 <H_LCD_voidSendData+0x4a>
     966:	00 c0       	rjmp	.+0      	; 0x968 <H_LCD_voidSendData+0x50>
     968:	00 00       	nop
	_delay_ms(1);
	M_DIO_voidSetPinValue(EN_PIN, LOW);
     96a:	60 e0       	ldi	r22, 0x00	; 0
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	0e 94 06 07 	call	0xe0c	; 0xe0c <M_DIO_voidSetPinValue>

	M_DIO_voidSetPinValue(D4_PIN, READ_BIT(copy_u8data, 0));
     972:	6c 2f       	mov	r22, r28
     974:	61 70       	andi	r22, 0x01	; 1
     976:	88 e0       	ldi	r24, 0x08	; 8
     978:	0e 94 06 07 	call	0xe0c	; 0xe0c <M_DIO_voidSetPinValue>
	M_DIO_voidSetPinValue(D5_PIN, READ_BIT(copy_u8data, 1));
     97c:	c1 fb       	bst	r28, 1
     97e:	66 27       	eor	r22, r22
     980:	60 f9       	bld	r22, 0
     982:	89 e0       	ldi	r24, 0x09	; 9
     984:	0e 94 06 07 	call	0xe0c	; 0xe0c <M_DIO_voidSetPinValue>
	M_DIO_voidSetPinValue(D6_PIN, READ_BIT(copy_u8data, 2));
     988:	c2 fb       	bst	r28, 2
     98a:	66 27       	eor	r22, r22
     98c:	60 f9       	bld	r22, 0
     98e:	8a e0       	ldi	r24, 0x0A	; 10
     990:	0e 94 06 07 	call	0xe0c	; 0xe0c <M_DIO_voidSetPinValue>
	M_DIO_voidSetPinValue(D7_PIN, READ_BIT(copy_u8data, 3));
     994:	c3 fb       	bst	r28, 3
     996:	66 27       	eor	r22, r22
     998:	60 f9       	bld	r22, 0
     99a:	8c e0       	ldi	r24, 0x0C	; 12
     99c:	0e 94 06 07 	call	0xe0c	; 0xe0c <M_DIO_voidSetPinValue>

	M_DIO_voidSetPinValue(EN_PIN, HIGH);
     9a0:	61 e0       	ldi	r22, 0x01	; 1
     9a2:	82 e0       	ldi	r24, 0x02	; 2
     9a4:	0e 94 06 07 	call	0xe0c	; 0xe0c <M_DIO_voidSetPinValue>
     9a8:	8f ec       	ldi	r24, 0xCF	; 207
     9aa:	97 e0       	ldi	r25, 0x07	; 7
     9ac:	01 97       	sbiw	r24, 0x01	; 1
     9ae:	f1 f7       	brne	.-4      	; 0x9ac <H_LCD_voidSendData+0x94>
     9b0:	00 c0       	rjmp	.+0      	; 0x9b2 <H_LCD_voidSendData+0x9a>
     9b2:	00 00       	nop
	_delay_ms(1);
	M_DIO_voidSetPinValue(EN_PIN, LOW);
     9b4:	60 e0       	ldi	r22, 0x00	; 0
     9b6:	82 e0       	ldi	r24, 0x02	; 2
     9b8:	0e 94 06 07 	call	0xe0c	; 0xe0c <M_DIO_voidSetPinValue>
     9bc:	8f ec       	ldi	r24, 0xCF	; 207
     9be:	97 e0       	ldi	r25, 0x07	; 7
     9c0:	01 97       	sbiw	r24, 0x01	; 1
     9c2:	f1 f7       	brne	.-4      	; 0x9c0 <H_LCD_voidSendData+0xa8>
     9c4:	00 c0       	rjmp	.+0      	; 0x9c6 <H_LCD_voidSendData+0xae>
     9c6:	00 00       	nop
	_delay_ms(1);

}
     9c8:	cf 91       	pop	r28
     9ca:	08 95       	ret

000009cc <H_LCD_voidInit>:
void H_LCD_voidInit(void) {
	//intialize RS & EN as output
	M_DIO_voidSetPinDirection(RS_PIN, OUTPUT);
     9cc:	61 e0       	ldi	r22, 0x01	; 1
     9ce:	83 e0       	ldi	r24, 0x03	; 3
     9d0:	0e 94 7f 06 	call	0xcfe	; 0xcfe <M_DIO_voidSetPinDirection>
	M_DIO_voidSetPinDirection(EN_PIN, OUTPUT);
     9d4:	61 e0       	ldi	r22, 0x01	; 1
     9d6:	82 e0       	ldi	r24, 0x02	; 2
     9d8:	0e 94 7f 06 	call	0xcfe	; 0xcfe <M_DIO_voidSetPinDirection>

	//intialize D4 -> D7 as output
	M_DIO_voidSetPinDirection(D4_PIN, OUTPUT);
     9dc:	61 e0       	ldi	r22, 0x01	; 1
     9de:	88 e0       	ldi	r24, 0x08	; 8
     9e0:	0e 94 7f 06 	call	0xcfe	; 0xcfe <M_DIO_voidSetPinDirection>
	M_DIO_voidSetPinDirection(D5_PIN, OUTPUT);
     9e4:	61 e0       	ldi	r22, 0x01	; 1
     9e6:	89 e0       	ldi	r24, 0x09	; 9
     9e8:	0e 94 7f 06 	call	0xcfe	; 0xcfe <M_DIO_voidSetPinDirection>
	M_DIO_voidSetPinDirection(D6_PIN, OUTPUT);
     9ec:	61 e0       	ldi	r22, 0x01	; 1
     9ee:	8a e0       	ldi	r24, 0x0A	; 10
     9f0:	0e 94 7f 06 	call	0xcfe	; 0xcfe <M_DIO_voidSetPinDirection>
	M_DIO_voidSetPinDirection(D7_PIN, OUTPUT);
     9f4:	61 e0       	ldi	r22, 0x01	; 1
     9f6:	8c e0       	ldi	r24, 0x0C	; 12
     9f8:	0e 94 7f 06 	call	0xcfe	; 0xcfe <M_DIO_voidSetPinDirection>
     9fc:	2f e7       	ldi	r18, 0x7F	; 127
     9fe:	88 e3       	ldi	r24, 0x38	; 56
     a00:	91 e0       	ldi	r25, 0x01	; 1
     a02:	21 50       	subi	r18, 0x01	; 1
     a04:	80 40       	sbci	r24, 0x00	; 0
     a06:	90 40       	sbci	r25, 0x00	; 0
     a08:	e1 f7       	brne	.-8      	; 0xa02 <H_LCD_voidInit+0x36>
     a0a:	00 c0       	rjmp	.+0      	; 0xa0c <H_LCD_voidInit+0x40>
     a0c:	00 00       	nop
	_delay_ms(50);
	H_LCD_voidSendCommand(0x02); //set fun
     a0e:	82 e0       	ldi	r24, 0x02	; 2
     a10:	0e 94 32 04 	call	0x864	; 0x864 <H_LCD_voidSendCommand>
	H_LCD_voidSendCommand(0x28);
     a14:	88 e2       	ldi	r24, 0x28	; 40
     a16:	0e 94 32 04 	call	0x864	; 0x864 <H_LCD_voidSendCommand>
	H_LCD_voidSendCommand(0x0c);
     a1a:	8c e0       	ldi	r24, 0x0C	; 12
     a1c:	0e 94 32 04 	call	0x864	; 0x864 <H_LCD_voidSendCommand>
	H_LCD_voidSendCommand(0x01);
     a20:	81 e0       	ldi	r24, 0x01	; 1
     a22:	0e 94 32 04 	call	0x864	; 0x864 <H_LCD_voidSendCommand>
     a26:	8f ec       	ldi	r24, 0xCF	; 207
     a28:	97 e0       	ldi	r25, 0x07	; 7
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	f1 f7       	brne	.-4      	; 0xa2a <H_LCD_voidInit+0x5e>
     a2e:	00 c0       	rjmp	.+0      	; 0xa30 <H_LCD_voidInit+0x64>
     a30:	00 00       	nop
	_delay_ms(1);
	H_LCD_voidSendCommand(0x06); //no shift ddram++
     a32:	86 e0       	ldi	r24, 0x06	; 6
     a34:	0e 94 32 04 	call	0x864	; 0x864 <H_LCD_voidSendCommand>
     a38:	08 95       	ret

00000a3a <H_LCD_voidSendChar>:
	H_LCD_voidSendCommand(0x06);
}
#endif

void H_LCD_voidSendChar(u8 copy_u8char) {
	H_LCD_voidSendData(copy_u8char);
     a3a:	0e 94 8c 04 	call	0x918	; 0x918 <H_LCD_voidSendData>
     a3e:	08 95       	ret

00000a40 <H_LCD_voidSendString>:
}

void H_LCD_voidSendString(c8*copy_str) {
     a40:	0f 93       	push	r16
     a42:	1f 93       	push	r17
     a44:	cf 93       	push	r28
	u8 i = 0;
	if (copy_str == 0) {
     a46:	00 97       	sbiw	r24, 0x00	; 0
     a48:	61 f0       	breq	.+24     	; 0xa62 <H_LCD_voidSendString+0x22>
     a4a:	8c 01       	movw	r16, r24
     a4c:	c0 e0       	ldi	r28, 0x00	; 0
     a4e:	03 c0       	rjmp	.+6      	; 0xa56 <H_LCD_voidSendString+0x16>
		//do nothing
	} else {
		while (copy_str[i]) {
			H_LCD_voidSendChar(copy_str[i]);
     a50:	0e 94 1d 05 	call	0xa3a	; 0xa3a <H_LCD_voidSendChar>
			i++;
     a54:	cf 5f       	subi	r28, 0xFF	; 255
void H_LCD_voidSendString(c8*copy_str) {
	u8 i = 0;
	if (copy_str == 0) {
		//do nothing
	} else {
		while (copy_str[i]) {
     a56:	f8 01       	movw	r30, r16
     a58:	ec 0f       	add	r30, r28
     a5a:	f1 1d       	adc	r31, r1
     a5c:	80 81       	ld	r24, Z
     a5e:	81 11       	cpse	r24, r1
     a60:	f7 cf       	rjmp	.-18     	; 0xa50 <H_LCD_voidSendString+0x10>
			H_LCD_voidSendChar(copy_str[i]);
			i++;
		}
	}
}
     a62:	cf 91       	pop	r28
     a64:	1f 91       	pop	r17
     a66:	0f 91       	pop	r16
     a68:	08 95       	ret

00000a6a <H_LCD_voidSetPosition>:
void H_LCD_voidSetPosition(u8 copy_u8row, u8 copy_u8col) {
	if (copy_u8row == 1) {
     a6a:	81 30       	cpi	r24, 0x01	; 1
     a6c:	29 f4       	brne	.+10     	; 0xa78 <H_LCD_voidSetPosition+0xe>
		H_LCD_voidSendCommand(0x80 + copy_u8col);
     a6e:	80 e8       	ldi	r24, 0x80	; 128
     a70:	86 0f       	add	r24, r22
     a72:	0e 94 32 04 	call	0x864	; 0x864 <H_LCD_voidSendCommand>
     a76:	08 95       	ret
	} else if (copy_u8row == 2) {
     a78:	82 30       	cpi	r24, 0x02	; 2
     a7a:	29 f4       	brne	.+10     	; 0xa86 <H_LCD_voidSetPosition+0x1c>
		H_LCD_voidSendCommand(0x80 + 0x40 + copy_u8col);
     a7c:	80 ec       	ldi	r24, 0xC0	; 192
     a7e:	86 0f       	add	r24, r22
     a80:	0e 94 32 04 	call	0x864	; 0x864 <H_LCD_voidSendCommand>
     a84:	08 95       	ret

	} else if (copy_u8row == 3) {
     a86:	83 30       	cpi	r24, 0x03	; 3
     a88:	29 f4       	brne	.+10     	; 0xa94 <H_LCD_voidSetPosition+0x2a>
		H_LCD_voidSendCommand(0x80 + 0x14 + copy_u8col);
     a8a:	84 e9       	ldi	r24, 0x94	; 148
     a8c:	86 0f       	add	r24, r22
     a8e:	0e 94 32 04 	call	0x864	; 0x864 <H_LCD_voidSendCommand>
     a92:	08 95       	ret
	} else if (copy_u8row == 4) {
     a94:	84 30       	cpi	r24, 0x04	; 4
     a96:	21 f4       	brne	.+8      	; 0xaa0 <H_LCD_voidSetPosition+0x36>
		H_LCD_voidSendCommand(0x80 + 0x54 + copy_u8col);
     a98:	84 ed       	ldi	r24, 0xD4	; 212
     a9a:	86 0f       	add	r24, r22
     a9c:	0e 94 32 04 	call	0x864	; 0x864 <H_LCD_voidSendCommand>
     aa0:	08 95       	ret

00000aa2 <H_LCD_SendNumber>:
	}

}
void H_LCD_SendNumber(s64 copy_u8num) {
     aa2:	2f 92       	push	r2
     aa4:	3f 92       	push	r3
     aa6:	4f 92       	push	r4
     aa8:	5f 92       	push	r5
     aaa:	6f 92       	push	r6
     aac:	7f 92       	push	r7
     aae:	8f 92       	push	r8
     ab0:	9f 92       	push	r9
     ab2:	af 92       	push	r10
     ab4:	bf 92       	push	r11
     ab6:	cf 92       	push	r12
     ab8:	df 92       	push	r13
     aba:	ef 92       	push	r14
     abc:	ff 92       	push	r15
     abe:	0f 93       	push	r16
     ac0:	1f 93       	push	r17
     ac2:	cf 93       	push	r28
     ac4:	df 93       	push	r29
     ac6:	cd b7       	in	r28, 0x3d	; 61
     ac8:	de b7       	in	r29, 0x3e	; 62
     aca:	67 97       	sbiw	r28, 0x17	; 23
     acc:	0f b6       	in	r0, 0x3f	; 63
     ace:	f8 94       	cli
     ad0:	de bf       	out	0x3e, r29	; 62
     ad2:	0f be       	out	0x3f, r0	; 63
     ad4:	cd bf       	out	0x3d, r28	; 61
     ad6:	2d 8b       	std	Y+21, r18	; 0x15
     ad8:	3e 8b       	std	Y+22, r19	; 0x16
     ada:	4f 8b       	std	Y+23, r20	; 0x17
     adc:	85 2e       	mov	r8, r21
     ade:	76 2e       	mov	r7, r22
     ae0:	67 2e       	mov	r6, r23
     ae2:	38 2e       	mov	r3, r24
     ae4:	29 2e       	mov	r2, r25
	itoa(copy_u8num, lcoal_ArrStrig, 10);
	H_LCD_voidSendString(lcoal_ArrStrig);*/
		u8 i=0;
		s8 j;
	char lcoal_ArrStrig[20];
	if(copy_u8num==0)
     ae6:	a0 e0       	ldi	r26, 0x00	; 0
     ae8:	0e 94 96 0a 	call	0x152c	; 0x152c <__cmpdi2_s8>
     aec:	19 f4       	brne	.+6      	; 0xaf4 <H_LCD_SendNumber+0x52>
	{
		H_LCD_voidSendChar('0');
     aee:	80 e3       	ldi	r24, 0x30	; 48
     af0:	0e 94 1d 05 	call	0xa3a	; 0xa3a <H_LCD_voidSendChar>
	}
    if (copy_u8num<0)
     af4:	2d 89       	ldd	r18, Y+21	; 0x15
     af6:	3e 89       	ldd	r19, Y+22	; 0x16
     af8:	4f 89       	ldd	r20, Y+23	; 0x17
     afa:	58 2d       	mov	r21, r8
     afc:	67 2d       	mov	r22, r7
     afe:	76 2d       	mov	r23, r6
     b00:	83 2d       	mov	r24, r3
     b02:	92 2d       	mov	r25, r2
     b04:	a0 e0       	ldi	r26, 0x00	; 0
     b06:	0e 94 96 0a 	call	0x152c	; 0x152c <__cmpdi2_s8>
     b0a:	ac f4       	brge	.+42     	; 0xb36 <H_LCD_SendNumber+0x94>
	{
		H_LCD_voidSendChar('-');
     b0c:	8d e2       	ldi	r24, 0x2D	; 45
     b0e:	0e 94 1d 05 	call	0xa3a	; 0xa3a <H_LCD_voidSendChar>
		copy_u8num = copy_u8num*-1;
     b12:	2d 89       	ldd	r18, Y+21	; 0x15
     b14:	3e 89       	ldd	r19, Y+22	; 0x16
     b16:	4f 89       	ldd	r20, Y+23	; 0x17
     b18:	58 2d       	mov	r21, r8
     b1a:	67 2d       	mov	r22, r7
     b1c:	76 2d       	mov	r23, r6
     b1e:	83 2d       	mov	r24, r3
     b20:	92 2d       	mov	r25, r2
     b22:	0e 94 4f 0a 	call	0x149e	; 0x149e <__negdi2>
     b26:	2d 8b       	std	Y+21, r18	; 0x15
     b28:	3e 8b       	std	Y+22, r19	; 0x16
     b2a:	4f 8b       	std	Y+23, r20	; 0x17
     b2c:	85 2e       	mov	r8, r21
     b2e:	76 2e       	mov	r7, r22
     b30:	67 2e       	mov	r6, r23
     b32:	38 2e       	mov	r3, r24
     b34:	29 2e       	mov	r2, r25
	} else if (copy_u8row == 4) {
		H_LCD_voidSendCommand(0x80 + 0x54 + copy_u8col);
	}

}
void H_LCD_SendNumber(s64 copy_u8num) {
     b36:	91 2c       	mov	r9, r1
     b38:	32 c0       	rjmp	.+100    	; 0xb9e <H_LCD_SendNumber+0xfc>
		H_LCD_voidSendChar('-');
		copy_u8num = copy_u8num*-1;
	}
	while(copy_u8num>0)
	{
		lcoal_ArrStrig[i] = copy_u8num%10+'0';
     b3a:	49 2c       	mov	r4, r9
     b3c:	51 2c       	mov	r5, r1
     b3e:	0f 2e       	mov	r0, r31
     b40:	fa e0       	ldi	r31, 0x0A	; 10
     b42:	af 2e       	mov	r10, r31
     b44:	f0 2d       	mov	r31, r0
     b46:	b1 2c       	mov	r11, r1
     b48:	c1 2c       	mov	r12, r1
     b4a:	d1 2c       	mov	r13, r1
     b4c:	e1 2c       	mov	r14, r1
     b4e:	f1 2c       	mov	r15, r1
     b50:	00 e0       	ldi	r16, 0x00	; 0
     b52:	10 e0       	ldi	r17, 0x00	; 0
     b54:	2d 89       	ldd	r18, Y+21	; 0x15
     b56:	3e 89       	ldd	r19, Y+22	; 0x16
     b58:	4f 89       	ldd	r20, Y+23	; 0x17
     b5a:	58 2d       	mov	r21, r8
     b5c:	67 2d       	mov	r22, r7
     b5e:	76 2d       	mov	r23, r6
     b60:	83 2d       	mov	r24, r3
     b62:	92 2d       	mov	r25, r2
     b64:	0e 94 bf 09 	call	0x137e	; 0x137e <__moddi3>
     b68:	e1 e0       	ldi	r30, 0x01	; 1
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	ec 0f       	add	r30, r28
     b6e:	fd 1f       	adc	r31, r29
     b70:	e4 0d       	add	r30, r4
     b72:	f5 1d       	adc	r31, r5
     b74:	20 5d       	subi	r18, 0xD0	; 208
     b76:	20 83       	st	Z, r18
		copy_u8num = copy_u8num/10;
     b78:	2d 89       	ldd	r18, Y+21	; 0x15
     b7a:	3e 89       	ldd	r19, Y+22	; 0x16
     b7c:	4f 89       	ldd	r20, Y+23	; 0x17
     b7e:	58 2d       	mov	r21, r8
     b80:	67 2d       	mov	r22, r7
     b82:	76 2d       	mov	r23, r6
     b84:	83 2d       	mov	r24, r3
     b86:	92 2d       	mov	r25, r2
     b88:	0e 94 c1 09 	call	0x1382	; 0x1382 <__divdi3>
     b8c:	2d 8b       	std	Y+21, r18	; 0x15
     b8e:	3e 8b       	std	Y+22, r19	; 0x16
     b90:	4f 8b       	std	Y+23, r20	; 0x17
     b92:	85 2e       	mov	r8, r21
     b94:	76 2e       	mov	r7, r22
     b96:	67 2e       	mov	r6, r23
     b98:	38 2e       	mov	r3, r24
     b9a:	29 2e       	mov	r2, r25
		i++;
     b9c:	93 94       	inc	r9
    if (copy_u8num<0)
	{
		H_LCD_voidSendChar('-');
		copy_u8num = copy_u8num*-1;
	}
	while(copy_u8num>0)
     b9e:	2d 89       	ldd	r18, Y+21	; 0x15
     ba0:	3e 89       	ldd	r19, Y+22	; 0x16
     ba2:	4f 89       	ldd	r20, Y+23	; 0x17
     ba4:	58 2d       	mov	r21, r8
     ba6:	67 2d       	mov	r22, r7
     ba8:	76 2d       	mov	r23, r6
     baa:	83 2d       	mov	r24, r3
     bac:	92 2d       	mov	r25, r2
     bae:	a0 e0       	ldi	r26, 0x00	; 0
     bb0:	0e 94 96 0a 	call	0x152c	; 0x152c <__cmpdi2_s8>
     bb4:	09 f0       	breq	.+2      	; 0xbb8 <H_LCD_SendNumber+0x116>
     bb6:	0c f6       	brge	.-126    	; 0xb3a <H_LCD_SendNumber+0x98>
	{
		lcoal_ArrStrig[i] = copy_u8num%10+'0';
		copy_u8num = copy_u8num/10;
		i++;
	}
	for(j=i-1;j>=0;j--)
     bb8:	9a 94       	dec	r9
     bba:	0c c0       	rjmp	.+24     	; 0xbd4 <H_LCD_SendNumber+0x132>
	{
		H_LCD_voidSendChar(lcoal_ArrStrig[j]);
     bbc:	e1 e0       	ldi	r30, 0x01	; 1
     bbe:	f0 e0       	ldi	r31, 0x00	; 0
     bc0:	ec 0f       	add	r30, r28
     bc2:	fd 1f       	adc	r31, r29
     bc4:	e9 0d       	add	r30, r9
     bc6:	f1 1d       	adc	r31, r1
     bc8:	97 fc       	sbrc	r9, 7
     bca:	fa 95       	dec	r31
     bcc:	80 81       	ld	r24, Z
     bce:	0e 94 1d 05 	call	0xa3a	; 0xa3a <H_LCD_voidSendChar>
	{
		lcoal_ArrStrig[i] = copy_u8num%10+'0';
		copy_u8num = copy_u8num/10;
		i++;
	}
	for(j=i-1;j>=0;j--)
     bd2:	9a 94       	dec	r9
     bd4:	99 20       	and	r9, r9
     bd6:	94 f7       	brge	.-28     	; 0xbbc <H_LCD_SendNumber+0x11a>
	{
		H_LCD_voidSendChar(lcoal_ArrStrig[j]);
	}
}
     bd8:	67 96       	adiw	r28, 0x17	; 23
     bda:	0f b6       	in	r0, 0x3f	; 63
     bdc:	f8 94       	cli
     bde:	de bf       	out	0x3e, r29	; 62
     be0:	0f be       	out	0x3f, r0	; 63
     be2:	cd bf       	out	0x3d, r28	; 61
     be4:	df 91       	pop	r29
     be6:	cf 91       	pop	r28
     be8:	1f 91       	pop	r17
     bea:	0f 91       	pop	r16
     bec:	ff 90       	pop	r15
     bee:	ef 90       	pop	r14
     bf0:	df 90       	pop	r13
     bf2:	cf 90       	pop	r12
     bf4:	bf 90       	pop	r11
     bf6:	af 90       	pop	r10
     bf8:	9f 90       	pop	r9
     bfa:	8f 90       	pop	r8
     bfc:	7f 90       	pop	r7
     bfe:	6f 90       	pop	r6
     c00:	5f 90       	pop	r5
     c02:	4f 90       	pop	r4
     c04:	3f 90       	pop	r3
     c06:	2f 90       	pop	r2
     c08:	08 95       	ret

00000c0a <H_LED_voidInit>:
#include "LED_interface.h"
/*---------------------------- Software Interfaces ---------------------------*/

void H_LED_voidInit(u8 copy_u8led)
{
	M_DIO_voidSetPinDirection(copy_u8led,OUTPUT);
     c0a:	61 e0       	ldi	r22, 0x01	; 1
     c0c:	0e 94 7f 06 	call	0xcfe	; 0xcfe <M_DIO_voidSetPinDirection>
     c10:	08 95       	ret

00000c12 <H_LED_voidTurnOn>:
}

void H_LED_voidTurnOn(u8 copy_u8led)
{
	M_DIO_voidSetPinValue(copy_u8led,HIGH);
     c12:	61 e0       	ldi	r22, 0x01	; 1
     c14:	0e 94 06 07 	call	0xe0c	; 0xe0c <M_DIO_voidSetPinValue>
     c18:	08 95       	ret

00000c1a <H_LED_voidTurnOff>:
}

void H_LED_voidTurnOff(u8 copy_u8led)
{
	M_DIO_voidSetPinValue(copy_u8led,LOW);
     c1a:	60 e0       	ldi	r22, 0x00	; 0
     c1c:	0e 94 06 07 	call	0xe0c	; 0xe0c <M_DIO_voidSetPinValue>
     c20:	08 95       	ret

00000c22 <H_SENSORS_voidInit>:
#include "SENSORS_interface.h"
/*---------------------------- Software Interfaces ---------------------------*/
void H_SENSORS_voidInit(void)
{
	//INITIALIZATION OF ADC
	M_ADC_voidInit(ADC_VCC,ADC_SCALER_64);
     c22:	66 e0       	ldi	r22, 0x06	; 6
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	0e 94 3a 06 	call	0xc74	; 0xc74 <M_ADC_voidInit>
	/*LM35 PIN INPUT*/
	M_DIO_voidSetPinDirection(LM35_PIN,INPUT);
     c2a:	60 e0       	ldi	r22, 0x00	; 0
     c2c:	80 e0       	ldi	r24, 0x00	; 0
     c2e:	0e 94 7f 06 	call	0xcfe	; 0xcfe <M_DIO_voidSetPinDirection>
	/*POT PIN INPUT*/
	M_DIO_voidSetPinDirection(POT_PIN,INPUT);
     c32:	60 e0       	ldi	r22, 0x00	; 0
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	0e 94 7f 06 	call	0xcfe	; 0xcfe <M_DIO_voidSetPinDirection>
	/*LDR PIN INPUT*/
	M_DIO_voidSetPinDirection(LDR_PIN,INPUT);
     c3a:	60 e0       	ldi	r22, 0x00	; 0
     c3c:	87 e0       	ldi	r24, 0x07	; 7
     c3e:	0e 94 7f 06 	call	0xcfe	; 0xcfe <M_DIO_voidSetPinDirection>
     c42:	08 95       	ret

00000c44 <H_LM35_GetTemp>:
}

u16 H_LM35_GetTemp(void)
{
	u16 volt = M_ADC_u16GetVolt(LM35_CHANNEL);
     c44:	80 e0       	ldi	r24, 0x00	; 0
     c46:	0e 94 70 06 	call	0xce0	; 0xce0 <M_ADC_u16GetVolt>
	u16 temp = volt;
	return temp;
}
     c4a:	08 95       	ret

00000c4c <LDR_GetVolt>:

u16  LDR_GetVolt(void)
{
	u16 volt = M_ADC_u16GetVolt(LDR_CHANNEL);
     c4c:	87 e0       	ldi	r24, 0x07	; 7
     c4e:	0e 94 70 06 	call	0xce0	; 0xce0 <M_ADC_u16GetVolt>
	return volt;
}
     c52:	08 95       	ret

00000c54 <POT_GetPerc>:

u8 POT_GetPerc(void)
{
	u8 perc;
	u16 adc_read = M_ADC_u16GetReading(POT_CHANNEL);
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	0e 94 62 06 	call	0xcc4	; 0xcc4 <M_ADC_u16GetReading>
	perc = ((u32)adc_read*100)/1023;
     c5a:	9c 01       	movw	r18, r24
     c5c:	a4 e6       	ldi	r26, 0x64	; 100
     c5e:	b0 e0       	ldi	r27, 0x00	; 0
     c60:	0e 94 b0 09 	call	0x1360	; 0x1360 <__umulhisi3>
     c64:	2f ef       	ldi	r18, 0xFF	; 255
     c66:	33 e0       	ldi	r19, 0x03	; 3
     c68:	40 e0       	ldi	r20, 0x00	; 0
     c6a:	50 e0       	ldi	r21, 0x00	; 0
     c6c:	0e 94 8e 09 	call	0x131c	; 0x131c <__udivmodsi4>
     c70:	82 2f       	mov	r24, r18
	return perc;
}
     c72:	08 95       	ret

00000c74 <M_ADC_voidInit>:


void  M_ADC_voidInit(ADC_Vref_type vref,ADC_Scaler_type scaler)
{
	//vref
	switch (vref)
     c74:	81 30       	cpi	r24, 0x01	; 1
     c76:	59 f0       	breq	.+22     	; 0xc8e <M_ADC_voidInit+0x1a>
     c78:	18 f0       	brcs	.+6      	; 0xc80 <M_ADC_voidInit+0xc>
     c7a:	83 30       	cpi	r24, 0x03	; 3
     c7c:	79 f0       	breq	.+30     	; 0xc9c <M_ADC_voidInit+0x28>
     c7e:	14 c0       	rjmp	.+40     	; 0xca8 <M_ADC_voidInit+0x34>
	{
		case ADC_AREF:
		CLEAR_BIT(ADMUX,REFS1);
     c80:	87 b1       	in	r24, 0x07	; 7
     c82:	8f 77       	andi	r24, 0x7F	; 127
     c84:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX,REFS0);
     c86:	87 b1       	in	r24, 0x07	; 7
     c88:	8f 7b       	andi	r24, 0xBF	; 191
     c8a:	87 b9       	out	0x07, r24	; 7
		break;
     c8c:	0d c0       	rjmp	.+26     	; 0xca8 <M_ADC_voidInit+0x34>
		case ADC_VCC:
		CLEAR_BIT(ADMUX,REFS1);
     c8e:	87 b1       	in	r24, 0x07	; 7
     c90:	8f 77       	andi	r24, 0x7F	; 127
     c92:	87 b9       	out	0x07, r24	; 7
		SET_BIT(ADMUX,REFS0);
     c94:	87 b1       	in	r24, 0x07	; 7
     c96:	80 64       	ori	r24, 0x40	; 64
     c98:	87 b9       	out	0x07, r24	; 7
		break;
     c9a:	06 c0       	rjmp	.+12     	; 0xca8 <M_ADC_voidInit+0x34>
		case ADC_256V:
		SET_BIT(ADMUX,REFS1);
     c9c:	87 b1       	in	r24, 0x07	; 7
     c9e:	80 68       	ori	r24, 0x80	; 128
     ca0:	87 b9       	out	0x07, r24	; 7
		SET_BIT(ADMUX,REFS0);
     ca2:	87 b1       	in	r24, 0x07	; 7
     ca4:	80 64       	ori	r24, 0x40	; 64
     ca6:	87 b9       	out	0x07, r24	; 7
		break;
	}

	//prescaler
	ADCSRA = ADCSRA & 0xf8;//0b11111000
     ca8:	86 b1       	in	r24, 0x06	; 6
     caa:	88 7f       	andi	r24, 0xF8	; 248
     cac:	86 b9       	out	0x06, r24	; 6
	scaler = scaler & 0x07;
     cae:	67 70       	andi	r22, 0x07	; 7
	ADCSRA = ADCSRA|scaler;
     cb0:	86 b1       	in	r24, 0x06	; 6
     cb2:	68 2b       	or	r22, r24
     cb4:	66 b9       	out	0x06, r22	; 6
	//adjust read to the right  ADLAR=0
	CLEAR_BIT(ADMUX,ADLAR);
     cb6:	87 b1       	in	r24, 0x07	; 7
     cb8:	8f 7d       	andi	r24, 0xDF	; 223
     cba:	87 b9       	out	0x07, r24	; 7
	//enable
	SET_BIT(ADCSRA,ADEN);
     cbc:	86 b1       	in	r24, 0x06	; 6
     cbe:	80 68       	ori	r24, 0x80	; 128
     cc0:	86 b9       	out	0x06, r24	; 6
     cc2:	08 95       	ret

00000cc4 <M_ADC_u16GetReading>:
}

u16   M_ADC_u16GetReading(ADC_Channel_type ch)
{
	//channel
	ADMUX=ADMUX&0xe0;
     cc4:	97 b1       	in	r25, 0x07	; 7
     cc6:	90 7e       	andi	r25, 0xE0	; 224
     cc8:	97 b9       	out	0x07, r25	; 7
	//ch=ch&0x1f;
	ADMUX=ADMUX|ch;
     cca:	97 b1       	in	r25, 0x07	; 7
     ccc:	89 2b       	or	r24, r25
     cce:	87 b9       	out	0x07, r24	; 7
	//start conversion
	SET_BIT(ADCSRA,ADSC);
     cd0:	86 b1       	in	r24, 0x06	; 6
     cd2:	80 64       	ori	r24, 0x40	; 64
     cd4:	86 b9       	out	0x06, r24	; 6
	while(READ_BIT(ADCSRA,ADSC));//busy
     cd6:	36 99       	sbic	0x06, 6	; 6
     cd8:	fe cf       	rjmp	.-4      	; 0xcd6 <M_ADC_u16GetReading+0x12>
	//reading
	return ADC;
     cda:	84 b1       	in	r24, 0x04	; 4
     cdc:	95 b1       	in	r25, 0x05	; 5

}
     cde:	08 95       	ret

00000ce0 <M_ADC_u16GetVolt>:

u16  M_ADC_u16GetVolt(ADC_Channel_type ch)
{
	u16 adc = M_ADC_u16GetReading(ch);
     ce0:	0e 94 62 06 	call	0xcc4	; 0xcc4 <M_ADC_u16GetReading>
	u16 volt = (((u32)adc*VoltRef)/1023);
     ce4:	9c 01       	movw	r18, r24
     ce6:	a8 e8       	ldi	r26, 0x88	; 136
     ce8:	b3 e1       	ldi	r27, 0x13	; 19
     cea:	0e 94 b0 09 	call	0x1360	; 0x1360 <__umulhisi3>
     cee:	2f ef       	ldi	r18, 0xFF	; 255
     cf0:	33 e0       	ldi	r19, 0x03	; 3
     cf2:	40 e0       	ldi	r20, 0x00	; 0
     cf4:	50 e0       	ldi	r21, 0x00	; 0
     cf6:	0e 94 8e 09 	call	0x131c	; 0x131c <__udivmodsi4>
	return volt;
}
     cfa:	c9 01       	movw	r24, r18
     cfc:	08 95       	ret

00000cfe <M_DIO_voidSetPinDirection>:
	}
	else
	{
		M_DIO_voidSetPinValue(Copy_u8PinId,LOW);
	}
}
     cfe:	98 2f       	mov	r25, r24
     d00:	96 95       	lsr	r25
     d02:	96 95       	lsr	r25
     d04:	96 95       	lsr	r25
     d06:	87 70       	andi	r24, 0x07	; 7
     d08:	66 23       	and	r22, r22
     d0a:	09 f4       	brne	.+2      	; 0xd0e <M_DIO_voidSetPinDirection+0x10>
     d0c:	3f c0       	rjmp	.+126    	; 0xd8c <M_DIO_voidSetPinDirection+0x8e>
     d0e:	61 30       	cpi	r22, 0x01	; 1
     d10:	09 f0       	breq	.+2      	; 0xd14 <M_DIO_voidSetPinDirection+0x16>
     d12:	7b c0       	rjmp	.+246    	; 0xe0a <M_DIO_voidSetPinDirection+0x10c>
     d14:	91 30       	cpi	r25, 0x01	; 1
     d16:	99 f0       	breq	.+38     	; 0xd3e <M_DIO_voidSetPinDirection+0x40>
     d18:	28 f0       	brcs	.+10     	; 0xd24 <M_DIO_voidSetPinDirection+0x26>
     d1a:	92 30       	cpi	r25, 0x02	; 2
     d1c:	e9 f0       	breq	.+58     	; 0xd58 <M_DIO_voidSetPinDirection+0x5a>
     d1e:	93 30       	cpi	r25, 0x03	; 3
     d20:	41 f1       	breq	.+80     	; 0xd72 <M_DIO_voidSetPinDirection+0x74>
     d22:	08 95       	ret
     d24:	4a b3       	in	r20, 0x1a	; 26
     d26:	21 e0       	ldi	r18, 0x01	; 1
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	b9 01       	movw	r22, r18
     d2c:	02 c0       	rjmp	.+4      	; 0xd32 <M_DIO_voidSetPinDirection+0x34>
     d2e:	66 0f       	add	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	8a 95       	dec	r24
     d34:	e2 f7       	brpl	.-8      	; 0xd2e <M_DIO_voidSetPinDirection+0x30>
     d36:	cb 01       	movw	r24, r22
     d38:	84 2b       	or	r24, r20
     d3a:	8a bb       	out	0x1a, r24	; 26
     d3c:	08 95       	ret
     d3e:	47 b3       	in	r20, 0x17	; 23
     d40:	21 e0       	ldi	r18, 0x01	; 1
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	b9 01       	movw	r22, r18
     d46:	02 c0       	rjmp	.+4      	; 0xd4c <M_DIO_voidSetPinDirection+0x4e>
     d48:	66 0f       	add	r22, r22
     d4a:	77 1f       	adc	r23, r23
     d4c:	8a 95       	dec	r24
     d4e:	e2 f7       	brpl	.-8      	; 0xd48 <M_DIO_voidSetPinDirection+0x4a>
     d50:	cb 01       	movw	r24, r22
     d52:	84 2b       	or	r24, r20
     d54:	87 bb       	out	0x17, r24	; 23
     d56:	08 95       	ret
     d58:	44 b3       	in	r20, 0x14	; 20
     d5a:	21 e0       	ldi	r18, 0x01	; 1
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	b9 01       	movw	r22, r18
     d60:	02 c0       	rjmp	.+4      	; 0xd66 <M_DIO_voidSetPinDirection+0x68>
     d62:	66 0f       	add	r22, r22
     d64:	77 1f       	adc	r23, r23
     d66:	8a 95       	dec	r24
     d68:	e2 f7       	brpl	.-8      	; 0xd62 <M_DIO_voidSetPinDirection+0x64>
     d6a:	cb 01       	movw	r24, r22
     d6c:	84 2b       	or	r24, r20
     d6e:	84 bb       	out	0x14, r24	; 20
     d70:	08 95       	ret
     d72:	41 b3       	in	r20, 0x11	; 17
     d74:	21 e0       	ldi	r18, 0x01	; 1
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	b9 01       	movw	r22, r18
     d7a:	02 c0       	rjmp	.+4      	; 0xd80 <M_DIO_voidSetPinDirection+0x82>
     d7c:	66 0f       	add	r22, r22
     d7e:	77 1f       	adc	r23, r23
     d80:	8a 95       	dec	r24
     d82:	e2 f7       	brpl	.-8      	; 0xd7c <M_DIO_voidSetPinDirection+0x7e>
     d84:	cb 01       	movw	r24, r22
     d86:	84 2b       	or	r24, r20
     d88:	81 bb       	out	0x11, r24	; 17
     d8a:	08 95       	ret
     d8c:	91 30       	cpi	r25, 0x01	; 1
     d8e:	a1 f0       	breq	.+40     	; 0xdb8 <M_DIO_voidSetPinDirection+0xba>
     d90:	28 f0       	brcs	.+10     	; 0xd9c <M_DIO_voidSetPinDirection+0x9e>
     d92:	92 30       	cpi	r25, 0x02	; 2
     d94:	f9 f0       	breq	.+62     	; 0xdd4 <M_DIO_voidSetPinDirection+0xd6>
     d96:	93 30       	cpi	r25, 0x03	; 3
     d98:	59 f1       	breq	.+86     	; 0xdf0 <M_DIO_voidSetPinDirection+0xf2>
     d9a:	08 95       	ret
     d9c:	4a b3       	in	r20, 0x1a	; 26
     d9e:	21 e0       	ldi	r18, 0x01	; 1
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	b9 01       	movw	r22, r18
     da4:	02 c0       	rjmp	.+4      	; 0xdaa <M_DIO_voidSetPinDirection+0xac>
     da6:	66 0f       	add	r22, r22
     da8:	77 1f       	adc	r23, r23
     daa:	8a 95       	dec	r24
     dac:	e2 f7       	brpl	.-8      	; 0xda6 <M_DIO_voidSetPinDirection+0xa8>
     dae:	cb 01       	movw	r24, r22
     db0:	80 95       	com	r24
     db2:	84 23       	and	r24, r20
     db4:	8a bb       	out	0x1a, r24	; 26
     db6:	08 95       	ret
     db8:	47 b3       	in	r20, 0x17	; 23
     dba:	21 e0       	ldi	r18, 0x01	; 1
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	b9 01       	movw	r22, r18
     dc0:	02 c0       	rjmp	.+4      	; 0xdc6 <M_DIO_voidSetPinDirection+0xc8>
     dc2:	66 0f       	add	r22, r22
     dc4:	77 1f       	adc	r23, r23
     dc6:	8a 95       	dec	r24
     dc8:	e2 f7       	brpl	.-8      	; 0xdc2 <M_DIO_voidSetPinDirection+0xc4>
     dca:	cb 01       	movw	r24, r22
     dcc:	80 95       	com	r24
     dce:	84 23       	and	r24, r20
     dd0:	87 bb       	out	0x17, r24	; 23
     dd2:	08 95       	ret
     dd4:	44 b3       	in	r20, 0x14	; 20
     dd6:	21 e0       	ldi	r18, 0x01	; 1
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	b9 01       	movw	r22, r18
     ddc:	02 c0       	rjmp	.+4      	; 0xde2 <M_DIO_voidSetPinDirection+0xe4>
     dde:	66 0f       	add	r22, r22
     de0:	77 1f       	adc	r23, r23
     de2:	8a 95       	dec	r24
     de4:	e2 f7       	brpl	.-8      	; 0xdde <M_DIO_voidSetPinDirection+0xe0>
     de6:	cb 01       	movw	r24, r22
     de8:	80 95       	com	r24
     dea:	84 23       	and	r24, r20
     dec:	84 bb       	out	0x14, r24	; 20
     dee:	08 95       	ret
     df0:	41 b3       	in	r20, 0x11	; 17
     df2:	21 e0       	ldi	r18, 0x01	; 1
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	b9 01       	movw	r22, r18
     df8:	02 c0       	rjmp	.+4      	; 0xdfe <M_DIO_voidSetPinDirection+0x100>
     dfa:	66 0f       	add	r22, r22
     dfc:	77 1f       	adc	r23, r23
     dfe:	8a 95       	dec	r24
     e00:	e2 f7       	brpl	.-8      	; 0xdfa <M_DIO_voidSetPinDirection+0xfc>
     e02:	cb 01       	movw	r24, r22
     e04:	80 95       	com	r24
     e06:	84 23       	and	r24, r20
     e08:	81 bb       	out	0x11, r24	; 17
     e0a:	08 95       	ret

00000e0c <M_DIO_voidSetPinValue>:
     e0c:	98 2f       	mov	r25, r24
     e0e:	96 95       	lsr	r25
     e10:	96 95       	lsr	r25
     e12:	96 95       	lsr	r25
     e14:	87 70       	andi	r24, 0x07	; 7
     e16:	66 23       	and	r22, r22
     e18:	09 f4       	brne	.+2      	; 0xe1c <M_DIO_voidSetPinValue+0x10>
     e1a:	3f c0       	rjmp	.+126    	; 0xe9a <M_DIO_voidSetPinValue+0x8e>
     e1c:	61 30       	cpi	r22, 0x01	; 1
     e1e:	09 f0       	breq	.+2      	; 0xe22 <M_DIO_voidSetPinValue+0x16>
     e20:	7b c0       	rjmp	.+246    	; 0xf18 <M_DIO_voidSetPinValue+0x10c>
     e22:	91 30       	cpi	r25, 0x01	; 1
     e24:	99 f0       	breq	.+38     	; 0xe4c <M_DIO_voidSetPinValue+0x40>
     e26:	28 f0       	brcs	.+10     	; 0xe32 <M_DIO_voidSetPinValue+0x26>
     e28:	92 30       	cpi	r25, 0x02	; 2
     e2a:	e9 f0       	breq	.+58     	; 0xe66 <M_DIO_voidSetPinValue+0x5a>
     e2c:	93 30       	cpi	r25, 0x03	; 3
     e2e:	41 f1       	breq	.+80     	; 0xe80 <M_DIO_voidSetPinValue+0x74>
     e30:	08 95       	ret
     e32:	4b b3       	in	r20, 0x1b	; 27
     e34:	21 e0       	ldi	r18, 0x01	; 1
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	b9 01       	movw	r22, r18
     e3a:	02 c0       	rjmp	.+4      	; 0xe40 <M_DIO_voidSetPinValue+0x34>
     e3c:	66 0f       	add	r22, r22
     e3e:	77 1f       	adc	r23, r23
     e40:	8a 95       	dec	r24
     e42:	e2 f7       	brpl	.-8      	; 0xe3c <M_DIO_voidSetPinValue+0x30>
     e44:	cb 01       	movw	r24, r22
     e46:	84 2b       	or	r24, r20
     e48:	8b bb       	out	0x1b, r24	; 27
     e4a:	08 95       	ret
     e4c:	48 b3       	in	r20, 0x18	; 24
     e4e:	21 e0       	ldi	r18, 0x01	; 1
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	b9 01       	movw	r22, r18
     e54:	02 c0       	rjmp	.+4      	; 0xe5a <M_DIO_voidSetPinValue+0x4e>
     e56:	66 0f       	add	r22, r22
     e58:	77 1f       	adc	r23, r23
     e5a:	8a 95       	dec	r24
     e5c:	e2 f7       	brpl	.-8      	; 0xe56 <M_DIO_voidSetPinValue+0x4a>
     e5e:	cb 01       	movw	r24, r22
     e60:	84 2b       	or	r24, r20
     e62:	88 bb       	out	0x18, r24	; 24
     e64:	08 95       	ret
     e66:	45 b3       	in	r20, 0x15	; 21
     e68:	21 e0       	ldi	r18, 0x01	; 1
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	b9 01       	movw	r22, r18
     e6e:	02 c0       	rjmp	.+4      	; 0xe74 <M_DIO_voidSetPinValue+0x68>
     e70:	66 0f       	add	r22, r22
     e72:	77 1f       	adc	r23, r23
     e74:	8a 95       	dec	r24
     e76:	e2 f7       	brpl	.-8      	; 0xe70 <M_DIO_voidSetPinValue+0x64>
     e78:	cb 01       	movw	r24, r22
     e7a:	84 2b       	or	r24, r20
     e7c:	85 bb       	out	0x15, r24	; 21
     e7e:	08 95       	ret
     e80:	42 b3       	in	r20, 0x12	; 18
     e82:	21 e0       	ldi	r18, 0x01	; 1
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	b9 01       	movw	r22, r18
     e88:	02 c0       	rjmp	.+4      	; 0xe8e <M_DIO_voidSetPinValue+0x82>
     e8a:	66 0f       	add	r22, r22
     e8c:	77 1f       	adc	r23, r23
     e8e:	8a 95       	dec	r24
     e90:	e2 f7       	brpl	.-8      	; 0xe8a <M_DIO_voidSetPinValue+0x7e>
     e92:	cb 01       	movw	r24, r22
     e94:	84 2b       	or	r24, r20
     e96:	82 bb       	out	0x12, r24	; 18
     e98:	08 95       	ret
     e9a:	91 30       	cpi	r25, 0x01	; 1
     e9c:	a1 f0       	breq	.+40     	; 0xec6 <M_DIO_voidSetPinValue+0xba>
     e9e:	28 f0       	brcs	.+10     	; 0xeaa <M_DIO_voidSetPinValue+0x9e>
     ea0:	92 30       	cpi	r25, 0x02	; 2
     ea2:	f9 f0       	breq	.+62     	; 0xee2 <M_DIO_voidSetPinValue+0xd6>
     ea4:	93 30       	cpi	r25, 0x03	; 3
     ea6:	59 f1       	breq	.+86     	; 0xefe <M_DIO_voidSetPinValue+0xf2>
     ea8:	08 95       	ret
     eaa:	4b b3       	in	r20, 0x1b	; 27
     eac:	21 e0       	ldi	r18, 0x01	; 1
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	b9 01       	movw	r22, r18
     eb2:	02 c0       	rjmp	.+4      	; 0xeb8 <M_DIO_voidSetPinValue+0xac>
     eb4:	66 0f       	add	r22, r22
     eb6:	77 1f       	adc	r23, r23
     eb8:	8a 95       	dec	r24
     eba:	e2 f7       	brpl	.-8      	; 0xeb4 <M_DIO_voidSetPinValue+0xa8>
     ebc:	cb 01       	movw	r24, r22
     ebe:	80 95       	com	r24
     ec0:	84 23       	and	r24, r20
     ec2:	8b bb       	out	0x1b, r24	; 27
     ec4:	08 95       	ret
     ec6:	48 b3       	in	r20, 0x18	; 24
     ec8:	21 e0       	ldi	r18, 0x01	; 1
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	b9 01       	movw	r22, r18
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <M_DIO_voidSetPinValue+0xc8>
     ed0:	66 0f       	add	r22, r22
     ed2:	77 1f       	adc	r23, r23
     ed4:	8a 95       	dec	r24
     ed6:	e2 f7       	brpl	.-8      	; 0xed0 <M_DIO_voidSetPinValue+0xc4>
     ed8:	cb 01       	movw	r24, r22
     eda:	80 95       	com	r24
     edc:	84 23       	and	r24, r20
     ede:	88 bb       	out	0x18, r24	; 24
     ee0:	08 95       	ret
     ee2:	45 b3       	in	r20, 0x15	; 21
     ee4:	21 e0       	ldi	r18, 0x01	; 1
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	b9 01       	movw	r22, r18
     eea:	02 c0       	rjmp	.+4      	; 0xef0 <M_DIO_voidSetPinValue+0xe4>
     eec:	66 0f       	add	r22, r22
     eee:	77 1f       	adc	r23, r23
     ef0:	8a 95       	dec	r24
     ef2:	e2 f7       	brpl	.-8      	; 0xeec <M_DIO_voidSetPinValue+0xe0>
     ef4:	cb 01       	movw	r24, r22
     ef6:	80 95       	com	r24
     ef8:	84 23       	and	r24, r20
     efa:	85 bb       	out	0x15, r24	; 21
     efc:	08 95       	ret
     efe:	42 b3       	in	r20, 0x12	; 18
     f00:	21 e0       	ldi	r18, 0x01	; 1
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	b9 01       	movw	r22, r18
     f06:	02 c0       	rjmp	.+4      	; 0xf0c <M_DIO_voidSetPinValue+0x100>
     f08:	66 0f       	add	r22, r22
     f0a:	77 1f       	adc	r23, r23
     f0c:	8a 95       	dec	r24
     f0e:	e2 f7       	brpl	.-8      	; 0xf08 <M_DIO_voidSetPinValue+0xfc>
     f10:	cb 01       	movw	r24, r22
     f12:	80 95       	com	r24
     f14:	84 23       	and	r24, r20
     f16:	82 bb       	out	0x12, r24	; 18
     f18:	08 95       	ret

00000f1a <M_DIO_u8GetPinValue>:
     f1a:	98 2f       	mov	r25, r24
     f1c:	96 95       	lsr	r25
     f1e:	96 95       	lsr	r25
     f20:	96 95       	lsr	r25
     f22:	48 2f       	mov	r20, r24
     f24:	47 70       	andi	r20, 0x07	; 7
     f26:	91 30       	cpi	r25, 0x01	; 1
     f28:	81 f0       	breq	.+32     	; 0xf4a <M_DIO_u8GetPinValue+0x30>
     f2a:	28 f0       	brcs	.+10     	; 0xf36 <M_DIO_u8GetPinValue+0x1c>
     f2c:	92 30       	cpi	r25, 0x02	; 2
     f2e:	b9 f0       	breq	.+46     	; 0xf5e <M_DIO_u8GetPinValue+0x44>
     f30:	93 30       	cpi	r25, 0x03	; 3
     f32:	f9 f0       	breq	.+62     	; 0xf72 <M_DIO_u8GetPinValue+0x58>
     f34:	28 c0       	rjmp	.+80     	; 0xf86 <M_DIO_u8GetPinValue+0x6c>
     f36:	99 b3       	in	r25, 0x19	; 25
     f38:	89 2f       	mov	r24, r25
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	02 c0       	rjmp	.+4      	; 0xf42 <M_DIO_u8GetPinValue+0x28>
     f3e:	95 95       	asr	r25
     f40:	87 95       	ror	r24
     f42:	4a 95       	dec	r20
     f44:	e2 f7       	brpl	.-8      	; 0xf3e <M_DIO_u8GetPinValue+0x24>
     f46:	81 70       	andi	r24, 0x01	; 1
     f48:	08 95       	ret
     f4a:	26 b3       	in	r18, 0x16	; 22
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	c9 01       	movw	r24, r18
     f50:	02 c0       	rjmp	.+4      	; 0xf56 <M_DIO_u8GetPinValue+0x3c>
     f52:	95 95       	asr	r25
     f54:	87 95       	ror	r24
     f56:	4a 95       	dec	r20
     f58:	e2 f7       	brpl	.-8      	; 0xf52 <M_DIO_u8GetPinValue+0x38>
     f5a:	81 70       	andi	r24, 0x01	; 1
     f5c:	08 95       	ret
     f5e:	23 b3       	in	r18, 0x13	; 19
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	c9 01       	movw	r24, r18
     f64:	02 c0       	rjmp	.+4      	; 0xf6a <M_DIO_u8GetPinValue+0x50>
     f66:	95 95       	asr	r25
     f68:	87 95       	ror	r24
     f6a:	4a 95       	dec	r20
     f6c:	e2 f7       	brpl	.-8      	; 0xf66 <M_DIO_u8GetPinValue+0x4c>
     f6e:	81 70       	andi	r24, 0x01	; 1
     f70:	08 95       	ret
     f72:	20 b3       	in	r18, 0x10	; 16
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	c9 01       	movw	r24, r18
     f78:	02 c0       	rjmp	.+4      	; 0xf7e <M_DIO_u8GetPinValue+0x64>
     f7a:	95 95       	asr	r25
     f7c:	87 95       	ror	r24
     f7e:	4a 95       	dec	r20
     f80:	e2 f7       	brpl	.-8      	; 0xf7a <M_DIO_u8GetPinValue+0x60>
     f82:	81 70       	andi	r24, 0x01	; 1
     f84:	08 95       	ret
     f86:	80 e0       	ldi	r24, 0x00	; 0
     f88:	08 95       	ret

00000f8a <M_DIO_voidSetPortDirection>:

void M_DIO_voidSetPortDirection(u8 Copy_u8PortId,u8 Copy_u8Direction)
{
	switch(Copy_u8Direction)
     f8a:	66 23       	and	r22, r22
     f8c:	b1 f0       	breq	.+44     	; 0xfba <M_DIO_voidSetPortDirection+0x30>
     f8e:	61 30       	cpi	r22, 0x01	; 1
     f90:	19 f5       	brne	.+70     	; 0xfd8 <M_DIO_voidSetPortDirection+0x4e>
	{
		case OUTPUT:
		switch(Copy_u8PortId)
     f92:	81 30       	cpi	r24, 0x01	; 1
     f94:	49 f0       	breq	.+18     	; 0xfa8 <M_DIO_voidSetPortDirection+0x1e>
     f96:	28 f0       	brcs	.+10     	; 0xfa2 <M_DIO_voidSetPortDirection+0x18>
     f98:	82 30       	cpi	r24, 0x02	; 2
     f9a:	49 f0       	breq	.+18     	; 0xfae <M_DIO_voidSetPortDirection+0x24>
     f9c:	83 30       	cpi	r24, 0x03	; 3
     f9e:	51 f0       	breq	.+20     	; 0xfb4 <M_DIO_voidSetPortDirection+0x2a>
     fa0:	08 95       	ret
		{
			case PORT_A:
			DDRA = 0xFF;
     fa2:	8f ef       	ldi	r24, 0xFF	; 255
     fa4:	8a bb       	out	0x1a, r24	; 26
			break;
     fa6:	08 95       	ret
			case PORT_B:
			DDRB = 0xFF;
     fa8:	8f ef       	ldi	r24, 0xFF	; 255
     faa:	87 bb       	out	0x17, r24	; 23
			break;
     fac:	08 95       	ret
			case PORT_C:
			DDRC = 0xFF;
     fae:	8f ef       	ldi	r24, 0xFF	; 255
     fb0:	84 bb       	out	0x14, r24	; 20
			break;
     fb2:	08 95       	ret
			case PORT_D:
			DDRD = 0xFF;
     fb4:	8f ef       	ldi	r24, 0xFF	; 255
     fb6:	81 bb       	out	0x11, r24	; 17
			break;
     fb8:	08 95       	ret
		}
		break;
		case INPUT:
		switch(Copy_u8PortId)
     fba:	81 30       	cpi	r24, 0x01	; 1
     fbc:	41 f0       	breq	.+16     	; 0xfce <M_DIO_voidSetPortDirection+0x44>
     fbe:	28 f0       	brcs	.+10     	; 0xfca <M_DIO_voidSetPortDirection+0x40>
     fc0:	82 30       	cpi	r24, 0x02	; 2
     fc2:	39 f0       	breq	.+14     	; 0xfd2 <M_DIO_voidSetPortDirection+0x48>
     fc4:	83 30       	cpi	r24, 0x03	; 3
     fc6:	39 f0       	breq	.+14     	; 0xfd6 <M_DIO_voidSetPortDirection+0x4c>
     fc8:	08 95       	ret
		{
			case PORT_A:
			DDRA = 0x00;
     fca:	1a ba       	out	0x1a, r1	; 26
			break;
     fcc:	08 95       	ret
			case PORT_B:
			DDRB = 0x00;
     fce:	17 ba       	out	0x17, r1	; 23
			break;
     fd0:	08 95       	ret
			case PORT_C:
			DDRC = 0x00;
     fd2:	14 ba       	out	0x14, r1	; 20
			break;
     fd4:	08 95       	ret
			case PORT_D:
			DDRD = 0x00;
     fd6:	11 ba       	out	0x11, r1	; 17
     fd8:	08 95       	ret

00000fda <M_DIO_voidSetPortValue>:
		break;
	}
}
void M_DIO_voidSetPortValue(u8 Copy_u8PortId,u8 Copy_u8Value)
{
	switch(Copy_u8PortId)
     fda:	81 30       	cpi	r24, 0x01	; 1
     fdc:	41 f0       	breq	.+16     	; 0xfee <M_DIO_voidSetPortValue+0x14>
     fde:	28 f0       	brcs	.+10     	; 0xfea <M_DIO_voidSetPortValue+0x10>
     fe0:	82 30       	cpi	r24, 0x02	; 2
     fe2:	39 f0       	breq	.+14     	; 0xff2 <M_DIO_voidSetPortValue+0x18>
     fe4:	83 30       	cpi	r24, 0x03	; 3
     fe6:	39 f0       	breq	.+14     	; 0xff6 <M_DIO_voidSetPortValue+0x1c>
     fe8:	08 95       	ret
		{
			case PORT_A:
			PORTA = Copy_u8Value;
     fea:	6b bb       	out	0x1b, r22	; 27
			break;
     fec:	08 95       	ret
			case PORT_B:
			PORTB = Copy_u8Value;
     fee:	68 bb       	out	0x18, r22	; 24
			break;
     ff0:	08 95       	ret
			case PORT_C:
			PORTC = Copy_u8Value;
     ff2:	65 bb       	out	0x15, r22	; 21
			break;
     ff4:	08 95       	ret
			case PORT_D:
			PORTD = Copy_u8Value;
     ff6:	62 bb       	out	0x12, r22	; 18
     ff8:	08 95       	ret

00000ffa <__vector_1>:
	}
}

/***********************************EXTI0 ISR***********************************/

ISR(INT0_vect) {
     ffa:	1f 92       	push	r1
     ffc:	0f 92       	push	r0
     ffe:	0f b6       	in	r0, 0x3f	; 63
    1000:	0f 92       	push	r0
    1002:	11 24       	eor	r1, r1
    1004:	2f 93       	push	r18
    1006:	3f 93       	push	r19
    1008:	4f 93       	push	r20
    100a:	5f 93       	push	r21
    100c:	6f 93       	push	r22
    100e:	7f 93       	push	r23
    1010:	8f 93       	push	r24
    1012:	9f 93       	push	r25
    1014:	af 93       	push	r26
    1016:	bf 93       	push	r27
    1018:	ef 93       	push	r30
    101a:	ff 93       	push	r31
	if (PTR_FUNC_INT0 != NULL) {
    101c:	e0 91 be 00 	lds	r30, 0x00BE	; 0x8000be <PTR_FUNC_INT0>
    1020:	f0 91 bf 00 	lds	r31, 0x00BF	; 0x8000bf <PTR_FUNC_INT0+0x1>
    1024:	30 97       	sbiw	r30, 0x00	; 0
    1026:	09 f0       	breq	.+2      	; 0x102a <__vector_1+0x30>
		PTR_FUNC_INT0();
    1028:	09 95       	icall
	}
}
    102a:	ff 91       	pop	r31
    102c:	ef 91       	pop	r30
    102e:	bf 91       	pop	r27
    1030:	af 91       	pop	r26
    1032:	9f 91       	pop	r25
    1034:	8f 91       	pop	r24
    1036:	7f 91       	pop	r23
    1038:	6f 91       	pop	r22
    103a:	5f 91       	pop	r21
    103c:	4f 91       	pop	r20
    103e:	3f 91       	pop	r19
    1040:	2f 91       	pop	r18
    1042:	0f 90       	pop	r0
    1044:	0f be       	out	0x3f, r0	; 63
    1046:	0f 90       	pop	r0
    1048:	1f 90       	pop	r1
    104a:	18 95       	reti

0000104c <__vector_2>:

/***********************************EXTI1 ISR***********************************/
ISR(INT1_vect) {
    104c:	1f 92       	push	r1
    104e:	0f 92       	push	r0
    1050:	0f b6       	in	r0, 0x3f	; 63
    1052:	0f 92       	push	r0
    1054:	11 24       	eor	r1, r1
    1056:	2f 93       	push	r18
    1058:	3f 93       	push	r19
    105a:	4f 93       	push	r20
    105c:	5f 93       	push	r21
    105e:	6f 93       	push	r22
    1060:	7f 93       	push	r23
    1062:	8f 93       	push	r24
    1064:	9f 93       	push	r25
    1066:	af 93       	push	r26
    1068:	bf 93       	push	r27
    106a:	ef 93       	push	r30
    106c:	ff 93       	push	r31
	if (PTR_FUNC_INT1 != NULL) {
    106e:	e0 91 bc 00 	lds	r30, 0x00BC	; 0x8000bc <PTR_FUNC_INT1>
    1072:	f0 91 bd 00 	lds	r31, 0x00BD	; 0x8000bd <PTR_FUNC_INT1+0x1>
    1076:	30 97       	sbiw	r30, 0x00	; 0
    1078:	09 f0       	breq	.+2      	; 0x107c <__vector_2+0x30>
		PTR_FUNC_INT1();
    107a:	09 95       	icall
	}
}
    107c:	ff 91       	pop	r31
    107e:	ef 91       	pop	r30
    1080:	bf 91       	pop	r27
    1082:	af 91       	pop	r26
    1084:	9f 91       	pop	r25
    1086:	8f 91       	pop	r24
    1088:	7f 91       	pop	r23
    108a:	6f 91       	pop	r22
    108c:	5f 91       	pop	r21
    108e:	4f 91       	pop	r20
    1090:	3f 91       	pop	r19
    1092:	2f 91       	pop	r18
    1094:	0f 90       	pop	r0
    1096:	0f be       	out	0x3f, r0	; 63
    1098:	0f 90       	pop	r0
    109a:	1f 90       	pop	r1
    109c:	18 95       	reti

0000109e <__vector_3>:
/***********************************EXTI2 ISR***********************************/
ISR(INT2_vect) {
    109e:	1f 92       	push	r1
    10a0:	0f 92       	push	r0
    10a2:	0f b6       	in	r0, 0x3f	; 63
    10a4:	0f 92       	push	r0
    10a6:	11 24       	eor	r1, r1
    10a8:	2f 93       	push	r18
    10aa:	3f 93       	push	r19
    10ac:	4f 93       	push	r20
    10ae:	5f 93       	push	r21
    10b0:	6f 93       	push	r22
    10b2:	7f 93       	push	r23
    10b4:	8f 93       	push	r24
    10b6:	9f 93       	push	r25
    10b8:	af 93       	push	r26
    10ba:	bf 93       	push	r27
    10bc:	ef 93       	push	r30
    10be:	ff 93       	push	r31
	if (PTR_FUNC_INT2 != NULL) {
    10c0:	e0 91 ba 00 	lds	r30, 0x00BA	; 0x8000ba <PTR_FUNC_INT2>
    10c4:	f0 91 bb 00 	lds	r31, 0x00BB	; 0x8000bb <PTR_FUNC_INT2+0x1>
    10c8:	30 97       	sbiw	r30, 0x00	; 0
    10ca:	09 f0       	breq	.+2      	; 0x10ce <__vector_3+0x30>
		PTR_FUNC_INT2();
    10cc:	09 95       	icall
	}
}
    10ce:	ff 91       	pop	r31
    10d0:	ef 91       	pop	r30
    10d2:	bf 91       	pop	r27
    10d4:	af 91       	pop	r26
    10d6:	9f 91       	pop	r25
    10d8:	8f 91       	pop	r24
    10da:	7f 91       	pop	r23
    10dc:	6f 91       	pop	r22
    10de:	5f 91       	pop	r21
    10e0:	4f 91       	pop	r20
    10e2:	3f 91       	pop	r19
    10e4:	2f 91       	pop	r18
    10e6:	0f 90       	pop	r0
    10e8:	0f be       	out	0x3f, r0	; 63
    10ea:	0f 90       	pop	r0
    10ec:	1f 90       	pop	r1
    10ee:	18 95       	reti

000010f0 <M_Global_Interrupt_Enable>:
#include "GIE_private.h"
#include "GIE_interface.h"

void M_Global_Interrupt_Enable(void)
{
	SET_BIT(SREG,GIE);
    10f0:	8f b7       	in	r24, 0x3f	; 63
    10f2:	80 68       	ori	r24, 0x80	; 128
    10f4:	8f bf       	out	0x3f, r24	; 63
    10f6:	08 95       	ret

000010f8 <M_Timer0_Init>:
	else
	{
		state = NULL_POINTER;
	}
	return state;
}
    10f8:	83 b7       	in	r24, 0x33	; 51
    10fa:	8f 7b       	andi	r24, 0xBF	; 191
    10fc:	83 bf       	out	0x33, r24	; 51
    10fe:	83 b7       	in	r24, 0x33	; 51
    1100:	87 7f       	andi	r24, 0xF7	; 247
    1102:	83 bf       	out	0x33, r24	; 51
    1104:	83 b7       	in	r24, 0x33	; 51
    1106:	8f 7c       	andi	r24, 0xCF	; 207
    1108:	83 bf       	out	0x33, r24	; 51
    110a:	83 b7       	in	r24, 0x33	; 51
    110c:	83 bf       	out	0x33, r24	; 51
    110e:	82 e0       	ldi	r24, 0x02	; 2
    1110:	08 95       	ret

00001112 <M_Timer0_start>:
    1112:	83 b7       	in	r24, 0x33	; 51
    1114:	88 7f       	andi	r24, 0xF8	; 248
    1116:	83 bf       	out	0x33, r24	; 51
    1118:	83 b7       	in	r24, 0x33	; 51
    111a:	85 60       	ori	r24, 0x05	; 5
    111c:	83 bf       	out	0x33, r24	; 51
    111e:	82 e0       	ldi	r24, 0x02	; 2
    1120:	08 95       	ret

00001122 <M_Timer0_stop>:
    1122:	83 b7       	in	r24, 0x33	; 51
    1124:	88 7f       	andi	r24, 0xF8	; 248
    1126:	83 bf       	out	0x33, r24	; 51
    1128:	82 e0       	ldi	r24, 0x02	; 2
    112a:	08 95       	ret

0000112c <M_TIMER0_EnableInt>:
    112c:	88 23       	and	r24, r24
    112e:	19 f0       	breq	.+6      	; 0x1136 <M_TIMER0_EnableInt+0xa>
    1130:	81 30       	cpi	r24, 0x01	; 1
    1132:	31 f0       	breq	.+12     	; 0x1140 <M_TIMER0_EnableInt+0x14>
    1134:	0a c0       	rjmp	.+20     	; 0x114a <M_TIMER0_EnableInt+0x1e>
    1136:	89 b7       	in	r24, 0x39	; 57
    1138:	81 60       	ori	r24, 0x01	; 1
    113a:	89 bf       	out	0x39, r24	; 57
    113c:	82 e0       	ldi	r24, 0x02	; 2
    113e:	08 95       	ret
    1140:	89 b7       	in	r24, 0x39	; 57
    1142:	82 60       	ori	r24, 0x02	; 2
    1144:	89 bf       	out	0x39, r24	; 57
    1146:	82 e0       	ldi	r24, 0x02	; 2
    1148:	08 95       	ret
    114a:	80 e0       	ldi	r24, 0x00	; 0
    114c:	08 95       	ret

0000114e <__vector_10>:
	   if(PTR_TIMER0_OVF!=NULL)  //call function in application layer
	   {
		   PTR_TIMER0_OVF();
	   }
   }
}
    114e:	1f 92       	push	r1
    1150:	0f 92       	push	r0
    1152:	0f b6       	in	r0, 0x3f	; 63
    1154:	0f 92       	push	r0
    1156:	11 24       	eor	r1, r1
    1158:	2f 93       	push	r18
    115a:	3f 93       	push	r19
    115c:	4f 93       	push	r20
    115e:	5f 93       	push	r21
    1160:	6f 93       	push	r22
    1162:	7f 93       	push	r23
    1164:	8f 93       	push	r24
    1166:	9f 93       	push	r25
    1168:	af 93       	push	r26
    116a:	bf 93       	push	r27
    116c:	ef 93       	push	r30
    116e:	ff 93       	push	r31
*/
ISR(TIMER0_OC_vect)
    1170:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <cmpcounter.1785>
    1174:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <cmpcounter.1785+0x1>
    1178:	a0 91 c2 00 	lds	r26, 0x00C2	; 0x8000c2 <cmpcounter.1785+0x2>
    117c:	b0 91 c3 00 	lds	r27, 0x00C3	; 0x8000c3 <cmpcounter.1785+0x3>
    1180:	01 96       	adiw	r24, 0x01	; 1
    1182:	a1 1d       	adc	r26, r1
    1184:	b1 1d       	adc	r27, r1
    1186:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <cmpcounter.1785>
    118a:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <cmpcounter.1785+0x1>
    118e:	a0 93 c2 00 	sts	0x00C2, r26	; 0x8000c2 <cmpcounter.1785+0x2>
    1192:	b0 93 c3 00 	sts	0x00C3, r27	; 0x8000c3 <cmpcounter.1785+0x3>
{
    1196:	40 91 c6 00 	lds	r20, 0x00C6	; 0x8000c6 <session_counter>
    119a:	50 91 c7 00 	lds	r21, 0x00C7	; 0x8000c7 <session_counter+0x1>
    119e:	60 91 c8 00 	lds	r22, 0x00C8	; 0x8000c8 <session_counter+0x2>
    11a2:	70 91 c9 00 	lds	r23, 0x00C9	; 0x8000c9 <session_counter+0x3>
    11a6:	4f 5f       	subi	r20, 0xFF	; 255
    11a8:	5f 4f       	sbci	r21, 0xFF	; 255
    11aa:	6f 4f       	sbci	r22, 0xFF	; 255
    11ac:	7f 4f       	sbci	r23, 0xFF	; 255
    11ae:	40 93 c6 00 	sts	0x00C6, r20	; 0x8000c6 <session_counter>
    11b2:	50 93 c7 00 	sts	0x00C7, r21	; 0x8000c7 <session_counter+0x1>
    11b6:	60 93 c8 00 	sts	0x00C8, r22	; 0x8000c8 <session_counter+0x2>
    11ba:	70 93 c9 00 	sts	0x00C9, r23	; 0x8000c9 <session_counter+0x3>
   static u32 cmpcounter = 0;
    11be:	89 2b       	or	r24, r25
    11c0:	8a 2b       	or	r24, r26
    11c2:	8b 2b       	or	r24, r27
    11c4:	79 f4       	brne	.+30     	; 0x11e4 <__vector_10+0x96>
   cmpcounter++;
   session_counter++;
    11c6:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <cmpcounter.1785>
    11ca:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <cmpcounter.1785+0x1>
    11ce:	10 92 c2 00 	sts	0x00C2, r1	; 0x8000c2 <cmpcounter.1785+0x2>
    11d2:	10 92 c3 00 	sts	0x00C3, r1	; 0x8000c3 <cmpcounter.1785+0x3>
   if(cmpcounter == NumberOfCmpMatches)
    11d6:	e0 91 c4 00 	lds	r30, 0x00C4	; 0x8000c4 <PTR_TIMER0_OC>
    11da:	f0 91 c5 00 	lds	r31, 0x00C5	; 0x8000c5 <PTR_TIMER0_OC+0x1>
    11de:	30 97       	sbiw	r30, 0x00	; 0
    11e0:	09 f0       	breq	.+2      	; 0x11e4 <__vector_10+0x96>
   {
	   cmpcounter=0;
    11e2:	09 95       	icall
	   if(PTR_TIMER0_OC!=NULL)
	   {
		   PTR_TIMER0_OC();
    11e4:	ff 91       	pop	r31
    11e6:	ef 91       	pop	r30
    11e8:	bf 91       	pop	r27
    11ea:	af 91       	pop	r26
    11ec:	9f 91       	pop	r25
    11ee:	8f 91       	pop	r24
    11f0:	7f 91       	pop	r23
    11f2:	6f 91       	pop	r22
    11f4:	5f 91       	pop	r21
    11f6:	4f 91       	pop	r20
    11f8:	3f 91       	pop	r19
    11fa:	2f 91       	pop	r18
    11fc:	0f 90       	pop	r0
    11fe:	0f be       	out	0x3f, r0	; 63
    1200:	0f 90       	pop	r0
    1202:	1f 90       	pop	r1
    1204:	18 95       	reti

00001206 <M_UART_voidInit>:
	UART_RX_Fptr = LocalFptr;
}

void M_UART_void_TX_SetCallBack(void (*LocalFptr)(void))
{
	UART_TX_Fptr = LocalFptr;
    1206:	83 e3       	ldi	r24, 0x33	; 51
    1208:	89 b9       	out	0x09, r24	; 9
    120a:	8b b1       	in	r24, 0x0b	; 11
    120c:	8d 7f       	andi	r24, 0xFD	; 253
    120e:	8b b9       	out	0x0b, r24	; 11
    1210:	8a b1       	in	r24, 0x0a	; 10
    1212:	88 60       	ori	r24, 0x08	; 8
    1214:	8a b9       	out	0x0a, r24	; 10
    1216:	8a b1       	in	r24, 0x0a	; 10
    1218:	80 61       	ori	r24, 0x10	; 16
    121a:	8a b9       	out	0x0a, r24	; 10
    121c:	0e 94 78 08 	call	0x10f0	; 0x10f0 <M_Global_Interrupt_Enable>
    1220:	08 95       	ret

00001222 <M_UART_voidSend>:
    1222:	5d 9b       	sbis	0x0b, 5	; 11
    1224:	fe cf       	rjmp	.-4      	; 0x1222 <M_UART_voidSend>
    1226:	8c b9       	out	0x0c, r24	; 12
    1228:	08 95       	ret

0000122a <M_UART_u8ReceiveNoBlock>:
    122a:	8c b1       	in	r24, 0x0c	; 12
    122c:	08 95       	ret

0000122e <M_UART_void_RX_InterruptEnable>:
    122e:	8a b1       	in	r24, 0x0a	; 10
    1230:	80 68       	ori	r24, 0x80	; 128
    1232:	8a b9       	out	0x0a, r24	; 10
    1234:	08 95       	ret

00001236 <M_UART_void_RX_SetCallBack>:
    1236:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <UART_RX_Fptr+0x1>
    123a:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <UART_RX_Fptr>
    123e:	08 95       	ret

00001240 <__vector_13>:
}

 /****************************************************/
 ISR(UART_RX_vect)
 {
    1240:	1f 92       	push	r1
    1242:	0f 92       	push	r0
    1244:	0f b6       	in	r0, 0x3f	; 63
    1246:	0f 92       	push	r0
    1248:	11 24       	eor	r1, r1
    124a:	2f 93       	push	r18
    124c:	3f 93       	push	r19
    124e:	4f 93       	push	r20
    1250:	5f 93       	push	r21
    1252:	6f 93       	push	r22
    1254:	7f 93       	push	r23
    1256:	8f 93       	push	r24
    1258:	9f 93       	push	r25
    125a:	af 93       	push	r26
    125c:	bf 93       	push	r27
    125e:	ef 93       	push	r30
    1260:	ff 93       	push	r31
 	if (UART_RX_Fptr!=NULL)
    1262:	e0 91 cc 00 	lds	r30, 0x00CC	; 0x8000cc <UART_RX_Fptr>
    1266:	f0 91 cd 00 	lds	r31, 0x00CD	; 0x8000cd <UART_RX_Fptr+0x1>
    126a:	30 97       	sbiw	r30, 0x00	; 0
    126c:	09 f0       	breq	.+2      	; 0x1270 <__vector_13+0x30>
 	{
 		UART_RX_Fptr();
    126e:	09 95       	icall
 	}
 }
    1270:	ff 91       	pop	r31
    1272:	ef 91       	pop	r30
    1274:	bf 91       	pop	r27
    1276:	af 91       	pop	r26
    1278:	9f 91       	pop	r25
    127a:	8f 91       	pop	r24
    127c:	7f 91       	pop	r23
    127e:	6f 91       	pop	r22
    1280:	5f 91       	pop	r21
    1282:	4f 91       	pop	r20
    1284:	3f 91       	pop	r19
    1286:	2f 91       	pop	r18
    1288:	0f 90       	pop	r0
    128a:	0f be       	out	0x3f, r0	; 63
    128c:	0f 90       	pop	r0
    128e:	1f 90       	pop	r1
    1290:	18 95       	reti

00001292 <__vector_15>:

 ISR(UART_TX_vect)
 {
    1292:	1f 92       	push	r1
    1294:	0f 92       	push	r0
    1296:	0f b6       	in	r0, 0x3f	; 63
    1298:	0f 92       	push	r0
    129a:	11 24       	eor	r1, r1
    129c:	2f 93       	push	r18
    129e:	3f 93       	push	r19
    12a0:	4f 93       	push	r20
    12a2:	5f 93       	push	r21
    12a4:	6f 93       	push	r22
    12a6:	7f 93       	push	r23
    12a8:	8f 93       	push	r24
    12aa:	9f 93       	push	r25
    12ac:	af 93       	push	r26
    12ae:	bf 93       	push	r27
    12b0:	ef 93       	push	r30
    12b2:	ff 93       	push	r31
 	if (UART_TX_Fptr!=NULL)
    12b4:	e0 91 ca 00 	lds	r30, 0x00CA	; 0x8000ca <UART_TX_Fptr>
    12b8:	f0 91 cb 00 	lds	r31, 0x00CB	; 0x8000cb <UART_TX_Fptr+0x1>
    12bc:	30 97       	sbiw	r30, 0x00	; 0
    12be:	09 f0       	breq	.+2      	; 0x12c2 <__vector_15+0x30>
 	{
 		UART_TX_Fptr();
    12c0:	09 95       	icall
 	}
 }
    12c2:	ff 91       	pop	r31
    12c4:	ef 91       	pop	r30
    12c6:	bf 91       	pop	r27
    12c8:	af 91       	pop	r26
    12ca:	9f 91       	pop	r25
    12cc:	8f 91       	pop	r24
    12ce:	7f 91       	pop	r23
    12d0:	6f 91       	pop	r22
    12d2:	5f 91       	pop	r21
    12d4:	4f 91       	pop	r20
    12d6:	3f 91       	pop	r19
    12d8:	2f 91       	pop	r18
    12da:	0f 90       	pop	r0
    12dc:	0f be       	out	0x3f, r0	; 63
    12de:	0f 90       	pop	r0
    12e0:	1f 90       	pop	r1
    12e2:	18 95       	reti

000012e4 <rx_func>:
{
	M_UART_void_RX_SetCallBack(RX_FUNC);
	M_UART_void_RX_InterruptEnable();
	RX_str=str;

}
    12e4:	cf 93       	push	r28
    12e6:	df 93       	push	r29
    12e8:	c0 91 d7 00 	lds	r28, 0x00D7	; 0x8000d7 <rs_str>
    12ec:	d0 91 d8 00 	lds	r29, 0x00D8	; 0x8000d8 <rs_str+0x1>
    12f0:	0e 94 15 09 	call	0x122a	; 0x122a <M_UART_u8ReceiveNoBlock>
    12f4:	88 83       	st	Y, r24
    12f6:	df 91       	pop	r29
    12f8:	cf 91       	pop	r28
    12fa:	08 95       	ret

000012fc <S_UART_void_ReceiveCharAsynch>:
/***********************************************/
u8*rs_str;
static void rx_func (void);

void S_UART_void_ReceiveCharAsynch(u8*str)
{
    12fc:	cf 93       	push	r28
    12fe:	df 93       	push	r29
    1300:	ec 01       	movw	r28, r24
	M_UART_void_RX_SetCallBack(rx_func);
    1302:	82 e7       	ldi	r24, 0x72	; 114
    1304:	99 e0       	ldi	r25, 0x09	; 9
    1306:	0e 94 1b 09 	call	0x1236	; 0x1236 <M_UART_void_RX_SetCallBack>
	M_UART_void_RX_InterruptEnable();
    130a:	0e 94 17 09 	call	0x122e	; 0x122e <M_UART_void_RX_InterruptEnable>
	rs_str=str;
    130e:	d0 93 d8 00 	sts	0x00D8, r29	; 0x8000d8 <rs_str+0x1>
    1312:	c0 93 d7 00 	sts	0x00D7, r28	; 0x8000d7 <rs_str>
}
    1316:	df 91       	pop	r29
    1318:	cf 91       	pop	r28
    131a:	08 95       	ret

0000131c <__udivmodsi4>:
    131c:	a1 e2       	ldi	r26, 0x21	; 33
    131e:	1a 2e       	mov	r1, r26
    1320:	aa 1b       	sub	r26, r26
    1322:	bb 1b       	sub	r27, r27
    1324:	fd 01       	movw	r30, r26
    1326:	0d c0       	rjmp	.+26     	; 0x1342 <__udivmodsi4_ep>

00001328 <__udivmodsi4_loop>:
    1328:	aa 1f       	adc	r26, r26
    132a:	bb 1f       	adc	r27, r27
    132c:	ee 1f       	adc	r30, r30
    132e:	ff 1f       	adc	r31, r31
    1330:	a2 17       	cp	r26, r18
    1332:	b3 07       	cpc	r27, r19
    1334:	e4 07       	cpc	r30, r20
    1336:	f5 07       	cpc	r31, r21
    1338:	20 f0       	brcs	.+8      	; 0x1342 <__udivmodsi4_ep>
    133a:	a2 1b       	sub	r26, r18
    133c:	b3 0b       	sbc	r27, r19
    133e:	e4 0b       	sbc	r30, r20
    1340:	f5 0b       	sbc	r31, r21

00001342 <__udivmodsi4_ep>:
    1342:	66 1f       	adc	r22, r22
    1344:	77 1f       	adc	r23, r23
    1346:	88 1f       	adc	r24, r24
    1348:	99 1f       	adc	r25, r25
    134a:	1a 94       	dec	r1
    134c:	69 f7       	brne	.-38     	; 0x1328 <__udivmodsi4_loop>
    134e:	60 95       	com	r22
    1350:	70 95       	com	r23
    1352:	80 95       	com	r24
    1354:	90 95       	com	r25
    1356:	9b 01       	movw	r18, r22
    1358:	ac 01       	movw	r20, r24
    135a:	bd 01       	movw	r22, r26
    135c:	cf 01       	movw	r24, r30
    135e:	08 95       	ret

00001360 <__umulhisi3>:
    1360:	a2 9f       	mul	r26, r18
    1362:	b0 01       	movw	r22, r0
    1364:	b3 9f       	mul	r27, r19
    1366:	c0 01       	movw	r24, r0
    1368:	a3 9f       	mul	r26, r19
    136a:	70 0d       	add	r23, r0
    136c:	81 1d       	adc	r24, r1
    136e:	11 24       	eor	r1, r1
    1370:	91 1d       	adc	r25, r1
    1372:	b2 9f       	mul	r27, r18
    1374:	70 0d       	add	r23, r0
    1376:	81 1d       	adc	r24, r1
    1378:	11 24       	eor	r1, r1
    137a:	91 1d       	adc	r25, r1
    137c:	08 95       	ret

0000137e <__moddi3>:
    137e:	68 94       	set
    1380:	01 c0       	rjmp	.+2      	; 0x1384 <__divdi3_moddi3>

00001382 <__divdi3>:
    1382:	e8 94       	clt

00001384 <__divdi3_moddi3>:
    1384:	f9 2f       	mov	r31, r25
    1386:	f1 2b       	or	r31, r17
    1388:	12 f0       	brmi	.+4      	; 0x138e <__divdi3_moddi3+0xa>
    138a:	0c 94 f3 09 	jmp	0x13e6	; 0x13e6 <__udivdi3_umoddi3>
    138e:	a0 e0       	ldi	r26, 0x00	; 0
    1390:	b0 e0       	ldi	r27, 0x00	; 0
    1392:	ed ec       	ldi	r30, 0xCD	; 205
    1394:	f9 e0       	ldi	r31, 0x09	; 9
    1396:	0c 94 65 0a 	jmp	0x14ca	; 0x14ca <__prologue_saves__+0xc>
    139a:	09 2e       	mov	r0, r25
    139c:	05 94       	asr	r0
    139e:	22 f4       	brpl	.+8      	; 0x13a8 <__divdi3_moddi3+0x24>
    13a0:	0e 94 4f 0a 	call	0x149e	; 0x149e <__negdi2>
    13a4:	11 23       	and	r17, r17
    13a6:	92 f4       	brpl	.+36     	; 0x13cc <__divdi3_moddi3+0x48>
    13a8:	f0 e8       	ldi	r31, 0x80	; 128
    13aa:	0f 26       	eor	r0, r31
    13ac:	ff ef       	ldi	r31, 0xFF	; 255
    13ae:	e0 94       	com	r14
    13b0:	f0 94       	com	r15
    13b2:	00 95       	com	r16
    13b4:	10 95       	com	r17
    13b6:	b0 94       	com	r11
    13b8:	c0 94       	com	r12
    13ba:	d0 94       	com	r13
    13bc:	a1 94       	neg	r10
    13be:	bf 0a       	sbc	r11, r31
    13c0:	cf 0a       	sbc	r12, r31
    13c2:	df 0a       	sbc	r13, r31
    13c4:	ef 0a       	sbc	r14, r31
    13c6:	ff 0a       	sbc	r15, r31
    13c8:	0f 0b       	sbc	r16, r31
    13ca:	1f 0b       	sbc	r17, r31
    13cc:	0e 94 fe 09 	call	0x13fc	; 0x13fc <__udivmod64>
    13d0:	07 fc       	sbrc	r0, 7
    13d2:	0e 94 4f 0a 	call	0x149e	; 0x149e <__negdi2>
    13d6:	cd b7       	in	r28, 0x3d	; 61
    13d8:	de b7       	in	r29, 0x3e	; 62
    13da:	ec e0       	ldi	r30, 0x0C	; 12
    13dc:	0c 94 81 0a 	jmp	0x1502	; 0x1502 <__epilogue_restores__+0xc>

000013e0 <__umoddi3>:
    13e0:	68 94       	set
    13e2:	01 c0       	rjmp	.+2      	; 0x13e6 <__udivdi3_umoddi3>

000013e4 <__udivdi3>:
    13e4:	e8 94       	clt

000013e6 <__udivdi3_umoddi3>:
    13e6:	8f 92       	push	r8
    13e8:	9f 92       	push	r9
    13ea:	cf 93       	push	r28
    13ec:	df 93       	push	r29
    13ee:	0e 94 fe 09 	call	0x13fc	; 0x13fc <__udivmod64>
    13f2:	df 91       	pop	r29
    13f4:	cf 91       	pop	r28
    13f6:	9f 90       	pop	r9
    13f8:	8f 90       	pop	r8
    13fa:	08 95       	ret

000013fc <__udivmod64>:
    13fc:	88 24       	eor	r8, r8
    13fe:	99 24       	eor	r9, r9
    1400:	f4 01       	movw	r30, r8
    1402:	e4 01       	movw	r28, r8
    1404:	b0 e4       	ldi	r27, 0x40	; 64
    1406:	9f 93       	push	r25
    1408:	aa 27       	eor	r26, r26
    140a:	9a 15       	cp	r25, r10
    140c:	8b 04       	cpc	r8, r11
    140e:	9c 04       	cpc	r9, r12
    1410:	ed 05       	cpc	r30, r13
    1412:	fe 05       	cpc	r31, r14
    1414:	cf 05       	cpc	r28, r15
    1416:	d0 07       	cpc	r29, r16
    1418:	a1 07       	cpc	r26, r17
    141a:	98 f4       	brcc	.+38     	; 0x1442 <__udivmod64+0x46>
    141c:	ad 2f       	mov	r26, r29
    141e:	dc 2f       	mov	r29, r28
    1420:	cf 2f       	mov	r28, r31
    1422:	fe 2f       	mov	r31, r30
    1424:	e9 2d       	mov	r30, r9
    1426:	98 2c       	mov	r9, r8
    1428:	89 2e       	mov	r8, r25
    142a:	98 2f       	mov	r25, r24
    142c:	87 2f       	mov	r24, r23
    142e:	76 2f       	mov	r23, r22
    1430:	65 2f       	mov	r22, r21
    1432:	54 2f       	mov	r21, r20
    1434:	43 2f       	mov	r20, r19
    1436:	32 2f       	mov	r19, r18
    1438:	22 27       	eor	r18, r18
    143a:	b8 50       	subi	r27, 0x08	; 8
    143c:	31 f7       	brne	.-52     	; 0x140a <__udivmod64+0xe>
    143e:	bf 91       	pop	r27
    1440:	27 c0       	rjmp	.+78     	; 0x1490 <__udivmod64+0x94>
    1442:	1b 2e       	mov	r1, r27
    1444:	bf 91       	pop	r27
    1446:	bb 27       	eor	r27, r27
    1448:	22 0f       	add	r18, r18
    144a:	33 1f       	adc	r19, r19
    144c:	44 1f       	adc	r20, r20
    144e:	55 1f       	adc	r21, r21
    1450:	66 1f       	adc	r22, r22
    1452:	77 1f       	adc	r23, r23
    1454:	88 1f       	adc	r24, r24
    1456:	99 1f       	adc	r25, r25
    1458:	88 1c       	adc	r8, r8
    145a:	99 1c       	adc	r9, r9
    145c:	ee 1f       	adc	r30, r30
    145e:	ff 1f       	adc	r31, r31
    1460:	cc 1f       	adc	r28, r28
    1462:	dd 1f       	adc	r29, r29
    1464:	aa 1f       	adc	r26, r26
    1466:	bb 1f       	adc	r27, r27
    1468:	8a 14       	cp	r8, r10
    146a:	9b 04       	cpc	r9, r11
    146c:	ec 05       	cpc	r30, r12
    146e:	fd 05       	cpc	r31, r13
    1470:	ce 05       	cpc	r28, r14
    1472:	df 05       	cpc	r29, r15
    1474:	a0 07       	cpc	r26, r16
    1476:	b1 07       	cpc	r27, r17
    1478:	48 f0       	brcs	.+18     	; 0x148c <__udivmod64+0x90>
    147a:	8a 18       	sub	r8, r10
    147c:	9b 08       	sbc	r9, r11
    147e:	ec 09       	sbc	r30, r12
    1480:	fd 09       	sbc	r31, r13
    1482:	ce 09       	sbc	r28, r14
    1484:	df 09       	sbc	r29, r15
    1486:	a0 0b       	sbc	r26, r16
    1488:	b1 0b       	sbc	r27, r17
    148a:	21 60       	ori	r18, 0x01	; 1
    148c:	1a 94       	dec	r1
    148e:	e1 f6       	brne	.-72     	; 0x1448 <__udivmod64+0x4c>
    1490:	2e f4       	brtc	.+10     	; 0x149c <__udivmod64+0xa0>
    1492:	94 01       	movw	r18, r8
    1494:	af 01       	movw	r20, r30
    1496:	be 01       	movw	r22, r28
    1498:	cd 01       	movw	r24, r26
    149a:	00 0c       	add	r0, r0
    149c:	08 95       	ret

0000149e <__negdi2>:
    149e:	60 95       	com	r22
    14a0:	70 95       	com	r23
    14a2:	80 95       	com	r24
    14a4:	90 95       	com	r25
    14a6:	30 95       	com	r19
    14a8:	40 95       	com	r20
    14aa:	50 95       	com	r21
    14ac:	21 95       	neg	r18
    14ae:	3f 4f       	sbci	r19, 0xFF	; 255
    14b0:	4f 4f       	sbci	r20, 0xFF	; 255
    14b2:	5f 4f       	sbci	r21, 0xFF	; 255
    14b4:	6f 4f       	sbci	r22, 0xFF	; 255
    14b6:	7f 4f       	sbci	r23, 0xFF	; 255
    14b8:	8f 4f       	sbci	r24, 0xFF	; 255
    14ba:	9f 4f       	sbci	r25, 0xFF	; 255
    14bc:	08 95       	ret

000014be <__prologue_saves__>:
    14be:	2f 92       	push	r2
    14c0:	3f 92       	push	r3
    14c2:	4f 92       	push	r4
    14c4:	5f 92       	push	r5
    14c6:	6f 92       	push	r6
    14c8:	7f 92       	push	r7
    14ca:	8f 92       	push	r8
    14cc:	9f 92       	push	r9
    14ce:	af 92       	push	r10
    14d0:	bf 92       	push	r11
    14d2:	cf 92       	push	r12
    14d4:	df 92       	push	r13
    14d6:	ef 92       	push	r14
    14d8:	ff 92       	push	r15
    14da:	0f 93       	push	r16
    14dc:	1f 93       	push	r17
    14de:	cf 93       	push	r28
    14e0:	df 93       	push	r29
    14e2:	cd b7       	in	r28, 0x3d	; 61
    14e4:	de b7       	in	r29, 0x3e	; 62
    14e6:	ca 1b       	sub	r28, r26
    14e8:	db 0b       	sbc	r29, r27
    14ea:	0f b6       	in	r0, 0x3f	; 63
    14ec:	f8 94       	cli
    14ee:	de bf       	out	0x3e, r29	; 62
    14f0:	0f be       	out	0x3f, r0	; 63
    14f2:	cd bf       	out	0x3d, r28	; 61
    14f4:	09 94       	ijmp

000014f6 <__epilogue_restores__>:
    14f6:	2a 88       	ldd	r2, Y+18	; 0x12
    14f8:	39 88       	ldd	r3, Y+17	; 0x11
    14fa:	48 88       	ldd	r4, Y+16	; 0x10
    14fc:	5f 84       	ldd	r5, Y+15	; 0x0f
    14fe:	6e 84       	ldd	r6, Y+14	; 0x0e
    1500:	7d 84       	ldd	r7, Y+13	; 0x0d
    1502:	8c 84       	ldd	r8, Y+12	; 0x0c
    1504:	9b 84       	ldd	r9, Y+11	; 0x0b
    1506:	aa 84       	ldd	r10, Y+10	; 0x0a
    1508:	b9 84       	ldd	r11, Y+9	; 0x09
    150a:	c8 84       	ldd	r12, Y+8	; 0x08
    150c:	df 80       	ldd	r13, Y+7	; 0x07
    150e:	ee 80       	ldd	r14, Y+6	; 0x06
    1510:	fd 80       	ldd	r15, Y+5	; 0x05
    1512:	0c 81       	ldd	r16, Y+4	; 0x04
    1514:	1b 81       	ldd	r17, Y+3	; 0x03
    1516:	aa 81       	ldd	r26, Y+2	; 0x02
    1518:	b9 81       	ldd	r27, Y+1	; 0x01
    151a:	ce 0f       	add	r28, r30
    151c:	d1 1d       	adc	r29, r1
    151e:	0f b6       	in	r0, 0x3f	; 63
    1520:	f8 94       	cli
    1522:	de bf       	out	0x3e, r29	; 62
    1524:	0f be       	out	0x3f, r0	; 63
    1526:	cd bf       	out	0x3d, r28	; 61
    1528:	ed 01       	movw	r28, r26
    152a:	08 95       	ret

0000152c <__cmpdi2_s8>:
    152c:	00 24       	eor	r0, r0
    152e:	a7 fd       	sbrc	r26, 7
    1530:	00 94       	com	r0
    1532:	2a 17       	cp	r18, r26
    1534:	30 05       	cpc	r19, r0
    1536:	40 05       	cpc	r20, r0
    1538:	50 05       	cpc	r21, r0
    153a:	60 05       	cpc	r22, r0
    153c:	70 05       	cpc	r23, r0
    153e:	80 05       	cpc	r24, r0
    1540:	90 05       	cpc	r25, r0
    1542:	08 95       	ret

00001544 <_exit>:
    1544:	f8 94       	cli

00001546 <__stop_program>:
    1546:	ff cf       	rjmp	.-2      	; 0x1546 <__stop_program>
