
SMART_HOME_HMI_MCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c9c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000242  00800060  00001c9c  00001d30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000030  008002a2  008002a2  00001f72  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001f72  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001fa4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004e0  00000000  00000000  00001fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005242  00000000  00000000  000024c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000148e  00000000  00000000  00007702  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002de0  00000000  00000000  00008b90  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000cd8  00000000  00000000  0000b970  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001389  00000000  00000000  0000c648  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003ec7  00000000  00000000  0000d9d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000408  00000000  00000000  00011898  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 7f 0b 	jmp	0x16fe	; 0x16fe <__vector_1>
       8:	0c 94 a8 0b 	jmp	0x1750	; 0x1750 <__vector_2>
       c:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__vector_3>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 69 0d 	jmp	0x1ad2	; 0x1ad2 <__vector_6>
      1c:	0c 94 17 0d 	jmp	0x1a2e	; 0x1a2e <__vector_7>
      20:	0c 94 40 0d 	jmp	0x1a80	; 0x1a80 <__vector_8>
      24:	0c 94 ee 0c 	jmp	0x19dc	; 0x19dc <__vector_9>
      28:	0c 94 92 0c 	jmp	0x1924	; 0x1924 <__vector_10>
      2c:	0c 94 29 0c 	jmp	0x1852	; 0x1852 <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 d8 0d 	jmp	0x1bb0	; 0x1bb0 <__vector_13>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 01 0e 	jmp	0x1c02	; 0x1c02 <__vector_15>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	3b 05       	cpc	r19, r11
      56:	96 05       	cpc	r25, r6
      58:	1e 06       	cpc	r1, r30
      5a:	24 06       	cpc	r2, r20
      5c:	2a 06       	cpc	r2, r26
      5e:	30 06       	cpc	r3, r16
      60:	39 06       	cpc	r3, r25
      62:	dc 05       	cpc	r29, r12
      64:	3f 06       	cpc	r3, r31
      66:	ca 06       	cpc	r12, r26

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf e5       	ldi	r28, 0x5F	; 95
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e6       	ldi	r26, 0x60	; 96
      78:	b0 e0       	ldi	r27, 0x00	; 0
      7a:	ec e9       	ldi	r30, 0x9C	; 156
      7c:	fc e1       	ldi	r31, 0x1C	; 28
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a2 3a       	cpi	r26, 0xA2	; 162
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	22 e0       	ldi	r18, 0x02	; 2
      8c:	a2 ea       	ldi	r26, 0xA2	; 162
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a2 3d       	cpi	r26, 0xD2	; 210
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 5d 01 	call	0x2ba	; 0x2ba <main>
      9e:	0c 94 4c 0e 	jmp	0x1c98	; 0x1c98 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <Reset_voidFunc>:



void Reset_voidFunc(void)
{
	timeout_flag = TRUE;
      a6:	81 e0       	ldi	r24, 0x01	; 1
      a8:	80 93 a2 02 	sts	0x02A2, r24	; 0x8002a2 <__data_end>
      ac:	08 95       	ret

000000ae <ui8ComparePass>:


/**************************************************************************************************************************/

u8 ui8ComparePass(const u8* pass1,const u8* pass2,const u8 size)
{
      ae:	dc 01       	movw	r26, r24
	u8 pin_counter=0;//the offset of the character of the pin
      b0:	90 e0       	ldi	r25, 0x00	; 0
	u8 ret_value = TRUE;
	while (pin_counter<size)//loop till the pin is fully entered
      b2:	0d c0       	rjmp	.+26     	; 0xce <ui8ComparePass+0x20>
	{
		if (*(pass1+pin_counter)!=*(pass2+pin_counter))//if the two characters of the entered pin and the stored pin are not equal
      b4:	29 2f       	mov	r18, r25
      b6:	30 e0       	ldi	r19, 0x00	; 0
      b8:	fd 01       	movw	r30, r26
      ba:	e2 0f       	add	r30, r18
      bc:	f3 1f       	adc	r31, r19
      be:	50 81       	ld	r21, Z
      c0:	fb 01       	movw	r30, r22
      c2:	e2 0f       	add	r30, r18
      c4:	f3 1f       	adc	r31, r19
      c6:	20 81       	ld	r18, Z
      c8:	52 13       	cpse	r21, r18
      ca:	05 c0       	rjmp	.+10     	; 0xd6 <ui8ComparePass+0x28>
		{
			ret_value= FALSE;//returns false that means the two PINs are not equal
			break;//break the loop
		}
		pin_counter++;//increase thee offset by one
      cc:	9f 5f       	subi	r25, 0xFF	; 255

u8 ui8ComparePass(const u8* pass1,const u8* pass2,const u8 size)
{
	u8 pin_counter=0;//the offset of the character of the pin
	u8 ret_value = TRUE;
	while (pin_counter<size)//loop till the pin is fully entered
      ce:	94 17       	cp	r25, r20
      d0:	88 f3       	brcs	.-30     	; 0xb4 <ui8ComparePass+0x6>
/**************************************************************************************************************************/

u8 ui8ComparePass(const u8* pass1,const u8* pass2,const u8 size)
{
	u8 pin_counter=0;//the offset of the character of the pin
	u8 ret_value = TRUE;
      d2:	81 e0       	ldi	r24, 0x01	; 1
      d4:	08 95       	ret
	while (pin_counter<size)//loop till the pin is fully entered
	{
		if (*(pass1+pin_counter)!=*(pass2+pin_counter))//if the two characters of the entered pin and the stored pin are not equal
		{
			ret_value= FALSE;//returns false that means the two PINs are not equal
      d6:	80 e0       	ldi	r24, 0x00	; 0
			break;//break the loop
		}
		pin_counter++;//increase thee offset by one
	}
	return ret_value;//returns false that means the two PINs are equal since all characters of the PINs are equal
}
      d8:	08 95       	ret

000000da <u8GetKeyPressed>:
		}
	} while ( ( (key_pressed < '0') || (key_pressed > '2') ) && (timeout_flag == FALSE));//break the loop in case of valid key or time is out
}

u8 u8GetKeyPressed(const u8 u8LoginMode)
{
      da:	cf 93       	push	r28
      dc:	df 93       	push	r29
      de:	d8 2f       	mov	r29, r24
	u8 key_pressed = NO_PRESSED_KEY;
      e0:	cf ef       	ldi	r28, 0xFF	; 255
	while (key_pressed == NO_PRESSED_KEY)//repeat till the user press any key
      e2:	1d c0       	rjmp	.+58     	; 0x11e <u8GetKeyPressed+0x44>
	{
		if(timeout_flag == TRUE)
      e4:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <__data_end>
      e8:	81 30       	cpi	r24, 0x01	; 1
      ea:	d9 f0       	breq	.+54     	; 0x122 <u8GetKeyPressed+0x48>
		{
			break;
		}
		if ( (session_counter >= ADMIN_TIMEOUT && u8LoginMode == ADMIN) || ( session_counter >= GUEST_TIMEOUT && u8LoginMode == GUEST ))//check for timeout
      ec:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <session_counter>
      f0:	90 91 b6 02 	lds	r25, 0x02B6	; 0x8002b6 <session_counter+0x1>
      f4:	88 30       	cpi	r24, 0x08	; 8
      f6:	97 40       	sbci	r25, 0x07	; 7
      f8:	10 f0       	brcs	.+4      	; 0xfe <u8GetKeyPressed+0x24>
      fa:	d1 30       	cpi	r29, 0x01	; 1
      fc:	49 f0       	breq	.+18     	; 0x110 <u8GetKeyPressed+0x36>
      fe:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <session_counter>
     102:	90 91 b6 02 	lds	r25, 0x02B6	; 0x8002b6 <session_counter+0x1>
     106:	84 38       	cpi	r24, 0x84	; 132
     108:	93 40       	sbci	r25, 0x03	; 3
     10a:	30 f0       	brcs	.+12     	; 0x118 <u8GetKeyPressed+0x3e>
     10c:	d2 30       	cpi	r29, 0x02	; 2
     10e:	21 f4       	brne	.+8      	; 0x118 <u8GetKeyPressed+0x3e>
		{
			timeout_flag = TRUE;//set timeout flag to true
     110:	81 e0       	ldi	r24, 0x01	; 1
     112:	80 93 a2 02 	sts	0x02A2, r24	; 0x8002a2 <__data_end>
			break;//break the loop that wait for input from the user
     116:	05 c0       	rjmp	.+10     	; 0x122 <u8GetKeyPressed+0x48>
		}
		
		key_pressed = H_KEYPAD_u8_getPressedKey();//if the user pressed any button in keypad save the value in key_pressed
     118:	0e 94 9d 07 	call	0xf3a	; 0xf3a <H_KEYPAD_u8_getPressedKey>
     11c:	c8 2f       	mov	r28, r24
}

u8 u8GetKeyPressed(const u8 u8LoginMode)
{
	u8 key_pressed = NO_PRESSED_KEY;
	while (key_pressed == NO_PRESSED_KEY)//repeat till the user press any key
     11e:	cf 3f       	cpi	r28, 0xFF	; 255
     120:	09 f3       	breq	.-62     	; 0xe4 <u8GetKeyPressed+0xa>
			break;//break the loop that wait for input from the user
		}
		
		key_pressed = H_KEYPAD_u8_getPressedKey();//if the user pressed any button in keypad save the value in key_pressed
	}
	H_BUZZER_voidTurnOn();
     122:	0e 94 e6 06 	call	0xdcc	; 0xdcc <H_BUZZER_voidTurnOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     126:	8f ef       	ldi	r24, 0xFF	; 255
     128:	99 ef       	ldi	r25, 0xF9	; 249
     12a:	20 e0       	ldi	r18, 0x00	; 0
     12c:	81 50       	subi	r24, 0x01	; 1
     12e:	90 40       	sbci	r25, 0x00	; 0
     130:	20 40       	sbci	r18, 0x00	; 0
     132:	e1 f7       	brne	.-8      	; 0x12c <u8GetKeyPressed+0x52>
     134:	00 c0       	rjmp	.+0      	; 0x136 <u8GetKeyPressed+0x5c>
     136:	00 00       	nop
	_delay_ms(40);
	H_BUZZER_voidTurnOff();
     138:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <H_BUZZER_voidTurnOff>
	return key_pressed;
}
     13c:	8c 2f       	mov	r24, r28
     13e:	df 91       	pop	r29
     140:	cf 91       	pop	r28
     142:	08 95       	ret

00000144 <vMenuOption>:
	}
	return ret_value;//returns false that means the two PINs are equal since all characters of the PINs are equal
}

void vMenuOption(const u8 u8SelectedRoom,const u8 u8LoginMode)
{
     144:	ef 92       	push	r14
     146:	ff 92       	push	r15
     148:	0f 93       	push	r16
     14a:	1f 93       	push	r17
     14c:	cf 93       	push	r28
     14e:	df 93       	push	r29
     150:	d8 2f       	mov	r29, r24
     152:	f6 2e       	mov	r15, r22
	u8 u8StatusCode  = 0;//demand status code
	u8 u8TurnOnCode  = 0;//turn on the room or the device code
	u8 u8TurnOffCode = 0;//turn off the device or room
	response      = DEFAULT_ACK;//the response of the receiver that is sent back based on the command of the sender
     154:	8f ef       	ldi	r24, 0xFF	; 255
     156:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>

void vMenuOption(const u8 u8SelectedRoom,const u8 u8LoginMode)
{
	u8 u8StatusCode  = 0;//demand status code
	u8 u8TurnOnCode  = 0;//turn on the room or the device code
	u8 u8TurnOffCode = 0;//turn off the device or room
     15a:	e1 2c       	mov	r14, r1
}

void vMenuOption(const u8 u8SelectedRoom,const u8 u8LoginMode)
{
	u8 u8StatusCode  = 0;//demand status code
	u8 u8TurnOnCode  = 0;//turn on the room or the device code
     15c:	00 e0       	ldi	r16, 0x00	; 0
	return ret_value;//returns false that means the two PINs are equal since all characters of the PINs are equal
}

void vMenuOption(const u8 u8SelectedRoom,const u8 u8LoginMode)
{
	u8 u8StatusCode  = 0;//demand status code
     15e:	10 e0       	ldi	r17, 0x00	; 0
	response      = DEFAULT_ACK;//the response of the receiver that is sent back based on the command of the sender
	u8 key_pressed   = NO_PRESSED_KEY;//the key that is entered by the user
	
	do
	{
		H_LCD_voidClearDisplay();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     160:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <H_LCD_voidClearDisplay>
		
		/*********** ****************Set the commands to be sent to the receiver based on  the sent room or device ******************************/
		switch(u8SelectedRoom)
     164:	d5 30       	cpi	r29, 0x05	; 5
     166:	11 f1       	breq	.+68     	; 0x1ac <vMenuOption+0x68>
     168:	28 f4       	brcc	.+10     	; 0x174 <vMenuOption+0x30>
     16a:	d3 30       	cpi	r29, 0x03	; 3
     16c:	49 f0       	breq	.+18     	; 0x180 <vMenuOption+0x3c>
     16e:	d4 30       	cpi	r29, 0x04	; 4
     170:	91 f0       	breq	.+36     	; 0x196 <vMenuOption+0x52>
     172:	47 c0       	rjmp	.+142    	; 0x202 <vMenuOption+0xbe>
     174:	d7 30       	cpi	r29, 0x07	; 7
     176:	81 f1       	breq	.+96     	; 0x1d8 <vMenuOption+0x94>
     178:	20 f1       	brcs	.+72     	; 0x1c2 <vMenuOption+0x7e>
     17a:	d9 30       	cpi	r29, 0x09	; 9
     17c:	c1 f1       	breq	.+112    	; 0x1ee <vMenuOption+0xaa>
     17e:	41 c0       	rjmp	.+130    	; 0x202 <vMenuOption+0xbe>
		{
			case ROOM1_MENU:
			u8StatusCode = ROOM1_STATUS;
			u8TurnOnCode = ROOM1_TURN_ON;
			u8TurnOffCode = ROOM1_TURN_OFF;
			H_LCD_voidSendString("Room1 S:");
     180:	8a e7       	ldi	r24, 0x7A	; 122
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <H_LCD_voidSendString>
		switch(u8SelectedRoom)
		{
			case ROOM1_MENU:
			u8StatusCode = ROOM1_STATUS;
			u8TurnOnCode = ROOM1_TURN_ON;
			u8TurnOffCode = ROOM1_TURN_OFF;
     188:	0f 2e       	mov	r0, r31
     18a:	f1 e3       	ldi	r31, 0x31	; 49
     18c:	ef 2e       	mov	r14, r31
     18e:	f0 2d       	mov	r31, r0
		/*********** ****************Set the commands to be sent to the receiver based on  the sent room or device ******************************/
		switch(u8SelectedRoom)
		{
			case ROOM1_MENU:
			u8StatusCode = ROOM1_STATUS;
			u8TurnOnCode = ROOM1_TURN_ON;
     190:	01 e2       	ldi	r16, 0x21	; 33
		
		/*********** ****************Set the commands to be sent to the receiver based on  the sent room or device ******************************/
		switch(u8SelectedRoom)
		{
			case ROOM1_MENU:
			u8StatusCode = ROOM1_STATUS;
     192:	11 e1       	ldi	r17, 0x11	; 17
			u8TurnOnCode = ROOM1_TURN_ON;
			u8TurnOffCode = ROOM1_TURN_OFF;
			H_LCD_voidSendString("Room1 S:");
			break;
     194:	36 c0       	rjmp	.+108    	; 0x202 <vMenuOption+0xbe>
			case ROOM2_MENU:
			u8StatusCode = ROOM2_STATUS;
			u8TurnOnCode = ROOM2_TURN_ON;
			u8TurnOffCode = ROOM2_TURN_OFF;
			H_LCD_voidSendString("Room2 S:");
     196:	83 e8       	ldi	r24, 0x83	; 131
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <H_LCD_voidSendString>
			H_LCD_voidSendString("Room1 S:");
			break;
			case ROOM2_MENU:
			u8StatusCode = ROOM2_STATUS;
			u8TurnOnCode = ROOM2_TURN_ON;
			u8TurnOffCode = ROOM2_TURN_OFF;
     19e:	0f 2e       	mov	r0, r31
     1a0:	f2 e3       	ldi	r31, 0x32	; 50
     1a2:	ef 2e       	mov	r14, r31
     1a4:	f0 2d       	mov	r31, r0
			u8TurnOffCode = ROOM1_TURN_OFF;
			H_LCD_voidSendString("Room1 S:");
			break;
			case ROOM2_MENU:
			u8StatusCode = ROOM2_STATUS;
			u8TurnOnCode = ROOM2_TURN_ON;
     1a6:	02 e2       	ldi	r16, 0x22	; 34
			u8TurnOnCode = ROOM1_TURN_ON;
			u8TurnOffCode = ROOM1_TURN_OFF;
			H_LCD_voidSendString("Room1 S:");
			break;
			case ROOM2_MENU:
			u8StatusCode = ROOM2_STATUS;
     1a8:	12 e1       	ldi	r17, 0x12	; 18
			u8TurnOnCode = ROOM2_TURN_ON;
			u8TurnOffCode = ROOM2_TURN_OFF;
			H_LCD_voidSendString("Room2 S:");
			break;
     1aa:	2b c0       	rjmp	.+86     	; 0x202 <vMenuOption+0xbe>
			case ROOM3_MENU:
			u8StatusCode = ROOM3_STATUS;
			u8TurnOnCode = ROOM3_TURN_ON;
			u8TurnOffCode = ROOM3_TURN_OFF;
			H_LCD_voidSendString("Room3 S:");
     1ac:	8c e8       	ldi	r24, 0x8C	; 140
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <H_LCD_voidSendString>
			H_LCD_voidSendString("Room2 S:");
			break;
			case ROOM3_MENU:
			u8StatusCode = ROOM3_STATUS;
			u8TurnOnCode = ROOM3_TURN_ON;
			u8TurnOffCode = ROOM3_TURN_OFF;
     1b4:	0f 2e       	mov	r0, r31
     1b6:	f3 e3       	ldi	r31, 0x33	; 51
     1b8:	ef 2e       	mov	r14, r31
     1ba:	f0 2d       	mov	r31, r0
			u8TurnOffCode = ROOM2_TURN_OFF;
			H_LCD_voidSendString("Room2 S:");
			break;
			case ROOM3_MENU:
			u8StatusCode = ROOM3_STATUS;
			u8TurnOnCode = ROOM3_TURN_ON;
     1bc:	03 e2       	ldi	r16, 0x23	; 35
			u8TurnOnCode = ROOM2_TURN_ON;
			u8TurnOffCode = ROOM2_TURN_OFF;
			H_LCD_voidSendString("Room2 S:");
			break;
			case ROOM3_MENU:
			u8StatusCode = ROOM3_STATUS;
     1be:	13 e1       	ldi	r17, 0x13	; 19
			u8TurnOnCode = ROOM3_TURN_ON;
			u8TurnOffCode = ROOM3_TURN_OFF;
			H_LCD_voidSendString("Room3 S:");
			break;
     1c0:	20 c0       	rjmp	.+64     	; 0x202 <vMenuOption+0xbe>
			case ROOM4_MENU:
			u8StatusCode = ROOM4_STATUS;
			u8TurnOnCode = ROOM4_TURN_ON;
			u8TurnOffCode = ROOM4_TURN_OFF;
			H_LCD_voidSendString("Room4 S:");
     1c2:	85 e9       	ldi	r24, 0x95	; 149
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <H_LCD_voidSendString>
			H_LCD_voidSendString("Room3 S:");
			break;
			case ROOM4_MENU:
			u8StatusCode = ROOM4_STATUS;
			u8TurnOnCode = ROOM4_TURN_ON;
			u8TurnOffCode = ROOM4_TURN_OFF;
     1ca:	0f 2e       	mov	r0, r31
     1cc:	f4 e3       	ldi	r31, 0x34	; 52
     1ce:	ef 2e       	mov	r14, r31
     1d0:	f0 2d       	mov	r31, r0
			u8TurnOffCode = ROOM3_TURN_OFF;
			H_LCD_voidSendString("Room3 S:");
			break;
			case ROOM4_MENU:
			u8StatusCode = ROOM4_STATUS;
			u8TurnOnCode = ROOM4_TURN_ON;
     1d2:	04 e2       	ldi	r16, 0x24	; 36
			u8TurnOnCode = ROOM3_TURN_ON;
			u8TurnOffCode = ROOM3_TURN_OFF;
			H_LCD_voidSendString("Room3 S:");
			break;
			case ROOM4_MENU:
			u8StatusCode = ROOM4_STATUS;
     1d4:	14 e1       	ldi	r17, 0x14	; 20
			u8TurnOnCode = ROOM4_TURN_ON;
			u8TurnOffCode = ROOM4_TURN_OFF;
			H_LCD_voidSendString("Room4 S:");
			break;
     1d6:	15 c0       	rjmp	.+42     	; 0x202 <vMenuOption+0xbe>
			case TV_MENU:
			u8StatusCode = TV_STATUS;
			u8TurnOnCode = TV_TURN_ON;
			u8TurnOffCode = TV_TURN_OFF;
			H_LCD_voidSendString("TV S:");
     1d8:	8e e9       	ldi	r24, 0x9E	; 158
     1da:	90 e0       	ldi	r25, 0x00	; 0
     1dc:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <H_LCD_voidSendString>
			H_LCD_voidSendString("Room4 S:");
			break;
			case TV_MENU:
			u8StatusCode = TV_STATUS;
			u8TurnOnCode = TV_TURN_ON;
			u8TurnOffCode = TV_TURN_OFF;
     1e0:	0f 2e       	mov	r0, r31
     1e2:	f5 e3       	ldi	r31, 0x35	; 53
     1e4:	ef 2e       	mov	r14, r31
     1e6:	f0 2d       	mov	r31, r0
			u8TurnOffCode = ROOM4_TURN_OFF;
			H_LCD_voidSendString("Room4 S:");
			break;
			case TV_MENU:
			u8StatusCode = TV_STATUS;
			u8TurnOnCode = TV_TURN_ON;
     1e8:	05 e2       	ldi	r16, 0x25	; 37
			u8TurnOnCode = ROOM4_TURN_ON;
			u8TurnOffCode = ROOM4_TURN_OFF;
			H_LCD_voidSendString("Room4 S:");
			break;
			case TV_MENU:
			u8StatusCode = TV_STATUS;
     1ea:	15 e1       	ldi	r17, 0x15	; 21
			u8TurnOnCode = TV_TURN_ON;
			u8TurnOffCode = TV_TURN_OFF;
			H_LCD_voidSendString("TV S:");
			break;
     1ec:	0a c0       	rjmp	.+20     	; 0x202 <vMenuOption+0xbe>
			case AIRCOND_CTRL_MENU:
			u8StatusCode = AIR_COND_STATUS;
			u8TurnOnCode = AIR_COND_TURN_ON;
			u8TurnOffCode = AIR_COND_TURN_OFF;
			H_LCD_voidSendString("Air Cond. S:");
     1ee:	84 ea       	ldi	r24, 0xA4	; 164
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <H_LCD_voidSendString>
			H_LCD_voidSendString("TV S:");
			break;
			case AIRCOND_CTRL_MENU:
			u8StatusCode = AIR_COND_STATUS;
			u8TurnOnCode = AIR_COND_TURN_ON;
			u8TurnOffCode = AIR_COND_TURN_OFF;
     1f6:	0f 2e       	mov	r0, r31
     1f8:	f6 e3       	ldi	r31, 0x36	; 54
     1fa:	ef 2e       	mov	r14, r31
     1fc:	f0 2d       	mov	r31, r0
			u8TurnOffCode = TV_TURN_OFF;
			H_LCD_voidSendString("TV S:");
			break;
			case AIRCOND_CTRL_MENU:
			u8StatusCode = AIR_COND_STATUS;
			u8TurnOnCode = AIR_COND_TURN_ON;
     1fe:	06 e2       	ldi	r16, 0x26	; 38
			u8TurnOnCode = TV_TURN_ON;
			u8TurnOffCode = TV_TURN_OFF;
			H_LCD_voidSendString("TV S:");
			break;
			case AIRCOND_CTRL_MENU:
			u8StatusCode = AIR_COND_STATUS;
     200:	16 e1       	ldi	r17, 0x16	; 22
			H_LCD_voidSendString("Air Cond. S:");
			break;
		}
		/****************************************************************************************************/
		
		M_UART_voidSend(u8StatusCode);//demand the status from the receiver
     202:	81 2f       	mov	r24, r17
     204:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <M_UART_voidSend>
     208:	2f ef       	ldi	r18, 0xFF	; 255
     20a:	81 ee       	ldi	r24, 0xE1	; 225
     20c:	94 e0       	ldi	r25, 0x04	; 4
     20e:	21 50       	subi	r18, 0x01	; 1
     210:	80 40       	sbci	r24, 0x00	; 0
     212:	90 40       	sbci	r25, 0x00	; 0
     214:	e1 f7       	brne	.-8      	; 0x20e <vMenuOption+0xca>
     216:	00 c0       	rjmp	.+0      	; 0x218 <vMenuOption+0xd4>
     218:	00 00       	nop
		_delay_ms(200);//Halt the system for the given time in (ms)
	
		if(response == ON_STATUS)//if the response from the receiver was on status
     21a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     21e:	81 30       	cpi	r24, 0x01	; 1
     220:	29 f4       	brne	.+10     	; 0x22c <vMenuOption+0xe8>
		{
			H_LCD_voidSendString("ON");//print the status on
     222:	81 eb       	ldi	r24, 0xB1	; 177
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <H_LCD_voidSendString>
     22a:	04 c0       	rjmp	.+8      	; 0x234 <vMenuOption+0xf0>
		}
		else//if the response from the receiver was off status
		{
			H_LCD_voidSendString("OFF");//print the status off
     22c:	84 eb       	ldi	r24, 0xB4	; 180
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <H_LCD_voidSendString>
		}

		H_LCD_voidSetPosition(2,1);//move the cursor to the start of the second line
     234:	61 e0       	ldi	r22, 0x01	; 1
     236:	82 e0       	ldi	r24, 0x02	; 2
     238:	0e 94 ee 08 	call	0x11dc	; 0x11dc <H_LCD_voidSetPosition>
		H_LCD_voidSendString("1-On 2-Off 0-RET");//print the sub menu
     23c:	88 eb       	ldi	r24, 0xB8	; 184
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <H_LCD_voidSendString>
		
		/*******************************************************************************/
		
		key_pressed = u8GetKeyPressed(u8LoginMode);//wait for the user till key is pressed or the time is out
     244:	8f 2d       	mov	r24, r15
     246:	0e 94 6d 00 	call	0xda	; 0xda <u8GetKeyPressed>
     24a:	c8 2f       	mov	r28, r24
     24c:	2f ef       	ldi	r18, 0xFF	; 255
     24e:	80 e7       	ldi	r24, 0x70	; 112
     250:	92 e0       	ldi	r25, 0x02	; 2
     252:	21 50       	subi	r18, 0x01	; 1
     254:	80 40       	sbci	r24, 0x00	; 0
     256:	90 40       	sbci	r25, 0x00	; 0
     258:	e1 f7       	brne	.-8      	; 0x252 <vMenuOption+0x10e>
     25a:	00 c0       	rjmp	.+0      	; 0x25c <vMenuOption+0x118>
     25c:	00 00       	nop
		_delay_ms(100);//to avoid the duplication of the pressed key
		
		/*there is no need to take any action in case of the user pressed 0(RET) key
		breaking the loop will be enough since it will be handled in the main*/
		
		if (key_pressed == '1')
     25e:	c1 33       	cpi	r28, 0x31	; 49
     260:	21 f4       	brne	.+8      	; 0x26a <vMenuOption+0x126>
		{
			M_UART_voidSend(u8TurnOnCode);//Send turn on signal from sender to receiver
     262:	80 2f       	mov	r24, r16
     264:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <M_UART_voidSend>
     268:	19 c0       	rjmp	.+50     	; 0x29c <vMenuOption+0x158>
		}
		else if (key_pressed == '2')
     26a:	c2 33       	cpi	r28, 0x32	; 50
     26c:	21 f4       	brne	.+8      	; 0x276 <vMenuOption+0x132>
		{
			M_UART_voidSend(u8TurnOffCode);//Send turn off signal from sender to receiver
     26e:	8e 2d       	mov	r24, r14
     270:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <M_UART_voidSend>
     274:	13 c0       	rjmp	.+38     	; 0x29c <vMenuOption+0x158>
		}
		else if( (key_pressed != NO_PRESSED_KEY) && (key_pressed != '0') )//show wrong input message if the user entered non numeric value
     276:	cf 3f       	cpi	r28, 0xFF	; 255
     278:	89 f0       	breq	.+34     	; 0x29c <vMenuOption+0x158>
     27a:	c0 33       	cpi	r28, 0x30	; 48
     27c:	79 f0       	breq	.+30     	; 0x29c <vMenuOption+0x158>
		{
			H_LCD_voidClearDisplay();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     27e:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <H_LCD_voidClearDisplay>
			H_LCD_voidSendString("Wrong input");//print error message
     282:	89 ec       	ldi	r24, 0xC9	; 201
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <H_LCD_voidSendString>
     28a:	2f ef       	ldi	r18, 0xFF	; 255
     28c:	84 e3       	ldi	r24, 0x34	; 52
     28e:	9c e0       	ldi	r25, 0x0C	; 12
     290:	21 50       	subi	r18, 0x01	; 1
     292:	80 40       	sbci	r24, 0x00	; 0
     294:	90 40       	sbci	r25, 0x00	; 0
     296:	e1 f7       	brne	.-8      	; 0x290 <vMenuOption+0x14c>
     298:	00 c0       	rjmp	.+0      	; 0x29a <vMenuOption+0x156>
     29a:	00 00       	nop
			_delay_ms(500);//Halt the system for the given time in (ms)
		}
	} while ( ( (key_pressed < '0') || (key_pressed > '2') ) && (timeout_flag == FALSE));//break the loop in case of valid key or time is out
     29c:	c0 53       	subi	r28, 0x30	; 48
     29e:	c3 30       	cpi	r28, 0x03	; 3
     2a0:	28 f0       	brcs	.+10     	; 0x2ac <vMenuOption+0x168>
     2a2:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <__data_end>
     2a6:	88 23       	and	r24, r24
     2a8:	09 f4       	brne	.+2      	; 0x2ac <vMenuOption+0x168>
     2aa:	5a cf       	rjmp	.-332    	; 0x160 <vMenuOption+0x1c>
}
     2ac:	df 91       	pop	r29
     2ae:	cf 91       	pop	r28
     2b0:	1f 91       	pop	r17
     2b2:	0f 91       	pop	r16
     2b4:	ff 90       	pop	r15
     2b6:	ef 90       	pop	r14
     2b8:	08 95       	ret

000002ba <main>:
u8 login_counter=20;
u8 response=DEFAULT_ACK;
/*------------------------------------------------------------------------------------------------------*/
void Reset_voidFunc(void);
int main(void)
{
     2ba:	cf 93       	push	r28
     2bc:	df 93       	push	r29
     2be:	cd b7       	in	r28, 0x3d	; 61
     2c0:	de b7       	in	r29, 0x3e	; 62
     2c2:	2a 97       	sbiw	r28, 0x0a	; 10
     2c4:	0f b6       	in	r0, 0x3f	; 63
     2c6:	f8 94       	cli
     2c8:	de bf       	out	0x3e, r29	; 62
     2ca:	0f be       	out	0x3f, r0	; 63
     2cc:	cd bf       	out	0x3d, r28	; 61
	u8 temperature = 0;//The average temperature of the room
	u8 temp_ones = NOT_SELECTED;//The entered right number of the temperature
	u8 temp_tens = NOT_SELECTED;//The entered left number of the temperature
	
	u8 login_mode = NO_MODE; //Store the current user mode admin or guest or not logged in
	u8 block_mode_flag = FALSE;//is true if the login is blocked or false if not blocked
     2ce:	19 82       	std	Y+1, r1	; 0x01
	u8 key_pressed = NO_PRESSED_KEY;//
	/*****************  INITIALIZE  ***********************/
	H_LED_voidInit(ADMIN_LED_PIN);//initializes the led of admin
     2d0:	8c e1       	ldi	r24, 0x1C	; 28
     2d2:	0e 94 06 09 	call	0x120c	; 0x120c <H_LED_voidInit>
	H_LED_voidInit(GUEST_LED_PIN);//initializes the led of guest
     2d6:	80 e0       	ldi	r24, 0x00	; 0
     2d8:	0e 94 06 09 	call	0x120c	; 0x120c <H_LED_voidInit>
	H_LED_voidInit(BLOCK_LED_PIN);//initializes the led of block
     2dc:	8f e0       	ldi	r24, 0x0F	; 15
     2de:	0e 94 06 09 	call	0x120c	; 0x120c <H_LED_voidInit>
	H_SSD_voidInit();
     2e2:	0e 94 12 09 	call	0x1224	; 0x1224 <H_SSD_voidInit>
	H_KEYPAD_voidInit();
     2e6:	0e 94 6e 07 	call	0xedc	; 0xedc <H_KEYPAD_voidInit>
	H_BUZZER_voidInit();
     2ea:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <H_BUZZER_voidInit>
	H_LCD_voidInit();
     2ee:	0e 94 9f 08 	call	0x113e	; 0x113e <H_LCD_voidInit>
	H_EEPROM_voidInit();
     2f2:	0e 94 f0 06 	call	0xde0	; 0xde0 <H_EEPROM_voidInit>
	M_UART_voidInit();
     2f6:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <M_UART_voidInit>
	M_EXT_voidInit(EX_INT0,RISING_EDGE);
     2fa:	61 e0       	ldi	r22, 0x01	; 1
     2fc:	80 e0       	ldi	r24, 0x00	; 0
     2fe:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <M_EXT_voidInit>
	M_EXTI_voidSetCallBack(EX_INT0,Reset_voidFunc);
     302:	63 e5       	ldi	r22, 0x53	; 83
     304:	70 e0       	ldi	r23, 0x00	; 0
     306:	80 e0       	ldi	r24, 0x00	; 0
     308:	0e 94 67 0b 	call	0x16ce	; 0x16ce <M_EXTI_voidSetCallBack>
	M_EXTI_voidEXTIEnable(EX_INT0);
     30c:	80 e0       	ldi	r24, 0x00	; 0
     30e:	0e 94 55 0b 	call	0x16aa	; 0x16aa <M_EXTI_voidEXTIEnable>
	M_Timer0_Init();
     312:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <M_Timer0_Init>
	M_TIMER0_EnableInt(TIMER0_OVF_INTERRUPT);
     316:	80 e0       	ldi	r24, 0x00	; 0
     318:	0e 94 18 0c 	call	0x1830	; 0x1830 <M_TIMER0_EnableInt>
	M_Timer0_start();
     31c:	0e 94 0b 0c 	call	0x1816	; 0x1816 <M_Timer0_start>
	M_Global_Interrupt_Enable();
     320:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <M_Global_Interrupt_Enable>
    S_UART_void_ReceiveCharAsynch(&response);//the sender micro controller asks for the status
     324:	80 e6       	ldi	r24, 0x60	; 96
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <S_UART_void_ReceiveCharAsynch>
	/******************************************************/
	/* Printing Welcome screen */
	H_LCD_voidSendString("Welcome to smart");
     32c:	85 ed       	ldi	r24, 0xD5	; 213
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <H_LCD_voidSendString>
	H_LCD_voidSetPosition(2,1);
     334:	61 e0       	ldi	r22, 0x01	; 1
     336:	82 e0       	ldi	r24, 0x02	; 2
     338:	0e 94 ee 08 	call	0x11dc	; 0x11dc <H_LCD_voidSetPosition>
	H_LCD_voidSendString("home system");
     33c:	86 ee       	ldi	r24, 0xE6	; 230
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <H_LCD_voidSendString>
     344:	2f ef       	ldi	r18, 0xFF	; 255
     346:	39 e6       	ldi	r19, 0x69	; 105
     348:	88 e1       	ldi	r24, 0x18	; 24
     34a:	21 50       	subi	r18, 0x01	; 1
     34c:	30 40       	sbci	r19, 0x00	; 0
     34e:	80 40       	sbci	r24, 0x00	; 0
     350:	e1 f7       	brne	.-8      	; 0x34a <main+0x90>
     352:	00 c0       	rjmp	.+0      	; 0x354 <main+0x9a>
     354:	00 00       	nop
	_delay_ms(1000);//Halt the system for the given time in (ms)
	H_LCD_voidClearDisplay();
     356:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <H_LCD_voidClearDisplay>
	H_LCD_voidSendString("by:");
     35a:	82 ef       	ldi	r24, 0xF2	; 242
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <H_LCD_voidSendString>
	H_LCD_voidSetPosition(2,4);
     362:	64 e0       	ldi	r22, 0x04	; 4
     364:	82 e0       	ldi	r24, 0x02	; 2
     366:	0e 94 ee 08 	call	0x11dc	; 0x11dc <H_LCD_voidSetPosition>
	H_LCD_voidSendString("Ahmed Atef");
     36a:	86 ef       	ldi	r24, 0xF6	; 246
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <H_LCD_voidSendString>
     372:	9f ef       	ldi	r25, 0xFF	; 255
     374:	29 e6       	ldi	r18, 0x69	; 105
     376:	38 e1       	ldi	r19, 0x18	; 24
     378:	91 50       	subi	r25, 0x01	; 1
     37a:	20 40       	sbci	r18, 0x00	; 0
     37c:	30 40       	sbci	r19, 0x00	; 0
     37e:	e1 f7       	brne	.-8      	; 0x378 <main+0xbe>
     380:	00 c0       	rjmp	.+0      	; 0x382 <main+0xc8>
     382:	00 00       	nop
	_delay_ms(1000);//Halt the system for the given time in (ms)
	H_LCD_voidClearDisplay();
     384:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <H_LCD_voidClearDisplay>
	/***************************/
	/*Setting Admin and Guest passwords if not set */
	//read the state of the the passwords of the admin and guest if both are set or not set
	u8 pass_status_location;

	H_EEPROM_u8Read_Byte(EEPROM_PASS_STATUS_ADDRESS, &pass_status_location);
     388:	be 01       	movw	r22, r28
     38a:	6e 5f       	subi	r22, 0xFE	; 254
     38c:	7f 4f       	sbci	r23, 0xFF	; 255
     38e:	80 e6       	ldi	r24, 0x60	; 96
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	0e 94 24 07 	call	0xe48	; 0xe48 <H_EEPROM_u8Read_Byte>
     396:	8f e1       	ldi	r24, 0x1F	; 31
     398:	9e e4       	ldi	r25, 0x4E	; 78
     39a:	01 97       	sbiw	r24, 0x01	; 1
     39c:	f1 f7       	brne	.-4      	; 0x39a <main+0xe0>
     39e:	00 c0       	rjmp	.+0      	; 0x3a0 <main+0xe6>
     3a0:	00 00       	nop
	_delay_ms(10);//delay until the cpu get reading from the eeprom throught the i2c protocol
	if ( (pass_status_location==PASS_NOT_SET) )
     3a2:	8a 81       	ldd	r24, Y+2	; 0x02
     3a4:	8f 3f       	cpi	r24, 0xFF	; 255
     3a6:	09 f0       	breq	.+2      	; 0x3aa <main+0xf0>
     3a8:	ee c0       	rjmp	.+476    	; 0x586 <__EEPROM_REGION_LENGTH__+0x186>
	{
		H_LCD_voidSendString("Login for");//printing login menu
     3aa:	81 e0       	ldi	r24, 0x01	; 1
     3ac:	91 e0       	ldi	r25, 0x01	; 1
     3ae:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <H_LCD_voidSendString>
		H_LCD_voidSetPosition(2,1);//move the cursor to the second line
     3b2:	61 e0       	ldi	r22, 0x01	; 1
     3b4:	82 e0       	ldi	r24, 0x02	; 2
     3b6:	0e 94 ee 08 	call	0x11dc	; 0x11dc <H_LCD_voidSetPosition>
		H_LCD_voidSendString("first time");
     3ba:	8b e0       	ldi	r24, 0x0B	; 11
     3bc:	91 e0       	ldi	r25, 0x01	; 1
     3be:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <H_LCD_voidSendString>
     3c2:	9f ef       	ldi	r25, 0xFF	; 255
     3c4:	29 e6       	ldi	r18, 0x69	; 105
     3c6:	38 e1       	ldi	r19, 0x18	; 24
     3c8:	91 50       	subi	r25, 0x01	; 1
     3ca:	20 40       	sbci	r18, 0x00	; 0
     3cc:	30 40       	sbci	r19, 0x00	; 0
     3ce:	e1 f7       	brne	.-8      	; 0x3c8 <main+0x10e>
     3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <main+0x118>
     3d2:	00 00       	nop
		_delay_ms(1000);//Halt the system for the given time in (ms)
		H_LCD_voidClearDisplay();
     3d4:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <H_LCD_voidClearDisplay>
		H_LCD_voidSendString("Set Admin pass");//printing the set admin password menu
     3d8:	86 e1       	ldi	r24, 0x16	; 22
     3da:	91 e0       	ldi	r25, 0x01	; 1
     3dc:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <H_LCD_voidSendString>
		H_LCD_voidSetPosition(2,1);
     3e0:	61 e0       	ldi	r22, 0x01	; 1
     3e2:	82 e0       	ldi	r24, 0x02	; 2
     3e4:	0e 94 ee 08 	call	0x11dc	; 0x11dc <H_LCD_voidSetPosition>
		H_LCD_voidSendString("Admin pass:");
     3e8:	85 e2       	ldi	r24, 0x25	; 37
     3ea:	91 e0       	ldi	r25, 0x01	; 1
     3ec:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <H_LCD_voidSendString>

		/********************************* setting Admin password **********************************************/
		u8 pass_counter=0;//the counter of the characters of the password
     3f0:	10 e0       	ldi	r17, 0x00	; 0
		u8 pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};//the array where it stored the password
		while (pass_counter<PASS_SIZE)//loop till the user finish inserting the pass
     3f2:	3f c0       	rjmp	.+126    	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
		{
			key_pressed = NO_PRESSED_KEY;//return the variable that holds the pressed key from keypad to its initial value
			while (key_pressed == NO_PRESSED_KEY)//repeat till the user press any key
			{
				key_pressed = H_KEYPAD_u8_getPressedKey();//if the user pressed any button in keypad save the value in key_pressed
     3f4:	0e 94 9d 07 	call	0xf3a	; 0xf3a <H_KEYPAD_u8_getPressedKey>
     3f8:	08 2f       	mov	r16, r24
     3fa:	01 c0       	rjmp	.+2      	; 0x3fe <main+0x144>
     3fc:	0f ef       	ldi	r16, 0xFF	; 255
		u8 pass_counter=0;//the counter of the characters of the password
		u8 pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};//the array where it stored the password
		while (pass_counter<PASS_SIZE)//loop till the user finish inserting the pass
		{
			key_pressed = NO_PRESSED_KEY;//return the variable that holds the pressed key from keypad to its initial value
			while (key_pressed == NO_PRESSED_KEY)//repeat till the user press any key
     3fe:	0f 3f       	cpi	r16, 0xFF	; 255
     400:	c9 f3       	breq	.-14     	; 0x3f4 <main+0x13a>
			{
				key_pressed = H_KEYPAD_u8_getPressedKey();//if the user pressed any button in keypad save the value in key_pressed
			}		
			H_BUZZER_voidTurnOn();
     402:	0e 94 e6 06 	call	0xdcc	; 0xdcc <H_BUZZER_voidTurnOn>
     406:	8f ef       	ldi	r24, 0xFF	; 255
     408:	99 ef       	ldi	r25, 0xF9	; 249
     40a:	20 e0       	ldi	r18, 0x00	; 0
     40c:	81 50       	subi	r24, 0x01	; 1
     40e:	90 40       	sbci	r25, 0x00	; 0
     410:	20 40       	sbci	r18, 0x00	; 0
     412:	e1 f7       	brne	.-8      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
     414:	00 c0       	rjmp	.+0      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
     416:	00 00       	nop
			_delay_ms(40);
			H_BUZZER_voidTurnOff();
     418:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <H_BUZZER_voidTurnOff>
			pass[pass_counter]=key_pressed;//add the entered character to the pass array
			H_LCD_voidSendChar(key_pressed);//print the entered character
     41c:	80 2f       	mov	r24, r16
     41e:	0e 94 d6 08 	call	0x11ac	; 0x11ac <H_LCD_voidSendChar>
     422:	3f ef       	ldi	r19, 0xFF	; 255
     424:	81 ee       	ldi	r24, 0xE1	; 225
     426:	94 e0       	ldi	r25, 0x04	; 4
     428:	31 50       	subi	r19, 0x01	; 1
     42a:	80 40       	sbci	r24, 0x00	; 0
     42c:	90 40       	sbci	r25, 0x00	; 0
     42e:	e1 f7       	brne	.-8      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
     430:	00 c0       	rjmp	.+0      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
     432:	00 00       	nop
			_delay_ms(CHARACTER_PREVIEW_TIME);//Halt the system for the given time in (ms)
			H_LCD_voidSetPosition(2,12+pass_counter);//move the lcd cursor to the previous location to write the password symbol over the character
     434:	6c e0       	ldi	r22, 0x0C	; 12
     436:	61 0f       	add	r22, r17
     438:	82 e0       	ldi	r24, 0x02	; 2
     43a:	0e 94 ee 08 	call	0x11dc	; 0x11dc <H_LCD_voidSetPosition>
			H_LCD_voidSendChar(PASSWORD_SYMBOL); // to display (Password sign *)
     43e:	8a e2       	ldi	r24, 0x2A	; 42
     440:	0e 94 d6 08 	call	0x11ac	; 0x11ac <H_LCD_voidSendChar>
     444:	2f ef       	ldi	r18, 0xFF	; 255
     446:	30 e7       	ldi	r19, 0x70	; 112
     448:	82 e0       	ldi	r24, 0x02	; 2
     44a:	21 50       	subi	r18, 0x01	; 1
     44c:	30 40       	sbci	r19, 0x00	; 0
     44e:	80 40       	sbci	r24, 0x00	; 0
     450:	e1 f7       	brne	.-8      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
     452:	00 c0       	rjmp	.+0      	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
     454:	00 00       	nop
			_delay_ms(100);//Halt the system for the given time in (ms)
			H_EEPROM_u8Write_Byte(EEPROM_ADMIN_ADDRESS+pass_counter,key_pressed);
     456:	81 2f       	mov	r24, r17
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	60 2f       	mov	r22, r16
     45c:	80 59       	subi	r24, 0x90	; 144
     45e:	9f 4f       	sbci	r25, 0xFF	; 255
     460:	0e 94 f3 06 	call	0xde6	; 0xde6 <H_EEPROM_u8Write_Byte>
     464:	8f e1       	ldi	r24, 0x1F	; 31
     466:	9e e4       	ldi	r25, 0x4E	; 78
     468:	01 97       	sbiw	r24, 0x01	; 1
     46a:	f1 f7       	brne	.-4      	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
     46c:	00 c0       	rjmp	.+0      	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
     46e:	00 00       	nop
			_delay_ms(10);
			pass_counter++;//increase the characters count
     470:	1f 5f       	subi	r17, 0xFF	; 255
		H_LCD_voidSendString("Admin pass:");

		/********************************* setting Admin password **********************************************/
		u8 pass_counter=0;//the counter of the characters of the password
		u8 pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};//the array where it stored the password
		while (pass_counter<PASS_SIZE)//loop till the user finish inserting the pass
     472:	14 30       	cpi	r17, 0x04	; 4
     474:	18 f2       	brcs	.-122    	; 0x3fc <main+0x142>
			H_EEPROM_u8Write_Byte(EEPROM_ADMIN_ADDRESS+pass_counter,key_pressed);
			_delay_ms(10);
			pass_counter++;//increase the characters count
		}

		H_LCD_voidClearDisplay();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     476:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <H_LCD_voidClearDisplay>
		H_LCD_voidSendString("Pass Saved");// show pass saved message
     47a:	81 e3       	ldi	r24, 0x31	; 49
     47c:	91 e0       	ldi	r25, 0x01	; 1
     47e:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <H_LCD_voidSendString>
     482:	9f ef       	ldi	r25, 0xFF	; 255
     484:	24 e3       	ldi	r18, 0x34	; 52
     486:	3c e0       	ldi	r19, 0x0C	; 12
     488:	91 50       	subi	r25, 0x01	; 1
     48a:	20 40       	sbci	r18, 0x00	; 0
     48c:	30 40       	sbci	r19, 0x00	; 0
     48e:	e1 f7       	brne	.-8      	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
     490:	00 c0       	rjmp	.+0      	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
     492:	00 00       	nop
		_delay_ms(500);//Halt the system for the given time in (ms)
		H_LCD_voidClearDisplay();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     494:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <H_LCD_voidClearDisplay>

		/********************************* setting guest password **********************************************/
		pass_counter=0;//reset password counter which count the characters of the pass
		H_LCD_voidSendString("Set Guest Pass");//printing the set admin password menu
     498:	8c e3       	ldi	r24, 0x3C	; 60
     49a:	91 e0       	ldi	r25, 0x01	; 1
     49c:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <H_LCD_voidSendString>
		H_LCD_voidSetPosition(2,1);
     4a0:	61 e0       	ldi	r22, 0x01	; 1
     4a2:	82 e0       	ldi	r24, 0x02	; 2
     4a4:	0e 94 ee 08 	call	0x11dc	; 0x11dc <H_LCD_voidSetPosition>
		H_LCD_voidSendString("Guest Pass:");
     4a8:	8b e4       	ldi	r24, 0x4B	; 75
     4aa:	91 e0       	ldi	r25, 0x01	; 1
     4ac:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <H_LCD_voidSendString>
		H_LCD_voidSendString("Pass Saved");// show pass saved message
		_delay_ms(500);//Halt the system for the given time in (ms)
		H_LCD_voidClearDisplay();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row

		/********************************* setting guest password **********************************************/
		pass_counter=0;//reset password counter which count the characters of the pass
     4b0:	10 e0       	ldi	r17, 0x00	; 0
		H_LCD_voidSendString("Set Guest Pass");//printing the set admin password menu
		H_LCD_voidSetPosition(2,1);
		H_LCD_voidSendString("Guest Pass:");
		while (pass_counter<PASS_SIZE)//loop till the user finish inserting the pass
     4b2:	3f c0       	rjmp	.+126    	; 0x532 <__EEPROM_REGION_LENGTH__+0x132>
		{
			key_pressed = NO_PRESSED_KEY;//return the variable that holds the pressed key from keypad to its initial value
			while (key_pressed == NO_PRESSED_KEY)//repeat till the user press any key
			{
				key_pressed = H_KEYPAD_u8_getPressedKey();//if the user pressed any button in keypad save the value in key_pressed
     4b4:	0e 94 9d 07 	call	0xf3a	; 0xf3a <H_KEYPAD_u8_getPressedKey>
     4b8:	08 2f       	mov	r16, r24
     4ba:	01 c0       	rjmp	.+2      	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
     4bc:	0f ef       	ldi	r16, 0xFF	; 255
		H_LCD_voidSetPosition(2,1);
		H_LCD_voidSendString("Guest Pass:");
		while (pass_counter<PASS_SIZE)//loop till the user finish inserting the pass
		{
			key_pressed = NO_PRESSED_KEY;//return the variable that holds the pressed key from keypad to its initial value
			while (key_pressed == NO_PRESSED_KEY)//repeat till the user press any key
     4be:	0f 3f       	cpi	r16, 0xFF	; 255
     4c0:	c9 f3       	breq	.-14     	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
			{
				key_pressed = H_KEYPAD_u8_getPressedKey();//if the user pressed any button in keypad save the value in key_pressed
			}
			H_BUZZER_voidTurnOn();
     4c2:	0e 94 e6 06 	call	0xdcc	; 0xdcc <H_BUZZER_voidTurnOn>
     4c6:	8f ef       	ldi	r24, 0xFF	; 255
     4c8:	99 ef       	ldi	r25, 0xF9	; 249
     4ca:	20 e0       	ldi	r18, 0x00	; 0
     4cc:	81 50       	subi	r24, 0x01	; 1
     4ce:	90 40       	sbci	r25, 0x00	; 0
     4d0:	20 40       	sbci	r18, 0x00	; 0
     4d2:	e1 f7       	brne	.-8      	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
     4d4:	00 c0       	rjmp	.+0      	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
     4d6:	00 00       	nop
			_delay_ms(40);
			H_BUZZER_voidTurnOff();
     4d8:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <H_BUZZER_voidTurnOff>
			pass[pass_counter]=key_pressed;//add the entered character to the pass array
			H_LCD_voidSendChar(key_pressed);//print the entered character
     4dc:	80 2f       	mov	r24, r16
     4de:	0e 94 d6 08 	call	0x11ac	; 0x11ac <H_LCD_voidSendChar>
     4e2:	3f ef       	ldi	r19, 0xFF	; 255
     4e4:	81 ee       	ldi	r24, 0xE1	; 225
     4e6:	94 e0       	ldi	r25, 0x04	; 4
     4e8:	31 50       	subi	r19, 0x01	; 1
     4ea:	80 40       	sbci	r24, 0x00	; 0
     4ec:	90 40       	sbci	r25, 0x00	; 0
     4ee:	e1 f7       	brne	.-8      	; 0x4e8 <__EEPROM_REGION_LENGTH__+0xe8>
     4f0:	00 c0       	rjmp	.+0      	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
     4f2:	00 00       	nop
			_delay_ms(CHARACTER_PREVIEW_TIME);//Halt the system for the given time in (ms)
			H_LCD_voidSetPosition(2,12+pass_counter);//move the lcd cursor to the previous location to write the password symbol over the character
     4f4:	6c e0       	ldi	r22, 0x0C	; 12
     4f6:	61 0f       	add	r22, r17
     4f8:	82 e0       	ldi	r24, 0x02	; 2
     4fa:	0e 94 ee 08 	call	0x11dc	; 0x11dc <H_LCD_voidSetPosition>
			H_LCD_voidSendChar(PASSWORD_SYMBOL); // to display (Password sign *)
     4fe:	8a e2       	ldi	r24, 0x2A	; 42
     500:	0e 94 d6 08 	call	0x11ac	; 0x11ac <H_LCD_voidSendChar>
     504:	2f ef       	ldi	r18, 0xFF	; 255
     506:	30 e7       	ldi	r19, 0x70	; 112
     508:	82 e0       	ldi	r24, 0x02	; 2
     50a:	21 50       	subi	r18, 0x01	; 1
     50c:	30 40       	sbci	r19, 0x00	; 0
     50e:	80 40       	sbci	r24, 0x00	; 0
     510:	e1 f7       	brne	.-8      	; 0x50a <__EEPROM_REGION_LENGTH__+0x10a>
     512:	00 c0       	rjmp	.+0      	; 0x514 <__EEPROM_REGION_LENGTH__+0x114>
     514:	00 00       	nop
			_delay_ms(100);//Halt the system for the given time in (ms)
			H_EEPROM_u8Write_Byte(EEPROM_GUEST_ADDRESS+pass_counter,key_pressed);//save the entire password as a block to the EEPROM
     516:	81 2f       	mov	r24, r17
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	60 2f       	mov	r22, r16
     51c:	80 58       	subi	r24, 0x80	; 128
     51e:	9f 4f       	sbci	r25, 0xFF	; 255
     520:	0e 94 f3 06 	call	0xde6	; 0xde6 <H_EEPROM_u8Write_Byte>
     524:	8f e1       	ldi	r24, 0x1F	; 31
     526:	9e e4       	ldi	r25, 0x4E	; 78
     528:	01 97       	sbiw	r24, 0x01	; 1
     52a:	f1 f7       	brne	.-4      	; 0x528 <__EEPROM_REGION_LENGTH__+0x128>
     52c:	00 c0       	rjmp	.+0      	; 0x52e <__EEPROM_REGION_LENGTH__+0x12e>
     52e:	00 00       	nop
			_delay_ms(10);
			pass_counter++;//increase the characters count
     530:	1f 5f       	subi	r17, 0xFF	; 255
		/********************************* setting guest password **********************************************/
		pass_counter=0;//reset password counter which count the characters of the pass
		H_LCD_voidSendString("Set Guest Pass");//printing the set admin password menu
		H_LCD_voidSetPosition(2,1);
		H_LCD_voidSendString("Guest Pass:");
		while (pass_counter<PASS_SIZE)//loop till the user finish inserting the pass
     532:	14 30       	cpi	r17, 0x04	; 4
     534:	18 f2       	brcs	.-122    	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
			_delay_ms(100);//Halt the system for the given time in (ms)
			H_EEPROM_u8Write_Byte(EEPROM_GUEST_ADDRESS+pass_counter,key_pressed);//save the entire password as a block to the EEPROM
			_delay_ms(10);
			pass_counter++;//increase the characters count
		}	
		H_LCD_voidClearDisplay();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     536:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <H_LCD_voidClearDisplay>
		H_LCD_voidSendString("Pass Saved");//move the lcd cursor to the previous location
     53a:	81 e3       	ldi	r24, 0x31	; 49
     53c:	91 e0       	ldi	r25, 0x01	; 1
     53e:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <H_LCD_voidSendString>
     542:	9f ef       	ldi	r25, 0xFF	; 255
     544:	24 e3       	ldi	r18, 0x34	; 52
     546:	3c e0       	ldi	r19, 0x0C	; 12
     548:	91 50       	subi	r25, 0x01	; 1
     54a:	20 40       	sbci	r18, 0x00	; 0
     54c:	30 40       	sbci	r19, 0x00	; 0
     54e:	e1 f7       	brne	.-8      	; 0x548 <__EEPROM_REGION_LENGTH__+0x148>
     550:	00 c0       	rjmp	.+0      	; 0x552 <__EEPROM_REGION_LENGTH__+0x152>
     552:	00 00       	nop
		_delay_ms(500);//Halt the system for the given time in (ms)
		H_LCD_voidClearDisplay();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     554:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <H_LCD_voidClearDisplay>
		H_EEPROM_u8Write_Byte(EEPROM_PASS_STATUS_ADDRESS,PASS_SET);//write the status of pass as it is set
     558:	61 e0       	ldi	r22, 0x01	; 1
     55a:	80 e6       	ldi	r24, 0x60	; 96
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	0e 94 f3 06 	call	0xde6	; 0xde6 <H_EEPROM_u8Write_Byte>
     562:	8f e1       	ldi	r24, 0x1F	; 31
     564:	9e e4       	ldi	r25, 0x4E	; 78
     566:	01 97       	sbiw	r24, 0x01	; 1
     568:	f1 f7       	brne	.-4      	; 0x566 <__EEPROM_REGION_LENGTH__+0x166>
     56a:	00 c0       	rjmp	.+0      	; 0x56c <__EEPROM_REGION_LENGTH__+0x16c>
     56c:	00 00       	nop
		_delay_ms(10);
		H_EEPROM_u8Write_Byte(LOGIN_BLOCKED_ADDRESS,FALSE);
     56e:	60 e0       	ldi	r22, 0x00	; 0
     570:	80 e9       	ldi	r24, 0x90	; 144
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	0e 94 f3 06 	call	0xde6	; 0xde6 <H_EEPROM_u8Write_Byte>
     578:	8f e1       	ldi	r24, 0x1F	; 31
     57a:	9e e4       	ldi	r25, 0x4E	; 78
     57c:	01 97       	sbiw	r24, 0x01	; 1
     57e:	f1 f7       	brne	.-4      	; 0x57c <__EEPROM_REGION_LENGTH__+0x17c>
     580:	00 c0       	rjmp	.+0      	; 0x582 <__EEPROM_REGION_LENGTH__+0x182>
     582:	00 00       	nop
     584:	0d c0       	rjmp	.+26     	; 0x5a0 <__EEPROM_REGION_LENGTH__+0x1a0>
		_delay_ms(10);
	}//The end of if admin and guest password is set
	else//this code of else run only if the system is not running for the first time (ADMIN and GUEST passwords are set)
	{
		H_EEPROM_u8Read_Byte(LOGIN_BLOCKED_ADDRESS,&block_mode_flag); //read the blocked location from EEPROM
     586:	be 01       	movw	r22, r28
     588:	6f 5f       	subi	r22, 0xFF	; 255
     58a:	7f 4f       	sbci	r23, 0xFF	; 255
     58c:	80 e9       	ldi	r24, 0x90	; 144
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	0e 94 24 07 	call	0xe48	; 0xe48 <H_EEPROM_u8Read_Byte>
     594:	8f e1       	ldi	r24, 0x1F	; 31
     596:	9e e4       	ldi	r25, 0x4E	; 78
     598:	01 97       	sbiw	r24, 0x01	; 1
     59a:	f1 f7       	brne	.-4      	; 0x598 <__EEPROM_REGION_LENGTH__+0x198>
     59c:	00 c0       	rjmp	.+0      	; 0x59e <__EEPROM_REGION_LENGTH__+0x19e>
     59e:	00 00       	nop
		H_LCD_voidSendString("Pass Saved");// show pass saved message
		_delay_ms(500);//Halt the system for the given time in (ms)
		H_LCD_voidClearDisplay();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row

		/********************************* setting guest password **********************************************/
		pass_counter=0;//reset password counter which count the characters of the pass
     5a0:	d1 2c       	mov	r13, r1
	while (1)//The start of the periodic code
	{
		key_pressed = NO_PRESSED_KEY;//return the variable that holds the pressed key from keypad to its initial value
		u8 pass_tries_count=0;//stores how many times the user tried to log in to the system and failed
		
		if ( timeout_flag==TRUE )//check for timeout
     5a2:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <__data_end>
     5a6:	81 30       	cpi	r24, 0x01	; 1
     5a8:	11 f5       	brne	.+68     	; 0x5ee <__EEPROM_REGION_LENGTH__+0x1ee>
		{//if timeout flag was raised
			M_Timer0_stop();//stop the timer that increase the session counter
     5aa:	0e 94 13 0c 	call	0x1826	; 0x1826 <M_Timer0_stop>
			session_counter = 0;//clear session counter
     5ae:	10 92 b6 02 	sts	0x02B6, r1	; 0x8002b6 <session_counter+0x1>
     5b2:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <session_counter>
			timeout_flag=FALSE;//clear time out flag
     5b6:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <__data_end>
			login_mode=NO_MODE;//log the user out
			key_pressed = NO_PRESSED_KEY;//clear the key_pressed to avoid unwanted selection in the menu switch
			H_LED_voidTurnOff(GUEST_LED_PIN);//turnoff the led of the guest
     5ba:	80 e0       	ldi	r24, 0x00	; 0
     5bc:	0e 94 0e 09 	call	0x121c	; 0x121c <H_LED_voidTurnOff>
			H_LED_voidTurnOff(ADMIN_LED_PIN);//turnoff the led of the admin
     5c0:	8c e1       	ldi	r24, 0x1C	; 28
     5c2:	0e 94 0e 09 	call	0x121c	; 0x121c <H_LED_voidTurnOff>
			H_LCD_voidClearDisplay();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     5c6:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <H_LCD_voidClearDisplay>
			H_LCD_voidSendString("Session Timeout");//print session timeout message
     5ca:	87 e5       	ldi	r24, 0x57	; 87
     5cc:	91 e0       	ldi	r25, 0x01	; 1
     5ce:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <H_LCD_voidSendString>
			H_BUZZER_voidTurnOn();
     5d2:	0e 94 e6 06 	call	0xdcc	; 0xdcc <H_BUZZER_voidTurnOn>
     5d6:	9f ef       	ldi	r25, 0xFF	; 255
     5d8:	29 e6       	ldi	r18, 0x69	; 105
     5da:	38 e1       	ldi	r19, 0x18	; 24
     5dc:	91 50       	subi	r25, 0x01	; 1
     5de:	20 40       	sbci	r18, 0x00	; 0
     5e0:	30 40       	sbci	r19, 0x00	; 0
     5e2:	e1 f7       	brne	.-8      	; 0x5dc <__EEPROM_REGION_LENGTH__+0x1dc>
     5e4:	00 c0       	rjmp	.+0      	; 0x5e6 <__EEPROM_REGION_LENGTH__+0x1e6>
     5e6:	00 00       	nop
			_delay_ms(1000);//Halt the system for the given time in (ms)
			H_BUZZER_voidTurnOff();
     5e8:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <H_BUZZER_voidTurnOff>
		if ( timeout_flag==TRUE )//check for timeout
		{//if timeout flag was raised
			M_Timer0_stop();//stop the timer that increase the session counter
			session_counter = 0;//clear session counter
			timeout_flag=FALSE;//clear time out flag
			login_mode=NO_MODE;//log the user out
     5ec:	d1 2c       	mov	r13, r1
			H_BUZZER_voidTurnOff();
			if ( key_pressed!=CHECK_ADMIN_MODE && key_pressed!=CHECK_GUEST_MODE )
			{
				H_LCD_voidClearDisplay();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
				H_LCD_voidSendString("Wrong input.");//Prints error message on the LCD
				key_pressed = NO_PRESSED_KEY;//return the variable that holds the pressed key from keypad to its initial value
     5ee:	c1 2c       	mov	r12, r1
     5f0:	0f ef       	ldi	r16, 0xFF	; 255
     5f2:	30 c2       	rjmp	.+1120   	; 0xa54 <__stack+0x1f5>
			H_BUZZER_voidTurnOff();
			
		}
		while (login_mode==NO_MODE)//The user can only leave the loop only in case of he was logged in as guest or admin
		{
			if(block_mode_flag==TRUE)//if the login process was blocked wait till the end of the block period
     5f4:	89 81       	ldd	r24, Y+1	; 0x01
     5f6:	81 30       	cpi	r24, 0x01	; 1
     5f8:	09 f0       	breq	.+2      	; 0x5fc <__EEPROM_REGION_LENGTH__+0x1fc>
     5fa:	4c c0       	rjmp	.+152    	; 0x694 <__EEPROM_REGION_LENGTH__+0x294>
			{
				login_counter=20;
     5fc:	84 e1       	ldi	r24, 0x14	; 20
     5fe:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <login_counter>
				H_LCD_voidClearDisplay();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     602:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <H_LCD_voidClearDisplay>
				H_LCD_voidSendString("Login blocked");
     606:	87 e6       	ldi	r24, 0x67	; 103
     608:	91 e0       	ldi	r25, 0x01	; 1
     60a:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <H_LCD_voidSendString>
				H_LCD_voidSetPosition(2,1);
     60e:	61 e0       	ldi	r22, 0x01	; 1
     610:	82 e0       	ldi	r24, 0x02	; 2
     612:	0e 94 ee 08 	call	0x11dc	; 0x11dc <H_LCD_voidSetPosition>
				H_LCD_voidSendString("wait 20 seconds");
     616:	85 e7       	ldi	r24, 0x75	; 117
     618:	91 e0       	ldi	r25, 0x01	; 1
     61a:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <H_LCD_voidSendString>
				H_LED_voidTurnOn(BLOCK_LED_PIN);//Turn on the led of Blocked
     61e:	8f e0       	ldi	r24, 0x0F	; 15
     620:	0e 94 0a 09 	call	0x1214	; 0x1214 <H_LED_voidTurnOn>
				for(s8 i=20;i>=0;i--){
     624:	14 e1       	ldi	r17, 0x14	; 20
     626:	28 c0       	rjmp	.+80     	; 0x678 <__EEPROM_REGION_LENGTH__+0x278>
					H_BUZZER_voidTurnOn();
     628:	0e 94 e6 06 	call	0xdcc	; 0xdcc <H_BUZZER_voidTurnOn>
     62c:	8f e7       	ldi	r24, 0x7F	; 127
     62e:	98 e3       	ldi	r25, 0x38	; 56
     630:	21 e0       	ldi	r18, 0x01	; 1
     632:	81 50       	subi	r24, 0x01	; 1
     634:	90 40       	sbci	r25, 0x00	; 0
     636:	20 40       	sbci	r18, 0x00	; 0
     638:	e1 f7       	brne	.-8      	; 0x632 <__EEPROM_REGION_LENGTH__+0x232>
     63a:	00 c0       	rjmp	.+0      	; 0x63c <__EEPROM_REGION_LENGTH__+0x23c>
     63c:	00 00       	nop
					_delay_ms(50);
					H_BUZZER_voidTurnOff();
     63e:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <H_BUZZER_voidTurnOff>
					H_SSD_voidDisplayNumForAtime(login_counter,1000);//Halt the system for the given time in (ms)
     642:	68 ee       	ldi	r22, 0xE8	; 232
     644:	73 e0       	ldi	r23, 0x03	; 3
     646:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <login_counter>
     64a:	0e 94 33 09 	call	0x1266	; 0x1266 <H_SSD_voidDisplayNumForAtime>
					if(i==0)
     64e:	11 11       	cpse	r17, r1
     650:	0d c0       	rjmp	.+26     	; 0x66c <__EEPROM_REGION_LENGTH__+0x26c>
					{
						H_BUZZER_voidTurnOn();
     652:	0e 94 e6 06 	call	0xdcc	; 0xdcc <H_BUZZER_voidTurnOn>
     656:	3f ef       	ldi	r19, 0xFF	; 255
     658:	89 e6       	ldi	r24, 0x69	; 105
     65a:	98 e1       	ldi	r25, 0x18	; 24
     65c:	31 50       	subi	r19, 0x01	; 1
     65e:	80 40       	sbci	r24, 0x00	; 0
     660:	90 40       	sbci	r25, 0x00	; 0
     662:	e1 f7       	brne	.-8      	; 0x65c <__EEPROM_REGION_LENGTH__+0x25c>
     664:	00 c0       	rjmp	.+0      	; 0x666 <__EEPROM_REGION_LENGTH__+0x266>
     666:	00 00       	nop
						_delay_ms(1000);
						H_BUZZER_voidTurnOff();
     668:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <H_BUZZER_voidTurnOff>
					}
					login_counter--;
     66c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <login_counter>
     670:	81 50       	subi	r24, 0x01	; 1
     672:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <login_counter>
				H_LCD_voidClearDisplay();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
				H_LCD_voidSendString("Login blocked");
				H_LCD_voidSetPosition(2,1);
				H_LCD_voidSendString("wait 20 seconds");
				H_LED_voidTurnOn(BLOCK_LED_PIN);//Turn on the led of Blocked
				for(s8 i=20;i>=0;i--){
     676:	11 50       	subi	r17, 0x01	; 1
     678:	11 23       	and	r17, r17
     67a:	b4 f6       	brge	.-84     	; 0x628 <__EEPROM_REGION_LENGTH__+0x228>
					}
					login_counter--;

				}

				login_counter=0;
     67c:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <login_counter>
				//_delay_ms(BLOCK_MODE_TIME);//Halt the system for the given time in (ms)
				pass_tries_count = 0; //Clear the count on number of wrong tries
				block_mode_flag = FALSE;//Disable block of runtime
     680:	19 82       	std	Y+1, r1	; 0x01
				H_LED_voidTurnOff(BLOCK_LED_PIN);//Turn off the led of Blocked
     682:	8f e0       	ldi	r24, 0x0F	; 15
     684:	0e 94 0e 09 	call	0x121c	; 0x121c <H_LED_voidTurnOff>
				H_EEPROM_u8Write_Byte(LOGIN_BLOCKED_ADDRESS,FALSE);//write false at blocked location in EEPROM
     688:	60 e0       	ldi	r22, 0x00	; 0
     68a:	80 e9       	ldi	r24, 0x90	; 144
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	0e 94 f3 06 	call	0xde6	; 0xde6 <H_EEPROM_u8Write_Byte>

				}

				login_counter=0;
				//_delay_ms(BLOCK_MODE_TIME);//Halt the system for the given time in (ms)
				pass_tries_count = 0; //Clear the count on number of wrong tries
     692:	c1 2c       	mov	r12, r1
				block_mode_flag = FALSE;//Disable block of runtime
				H_LED_voidTurnOff(BLOCK_LED_PIN);//Turn off the led of Blocked
				H_EEPROM_u8Write_Byte(LOGIN_BLOCKED_ADDRESS,FALSE);//write false at blocked location in EEPROM
			}
			H_LCD_voidClearDisplay();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     694:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <H_LCD_voidClearDisplay>
			H_LCD_voidSendString("Select mode :");
     698:	85 e8       	ldi	r24, 0x85	; 133
     69a:	91 e0       	ldi	r25, 0x01	; 1
     69c:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <H_LCD_voidSendString>
			H_LCD_voidSetPosition(2,1);
     6a0:	61 e0       	ldi	r22, 0x01	; 1
     6a2:	82 e0       	ldi	r24, 0x02	; 2
     6a4:	0e 94 ee 08 	call	0x11dc	; 0x11dc <H_LCD_voidSetPosition>
			H_LCD_voidSendString("0:Admin 1:Guest");
     6a8:	83 e9       	ldi	r24, 0x93	; 147
     6aa:	91 e0       	ldi	r25, 0x01	; 1
     6ac:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <H_LCD_voidSendString>
			while(key_pressed==NO_PRESSED_KEY)//wait for the selection of the mode
     6b0:	03 c0       	rjmp	.+6      	; 0x6b8 <__EEPROM_REGION_LENGTH__+0x2b8>
			{
				key_pressed = H_KEYPAD_u8_getPressedKey();//if the user pressed any button in keypad save the value in key_pressed
     6b2:	0e 94 9d 07 	call	0xf3a	; 0xf3a <H_KEYPAD_u8_getPressedKey>
     6b6:	08 2f       	mov	r16, r24
			}
			H_LCD_voidClearDisplay();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
			H_LCD_voidSendString("Select mode :");
			H_LCD_voidSetPosition(2,1);
			H_LCD_voidSendString("0:Admin 1:Guest");
			while(key_pressed==NO_PRESSED_KEY)//wait for the selection of the mode
     6b8:	0f 3f       	cpi	r16, 0xFF	; 255
     6ba:	d9 f3       	breq	.-10     	; 0x6b2 <__EEPROM_REGION_LENGTH__+0x2b2>
			{
				key_pressed = H_KEYPAD_u8_getPressedKey();//if the user pressed any button in keypad save the value in key_pressed
			}
			H_BUZZER_voidTurnOn();
     6bc:	0e 94 e6 06 	call	0xdcc	; 0xdcc <H_BUZZER_voidTurnOn>
     6c0:	2f ef       	ldi	r18, 0xFF	; 255
     6c2:	39 ef       	ldi	r19, 0xF9	; 249
     6c4:	80 e0       	ldi	r24, 0x00	; 0
     6c6:	21 50       	subi	r18, 0x01	; 1
     6c8:	30 40       	sbci	r19, 0x00	; 0
     6ca:	80 40       	sbci	r24, 0x00	; 0
     6cc:	e1 f7       	brne	.-8      	; 0x6c6 <__EEPROM_REGION_LENGTH__+0x2c6>
     6ce:	00 c0       	rjmp	.+0      	; 0x6d0 <__EEPROM_REGION_LENGTH__+0x2d0>
     6d0:	00 00       	nop
			_delay_ms(40);
			H_BUZZER_voidTurnOff();
     6d2:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <H_BUZZER_voidTurnOff>
			if ( key_pressed!=CHECK_ADMIN_MODE && key_pressed!=CHECK_GUEST_MODE )
     6d6:	80 ed       	ldi	r24, 0xD0	; 208
     6d8:	80 0f       	add	r24, r16
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	88 f0       	brcs	.+34     	; 0x700 <__EEPROM_REGION_LENGTH__+0x300>
			{
				H_LCD_voidClearDisplay();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     6de:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <H_LCD_voidClearDisplay>
				H_LCD_voidSendString("Wrong input.");//Prints error message on the LCD
     6e2:	83 ea       	ldi	r24, 0xA3	; 163
     6e4:	91 e0       	ldi	r25, 0x01	; 1
     6e6:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <H_LCD_voidSendString>
     6ea:	9f ef       	ldi	r25, 0xFF	; 255
     6ec:	29 e6       	ldi	r18, 0x69	; 105
     6ee:	38 e1       	ldi	r19, 0x18	; 24
     6f0:	91 50       	subi	r25, 0x01	; 1
     6f2:	20 40       	sbci	r18, 0x00	; 0
     6f4:	30 40       	sbci	r19, 0x00	; 0
     6f6:	e1 f7       	brne	.-8      	; 0x6f0 <__EEPROM_REGION_LENGTH__+0x2f0>
     6f8:	00 c0       	rjmp	.+0      	; 0x6fa <__EEPROM_REGION_LENGTH__+0x2fa>
     6fa:	00 00       	nop
				key_pressed = NO_PRESSED_KEY;//return the variable that holds the pressed key from keypad to its initial value
     6fc:	0f ef       	ldi	r16, 0xFF	; 255
     6fe:	aa c1       	rjmp	.+852    	; 0xa54 <__stack+0x1f5>
				_delay_ms(1000);//Halt the system for the given time in (ms)
				continue;//return to the loop of login #while (login_mode==NO_MODE)# line 128
			}

			u8 pass_counter=0;//counts the entered key of the password from the keypad
			u8 pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};//temporarily hold the entire password that will be entered by the user to be check
     700:	8f ef       	ldi	r24, 0xFF	; 255
     702:	8f 83       	std	Y+7, r24	; 0x07
     704:	88 87       	std	Y+8, r24	; 0x08
     706:	89 87       	std	Y+9, r24	; 0x09
     708:	8a 87       	std	Y+10, r24	; 0x0a
			u8 stored_pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};//temporarily hold the entire stored password that is written by the user for the first time
     70a:	8b 83       	std	Y+3, r24	; 0x03
     70c:	8c 83       	std	Y+4, r24	; 0x04
     70e:	8d 83       	std	Y+5, r24	; 0x05
     710:	8e 83       	std	Y+6, r24	; 0x06
			
			switch(key_pressed)
     712:	00 33       	cpi	r16, 0x30	; 48
     714:	09 f4       	brne	.+2      	; 0x718 <__EEPROM_REGION_LENGTH__+0x318>
     716:	cd c0       	rjmp	.+410    	; 0x8b2 <__stack+0x53>
     718:	01 33       	cpi	r16, 0x31	; 49
     71a:	09 f4       	brne	.+2      	; 0x71e <__EEPROM_REGION_LENGTH__+0x31e>
     71c:	96 c1       	rjmp	.+812    	; 0xa4a <__stack+0x1eb>
     71e:	9a c1       	rjmp	.+820    	; 0xa54 <__stack+0x1f5>
				/********************************* Admin login **********************************************/
				case CHECK_ADMIN_MODE:
				while(login_mode!=ADMIN)//this loop is to repeat the login for admin in case of wrong password
				{
					key_pressed = NO_PRESSED_KEY;//return the variable that holds the pressed key from keypad to its initial value
					H_LCD_voidClearDisplay();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     720:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <H_LCD_voidClearDisplay>
					H_LCD_voidSendString("Admin mode");
     724:	80 eb       	ldi	r24, 0xB0	; 176
     726:	91 e0       	ldi	r25, 0x01	; 1
     728:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <H_LCD_voidSendString>
					H_LCD_voidSetPosition(2,1);
     72c:	61 e0       	ldi	r22, 0x01	; 1
     72e:	82 e0       	ldi	r24, 0x02	; 2
     730:	0e 94 ee 08 	call	0x11dc	; 0x11dc <H_LCD_voidSetPosition>
					H_LCD_voidSendString("Enter Pass:");
     734:	8b eb       	ldi	r24, 0xBB	; 187
     736:	91 e0       	ldi	r25, 0x01	; 1
     738:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <H_LCD_voidSendString>
     73c:	8f ef       	ldi	r24, 0xFF	; 255
     73e:	91 ee       	ldi	r25, 0xE1	; 225
     740:	24 e0       	ldi	r18, 0x04	; 4
     742:	81 50       	subi	r24, 0x01	; 1
     744:	90 40       	sbci	r25, 0x00	; 0
     746:	20 40       	sbci	r18, 0x00	; 0
     748:	e1 f7       	brne	.-8      	; 0x742 <__EEPROM_REGION_LENGTH__+0x342>
     74a:	00 c0       	rjmp	.+0      	; 0x74c <__EEPROM_REGION_LENGTH__+0x34c>
     74c:	00 00       	nop
					_delay_ms(200);//Halt the system for the given time in (ms)
					pass_counter=0;//counts the number of entered characters
     74e:	00 e0       	ldi	r16, 0x00	; 0
					while(pass_counter<PASS_SIZE)
     750:	4c c0       	rjmp	.+152    	; 0x7ea <__EEPROM_REGION_LENGTH__+0x3ea>
					{
						while (key_pressed == NO_PRESSED_KEY)//repeat till the user press any key
						{
							key_pressed = H_KEYPAD_u8_getPressedKey();//if the user pressed any button in keypad save the value in key_pressed
     752:	0e 94 9d 07 	call	0xf3a	; 0xf3a <H_KEYPAD_u8_getPressedKey>
     756:	18 2f       	mov	r17, r24
     758:	01 c0       	rjmp	.+2      	; 0x75c <__EEPROM_REGION_LENGTH__+0x35c>
     75a:	1f ef       	ldi	r17, 0xFF	; 255
					H_LCD_voidSendString("Enter Pass:");
					_delay_ms(200);//Halt the system for the given time in (ms)
					pass_counter=0;//counts the number of entered characters
					while(pass_counter<PASS_SIZE)
					{
						while (key_pressed == NO_PRESSED_KEY)//repeat till the user press any key
     75c:	1f 3f       	cpi	r17, 0xFF	; 255
     75e:	c9 f3       	breq	.-14     	; 0x752 <__EEPROM_REGION_LENGTH__+0x352>
						{
							key_pressed = H_KEYPAD_u8_getPressedKey();//if the user pressed any button in keypad save the value in key_pressed
						}
						H_BUZZER_voidTurnOn();
     760:	0e 94 e6 06 	call	0xdcc	; 0xdcc <H_BUZZER_voidTurnOn>
     764:	3f ef       	ldi	r19, 0xFF	; 255
     766:	89 ef       	ldi	r24, 0xF9	; 249
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	31 50       	subi	r19, 0x01	; 1
     76c:	80 40       	sbci	r24, 0x00	; 0
     76e:	90 40       	sbci	r25, 0x00	; 0
     770:	e1 f7       	brne	.-8      	; 0x76a <__EEPROM_REGION_LENGTH__+0x36a>
     772:	00 c0       	rjmp	.+0      	; 0x774 <__EEPROM_REGION_LENGTH__+0x374>
     774:	00 00       	nop
						_delay_ms(40);
						H_BUZZER_voidTurnOff();
     776:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <H_BUZZER_voidTurnOff>
						pass[pass_counter]=key_pressed;//add the entered character to the pass array
     77a:	e0 2e       	mov	r14, r16
     77c:	f1 2c       	mov	r15, r1
     77e:	e7 e0       	ldi	r30, 0x07	; 7
     780:	f0 e0       	ldi	r31, 0x00	; 0
     782:	ec 0f       	add	r30, r28
     784:	fd 1f       	adc	r31, r29
     786:	ee 0d       	add	r30, r14
     788:	ff 1d       	adc	r31, r15
     78a:	10 83       	st	Z, r17
						H_LCD_voidSendChar(key_pressed);//print the entered character
     78c:	81 2f       	mov	r24, r17
     78e:	0e 94 d6 08 	call	0x11ac	; 0x11ac <H_LCD_voidSendChar>
     792:	2f ef       	ldi	r18, 0xFF	; 255
     794:	31 ee       	ldi	r19, 0xE1	; 225
     796:	84 e0       	ldi	r24, 0x04	; 4
     798:	21 50       	subi	r18, 0x01	; 1
     79a:	30 40       	sbci	r19, 0x00	; 0
     79c:	80 40       	sbci	r24, 0x00	; 0
     79e:	e1 f7       	brne	.-8      	; 0x798 <__EEPROM_REGION_LENGTH__+0x398>
     7a0:	00 c0       	rjmp	.+0      	; 0x7a2 <__EEPROM_REGION_LENGTH__+0x3a2>
     7a2:	00 00       	nop
						_delay_ms(CHARACTER_PREVIEW_TIME);//Halt the system for the given time in (ms)
						H_LCD_voidSetPosition(2,12+pass_counter);//move the cursor of the lcd screen to the previous location
     7a4:	6c e0       	ldi	r22, 0x0C	; 12
     7a6:	60 0f       	add	r22, r16
     7a8:	82 e0       	ldi	r24, 0x02	; 2
     7aa:	0e 94 ee 08 	call	0x11dc	; 0x11dc <H_LCD_voidSetPosition>
						H_LCD_voidSendChar(PASSWORD_SYMBOL);// to display (Password sign *)
     7ae:	8a e2       	ldi	r24, 0x2A	; 42
     7b0:	0e 94 d6 08 	call	0x11ac	; 0x11ac <H_LCD_voidSendChar>
     7b4:	9f ef       	ldi	r25, 0xFF	; 255
     7b6:	20 e7       	ldi	r18, 0x70	; 112
     7b8:	32 e0       	ldi	r19, 0x02	; 2
     7ba:	91 50       	subi	r25, 0x01	; 1
     7bc:	20 40       	sbci	r18, 0x00	; 0
     7be:	30 40       	sbci	r19, 0x00	; 0
     7c0:	e1 f7       	brne	.-8      	; 0x7ba <__EEPROM_REGION_LENGTH__+0x3ba>
     7c2:	00 c0       	rjmp	.+0      	; 0x7c4 <__EEPROM_REGION_LENGTH__+0x3c4>
     7c4:	00 00       	nop
						_delay_ms(100);//Halt the system for the given time in (ms)
						H_EEPROM_u8Read_Byte(EEPROM_ADMIN_ADDRESS+pass_counter,&stored_pass[pass_counter]);//Save the entire password in the EEPROM
     7c6:	63 e0       	ldi	r22, 0x03	; 3
     7c8:	70 e0       	ldi	r23, 0x00	; 0
     7ca:	6c 0f       	add	r22, r28
     7cc:	7d 1f       	adc	r23, r29
     7ce:	6e 0d       	add	r22, r14
     7d0:	7f 1d       	adc	r23, r15
     7d2:	c7 01       	movw	r24, r14
     7d4:	80 59       	subi	r24, 0x90	; 144
     7d6:	9f 4f       	sbci	r25, 0xFF	; 255
     7d8:	0e 94 24 07 	call	0xe48	; 0xe48 <H_EEPROM_u8Read_Byte>
     7dc:	8f e1       	ldi	r24, 0x1F	; 31
     7de:	9e e4       	ldi	r25, 0x4E	; 78
     7e0:	01 97       	sbiw	r24, 0x01	; 1
     7e2:	f1 f7       	brne	.-4      	; 0x7e0 <__EEPROM_REGION_LENGTH__+0x3e0>
     7e4:	00 c0       	rjmp	.+0      	; 0x7e6 <__EEPROM_REGION_LENGTH__+0x3e6>
     7e6:	00 00       	nop
						_delay_ms(10);
						pass_counter++;//increase the password counter that count the characters of the pass
     7e8:	0f 5f       	subi	r16, 0xFF	; 255
					H_LCD_voidSendString("Admin mode");
					H_LCD_voidSetPosition(2,1);
					H_LCD_voidSendString("Enter Pass:");
					_delay_ms(200);//Halt the system for the given time in (ms)
					pass_counter=0;//counts the number of entered characters
					while(pass_counter<PASS_SIZE)
     7ea:	04 30       	cpi	r16, 0x04	; 4
     7ec:	08 f4       	brcc	.+2      	; 0x7f0 <__EEPROM_REGION_LENGTH__+0x3f0>
     7ee:	b5 cf       	rjmp	.-150    	; 0x75a <__EEPROM_REGION_LENGTH__+0x35a>
						key_pressed = NO_PRESSED_KEY;//return the variable that holds the pressed key from keypad to its initial value
						
					}
					
					/*compare passwords*/
					if ((ui8ComparePass(pass,stored_pass,PASS_SIZE)) == TRUE)//in case of right password
     7f0:	44 e0       	ldi	r20, 0x04	; 4
     7f2:	be 01       	movw	r22, r28
     7f4:	6d 5f       	subi	r22, 0xFD	; 253
     7f6:	7f 4f       	sbci	r23, 0xFF	; 255
     7f8:	ce 01       	movw	r24, r28
     7fa:	07 96       	adiw	r24, 0x07	; 7
     7fc:	0e 94 57 00 	call	0xae	; 0xae <ui8ComparePass>
     800:	81 30       	cpi	r24, 0x01	; 1
     802:	21 f5       	brne	.+72     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
					{
						M_UART_voidSend(RESET_FIRE_ALARM);
     804:	87 e3       	ldi	r24, 0x37	; 55
     806:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <M_UART_voidSend>
						login_mode = ADMIN;//set the login mode to admin mode
						pass_tries_count=0;//clear the counter of wrong tries
						H_LCD_voidClearDisplay();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     80a:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <H_LCD_voidClearDisplay>
						H_LCD_voidSendString("Right pass");
     80e:	87 ec       	ldi	r24, 0xC7	; 199
     810:	91 e0       	ldi	r25, 0x01	; 1
     812:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <H_LCD_voidSendString>
						H_LCD_voidSetPosition(2,1);
     816:	61 e0       	ldi	r22, 0x01	; 1
     818:	82 e0       	ldi	r24, 0x02	; 2
     81a:	0e 94 ee 08 	call	0x11dc	; 0x11dc <H_LCD_voidSetPosition>
						H_LCD_voidSendString("Admin mode");
     81e:	80 eb       	ldi	r24, 0xB0	; 176
     820:	91 e0       	ldi	r25, 0x01	; 1
     822:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <H_LCD_voidSendString>
     826:	9f ef       	ldi	r25, 0xFF	; 255
     828:	24 e3       	ldi	r18, 0x34	; 52
     82a:	3c e0       	ldi	r19, 0x0C	; 12
     82c:	91 50       	subi	r25, 0x01	; 1
     82e:	20 40       	sbci	r18, 0x00	; 0
     830:	30 40       	sbci	r19, 0x00	; 0
     832:	e1 f7       	brne	.-8      	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
     834:	00 c0       	rjmp	.+0      	; 0x836 <__DATA_REGION_LENGTH__+0x36>
     836:	00 00       	nop
						_delay_ms(500);//Halt the system for the given time in (ms)
						H_LED_voidTurnOn(ADMIN_LED_PIN);//turn on the led of admin
     838:	8c e1       	ldi	r24, 0x1C	; 28
     83a:	0e 94 0a 09 	call	0x1214	; 0x1214 <H_LED_voidTurnOn>
						M_Timer0_start();//start the timer that counts the session time
     83e:	0e 94 0b 0c 	call	0x1816	; 0x1816 <M_Timer0_start>
						H_LCD_voidClearDisplay();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     842:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <H_LCD_voidClearDisplay>
					/*compare passwords*/
					if ((ui8ComparePass(pass,stored_pass,PASS_SIZE)) == TRUE)//in case of right password
					{
						M_UART_voidSend(RESET_FIRE_ALARM);
						login_mode = ADMIN;//set the login mode to admin mode
						pass_tries_count=0;//clear the counter of wrong tries
     846:	c1 2c       	mov	r12, r1
					
					/*compare passwords*/
					if ((ui8ComparePass(pass,stored_pass,PASS_SIZE)) == TRUE)//in case of right password
					{
						M_UART_voidSend(RESET_FIRE_ALARM);
						login_mode = ADMIN;//set the login mode to admin mode
     848:	81 e0       	ldi	r24, 0x01	; 1
     84a:	31 c0       	rjmp	.+98     	; 0x8ae <__stack+0x4f>
						M_Timer0_start();//start the timer that counts the session time
						H_LCD_voidClearDisplay();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
					}
					else//in case of wrong password
					{
						pass_tries_count++;//increase the number of wrong tries to block login if it exceeds the allowed tries
     84c:	c3 94       	inc	r12
						login_mode = NO_MODE;//set the mode as not logged in
						H_LCD_voidClearDisplay();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     84e:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <H_LCD_voidClearDisplay>
						H_LCD_voidSendString("Wrong Pass");
     852:	82 ed       	ldi	r24, 0xD2	; 210
     854:	91 e0       	ldi	r25, 0x01	; 1
     856:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <H_LCD_voidSendString>
						H_LCD_voidSetPosition(2,1);
     85a:	61 e0       	ldi	r22, 0x01	; 1
     85c:	82 e0       	ldi	r24, 0x02	; 2
     85e:	0e 94 ee 08 	call	0x11dc	; 0x11dc <H_LCD_voidSetPosition>
						H_LCD_voidSendString("Tries left:");
     862:	8d ed       	ldi	r24, 0xDD	; 221
     864:	91 e0       	ldi	r25, 0x01	; 1
     866:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <H_LCD_voidSendString>
						H_LCD_voidSendChar(TRIES_ALLOWED-pass_tries_count+ASCII_ZERO);//print the number of tries left before block mode to be activated
     86a:	83 e3       	ldi	r24, 0x33	; 51
     86c:	8c 19       	sub	r24, r12
     86e:	0e 94 d6 08 	call	0x11ac	; 0x11ac <H_LCD_voidSendChar>
     872:	8f ef       	ldi	r24, 0xFF	; 255
     874:	99 e6       	ldi	r25, 0x69	; 105
     876:	28 e1       	ldi	r18, 0x18	; 24
     878:	81 50       	subi	r24, 0x01	; 1
     87a:	90 40       	sbci	r25, 0x00	; 0
     87c:	20 40       	sbci	r18, 0x00	; 0
     87e:	e1 f7       	brne	.-8      	; 0x878 <__stack+0x19>
     880:	00 c0       	rjmp	.+0      	; 0x882 <__stack+0x23>
     882:	00 00       	nop
						_delay_ms(1000);//Halt the system for the given time in (ms)
						H_LCD_voidClearDisplay();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     884:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <H_LCD_voidClearDisplay>
						if (pass_tries_count>=TRIES_ALLOWED)//if the condition of the block mode is true
     888:	32 e0       	ldi	r19, 0x02	; 2
     88a:	3c 15       	cp	r19, r12
     88c:	78 f4       	brcc	.+30     	; 0x8ac <__stack+0x4d>
						{
							H_EEPROM_u8Write_Byte(LOGIN_BLOCKED_ADDRESS,TRUE);//write to the EEPROM TRUE to the the block mode address
     88e:	61 e0       	ldi	r22, 0x01	; 1
     890:	80 e9       	ldi	r24, 0x90	; 144
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	0e 94 f3 06 	call	0xde6	; 0xde6 <H_EEPROM_u8Write_Byte>
     898:	8f e1       	ldi	r24, 0x1F	; 31
     89a:	9e e4       	ldi	r25, 0x4E	; 78
     89c:	01 97       	sbiw	r24, 0x01	; 1
     89e:	f1 f7       	brne	.-4      	; 0x89c <__stack+0x3d>
     8a0:	00 c0       	rjmp	.+0      	; 0x8a2 <__stack+0x43>
     8a2:	00 00       	nop
							_delay_ms(10);
							block_mode_flag = TRUE;//turn on block mode
     8a4:	81 e0       	ldi	r24, 0x01	; 1
     8a6:	89 83       	std	Y+1, r24	; 0x01
							break;//break the loop of admin login #while(login_mode!=ADMIN)# at line 169
     8a8:	0f ef       	ldi	r16, 0xFF	; 255
     8aa:	d4 c0       	rjmp	.+424    	; 0xa54 <__stack+0x1f5>
						H_LCD_voidClearDisplay();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
					}
					else//in case of wrong password
					{
						pass_tries_count++;//increase the number of wrong tries to block login if it exceeds the allowed tries
						login_mode = NO_MODE;//set the mode as not logged in
     8ac:	8d 2d       	mov	r24, r13
     8ae:	0f ef       	ldi	r16, 0xFF	; 255
     8b0:	01 c0       	rjmp	.+2      	; 0x8b4 <__stack+0x55>

			u8 pass_counter=0;//counts the entered key of the password from the keypad
			u8 pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};//temporarily hold the entire password that will be entered by the user to be check
			u8 stored_pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};//temporarily hold the entire stored password that is written by the user for the first time
			
			switch(key_pressed)
     8b2:	8d 2d       	mov	r24, r13
			{
				/********************************* Admin login **********************************************/
				case CHECK_ADMIN_MODE:
				while(login_mode!=ADMIN)//this loop is to repeat the login for admin in case of wrong password
     8b4:	81 30       	cpi	r24, 0x01	; 1
     8b6:	09 f0       	breq	.+2      	; 0x8ba <__stack+0x5b>
     8b8:	33 cf       	rjmp	.-410    	; 0x720 <__EEPROM_REGION_LENGTH__+0x320>
     8ba:	d8 2e       	mov	r13, r24
     8bc:	cb c0       	rjmp	.+406    	; 0xa54 <__stack+0x1f5>
				/********************************* Guest login **********************************************/
				case  CHECK_GUEST_MODE:
				while(login_mode != GUEST)
				{
					key_pressed = NO_PRESSED_KEY;//return the variable that holds the pressed key from keypad to its initial value
					H_LCD_voidClearDisplay();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     8be:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <H_LCD_voidClearDisplay>
					H_LCD_voidSendString("Guest mode");
     8c2:	89 ee       	ldi	r24, 0xE9	; 233
     8c4:	91 e0       	ldi	r25, 0x01	; 1
     8c6:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <H_LCD_voidSendString>
					H_LCD_voidSetPosition(2,1);
     8ca:	61 e0       	ldi	r22, 0x01	; 1
     8cc:	82 e0       	ldi	r24, 0x02	; 2
     8ce:	0e 94 ee 08 	call	0x11dc	; 0x11dc <H_LCD_voidSetPosition>
					H_LCD_voidSendString("Enter pass:");
     8d2:	84 ef       	ldi	r24, 0xF4	; 244
     8d4:	91 e0       	ldi	r25, 0x01	; 1
     8d6:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <H_LCD_voidSendString>
     8da:	9f ef       	ldi	r25, 0xFF	; 255
     8dc:	21 ee       	ldi	r18, 0xE1	; 225
     8de:	34 e0       	ldi	r19, 0x04	; 4
     8e0:	91 50       	subi	r25, 0x01	; 1
     8e2:	20 40       	sbci	r18, 0x00	; 0
     8e4:	30 40       	sbci	r19, 0x00	; 0
     8e6:	e1 f7       	brne	.-8      	; 0x8e0 <__stack+0x81>
     8e8:	00 c0       	rjmp	.+0      	; 0x8ea <__stack+0x8b>
     8ea:	00 00       	nop
					_delay_ms(200);//Halt the system for the given time in (ms)
					pass_counter=0;//counts the number of entered characters
     8ec:	00 e0       	ldi	r16, 0x00	; 0
					while(pass_counter<PASS_SIZE)
     8ee:	4c c0       	rjmp	.+152    	; 0x988 <__stack+0x129>
					{
						while (key_pressed == NO_PRESSED_KEY)//repeat till the user press any key
						{
							key_pressed = H_KEYPAD_u8_getPressedKey();//if the user pressed any button in keypad save the value in key_pressed
     8f0:	0e 94 9d 07 	call	0xf3a	; 0xf3a <H_KEYPAD_u8_getPressedKey>
     8f4:	18 2f       	mov	r17, r24
     8f6:	01 c0       	rjmp	.+2      	; 0x8fa <__stack+0x9b>
     8f8:	1f ef       	ldi	r17, 0xFF	; 255
					H_LCD_voidSendString("Enter pass:");
					_delay_ms(200);//Halt the system for the given time in (ms)
					pass_counter=0;//counts the number of entered characters
					while(pass_counter<PASS_SIZE)
					{
						while (key_pressed == NO_PRESSED_KEY)//repeat till the user press any key
     8fa:	1f 3f       	cpi	r17, 0xFF	; 255
     8fc:	c9 f3       	breq	.-14     	; 0x8f0 <__stack+0x91>
						{
							key_pressed = H_KEYPAD_u8_getPressedKey();//if the user pressed any button in keypad save the value in key_pressed
						}
						H_BUZZER_voidTurnOn();
     8fe:	0e 94 e6 06 	call	0xdcc	; 0xdcc <H_BUZZER_voidTurnOn>
     902:	8f ef       	ldi	r24, 0xFF	; 255
     904:	99 ef       	ldi	r25, 0xF9	; 249
     906:	20 e0       	ldi	r18, 0x00	; 0
     908:	81 50       	subi	r24, 0x01	; 1
     90a:	90 40       	sbci	r25, 0x00	; 0
     90c:	20 40       	sbci	r18, 0x00	; 0
     90e:	e1 f7       	brne	.-8      	; 0x908 <__stack+0xa9>
     910:	00 c0       	rjmp	.+0      	; 0x912 <__stack+0xb3>
     912:	00 00       	nop
						_delay_ms(40);
						H_BUZZER_voidTurnOff();
     914:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <H_BUZZER_voidTurnOff>
						pass[pass_counter]=key_pressed;//add the pressed key to the password string
     918:	e0 2e       	mov	r14, r16
     91a:	f1 2c       	mov	r15, r1
     91c:	e7 e0       	ldi	r30, 0x07	; 7
     91e:	f0 e0       	ldi	r31, 0x00	; 0
     920:	ec 0f       	add	r30, r28
     922:	fd 1f       	adc	r31, r29
     924:	ee 0d       	add	r30, r14
     926:	ff 1d       	adc	r31, r15
     928:	10 83       	st	Z, r17
						H_LCD_voidSendChar(key_pressed);//print the entered character
     92a:	81 2f       	mov	r24, r17
     92c:	0e 94 d6 08 	call	0x11ac	; 0x11ac <H_LCD_voidSendChar>
     930:	3f ef       	ldi	r19, 0xFF	; 255
     932:	81 ee       	ldi	r24, 0xE1	; 225
     934:	94 e0       	ldi	r25, 0x04	; 4
     936:	31 50       	subi	r19, 0x01	; 1
     938:	80 40       	sbci	r24, 0x00	; 0
     93a:	90 40       	sbci	r25, 0x00	; 0
     93c:	e1 f7       	brne	.-8      	; 0x936 <__stack+0xd7>
     93e:	00 c0       	rjmp	.+0      	; 0x940 <__stack+0xe1>
     940:	00 00       	nop
						_delay_ms(CHARACTER_PREVIEW_TIME);//Halt the system for the given time in (ms)
						H_LCD_voidSetPosition(2,12+pass_counter);//return the cursor to the location of the previous character to replace it with the password sign
     942:	6c e0       	ldi	r22, 0x0C	; 12
     944:	60 0f       	add	r22, r16
     946:	82 e0       	ldi	r24, 0x02	; 2
     948:	0e 94 ee 08 	call	0x11dc	; 0x11dc <H_LCD_voidSetPosition>
						H_LCD_voidSendChar(PASSWORD_SYMBOL); // to display (Password sign *)
     94c:	8a e2       	ldi	r24, 0x2A	; 42
     94e:	0e 94 d6 08 	call	0x11ac	; 0x11ac <H_LCD_voidSendChar>
     952:	2f ef       	ldi	r18, 0xFF	; 255
     954:	30 e7       	ldi	r19, 0x70	; 112
     956:	82 e0       	ldi	r24, 0x02	; 2
     958:	21 50       	subi	r18, 0x01	; 1
     95a:	30 40       	sbci	r19, 0x00	; 0
     95c:	80 40       	sbci	r24, 0x00	; 0
     95e:	e1 f7       	brne	.-8      	; 0x958 <__stack+0xf9>
     960:	00 c0       	rjmp	.+0      	; 0x962 <__stack+0x103>
     962:	00 00       	nop
						_delay_ms(100);//Halt the system for the given time in (ms)
						H_EEPROM_u8Read_Byte(EEPROM_GUEST_ADDRESS+pass_counter,&stored_pass[pass_counter]);
     964:	63 e0       	ldi	r22, 0x03	; 3
     966:	70 e0       	ldi	r23, 0x00	; 0
     968:	6c 0f       	add	r22, r28
     96a:	7d 1f       	adc	r23, r29
     96c:	6e 0d       	add	r22, r14
     96e:	7f 1d       	adc	r23, r15
     970:	c7 01       	movw	r24, r14
     972:	80 58       	subi	r24, 0x80	; 128
     974:	9f 4f       	sbci	r25, 0xFF	; 255
     976:	0e 94 24 07 	call	0xe48	; 0xe48 <H_EEPROM_u8Read_Byte>
     97a:	8f e1       	ldi	r24, 0x1F	; 31
     97c:	9e e4       	ldi	r25, 0x4E	; 78
     97e:	01 97       	sbiw	r24, 0x01	; 1
     980:	f1 f7       	brne	.-4      	; 0x97e <__stack+0x11f>
     982:	00 c0       	rjmp	.+0      	; 0x984 <__stack+0x125>
     984:	00 00       	nop
						_delay_ms(10);
						pass_counter++;//increase the password counter that count the characters of the pass
     986:	0f 5f       	subi	r16, 0xFF	; 255
					H_LCD_voidSendString("Guest mode");
					H_LCD_voidSetPosition(2,1);
					H_LCD_voidSendString("Enter pass:");
					_delay_ms(200);//Halt the system for the given time in (ms)
					pass_counter=0;//counts the number of entered characters
					while(pass_counter<PASS_SIZE)
     988:	04 30       	cpi	r16, 0x04	; 4
     98a:	08 f4       	brcc	.+2      	; 0x98e <__stack+0x12f>
     98c:	b5 cf       	rjmp	.-150    	; 0x8f8 <__stack+0x99>
						key_pressed = NO_PRESSED_KEY;//return the variable that holds the pressed key from keypad to its initial value
					}
					

					/*compare passwords*/
					if (ui8ComparePass(pass,stored_pass,PASS_SIZE)==TRUE)//in case of right password
     98e:	44 e0       	ldi	r20, 0x04	; 4
     990:	be 01       	movw	r22, r28
     992:	6d 5f       	subi	r22, 0xFD	; 253
     994:	7f 4f       	sbci	r23, 0xFF	; 255
     996:	ce 01       	movw	r24, r28
     998:	07 96       	adiw	r24, 0x07	; 7
     99a:	0e 94 57 00 	call	0xae	; 0xae <ui8ComparePass>
     99e:	81 30       	cpi	r24, 0x01	; 1
     9a0:	09 f5       	brne	.+66     	; 0x9e4 <__stack+0x185>
					{
						login_mode = GUEST;
						pass_tries_count=0;//clear the counter of wrong tries
						H_LCD_voidClearDisplay();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     9a2:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <H_LCD_voidClearDisplay>
						H_LCD_voidSendString("Right pass");
     9a6:	87 ec       	ldi	r24, 0xC7	; 199
     9a8:	91 e0       	ldi	r25, 0x01	; 1
     9aa:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <H_LCD_voidSendString>
						H_LCD_voidSetPosition(2,1);
     9ae:	61 e0       	ldi	r22, 0x01	; 1
     9b0:	82 e0       	ldi	r24, 0x02	; 2
     9b2:	0e 94 ee 08 	call	0x11dc	; 0x11dc <H_LCD_voidSetPosition>
						H_LCD_voidSendString("Guest mode");
     9b6:	89 ee       	ldi	r24, 0xE9	; 233
     9b8:	91 e0       	ldi	r25, 0x01	; 1
     9ba:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <H_LCD_voidSendString>
     9be:	9f ef       	ldi	r25, 0xFF	; 255
     9c0:	24 e3       	ldi	r18, 0x34	; 52
     9c2:	3c e0       	ldi	r19, 0x0C	; 12
     9c4:	91 50       	subi	r25, 0x01	; 1
     9c6:	20 40       	sbci	r18, 0x00	; 0
     9c8:	30 40       	sbci	r19, 0x00	; 0
     9ca:	e1 f7       	brne	.-8      	; 0x9c4 <__stack+0x165>
     9cc:	00 c0       	rjmp	.+0      	; 0x9ce <__stack+0x16f>
     9ce:	00 00       	nop
						_delay_ms(500);//Halt the system for the given time in (ms)
						H_LED_voidTurnOn(GUEST_LED_PIN);//turn the led of gust mode that is connected to the sender micro controller on
     9d0:	80 e0       	ldi	r24, 0x00	; 0
     9d2:	0e 94 0a 09 	call	0x1214	; 0x1214 <H_LED_voidTurnOn>
						M_Timer0_start();//start the counter of the session
     9d6:	0e 94 0b 0c 	call	0x1816	; 0x1816 <M_Timer0_start>
						H_LCD_voidClearDisplay();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     9da:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <H_LCD_voidClearDisplay>

					/*compare passwords*/
					if (ui8ComparePass(pass,stored_pass,PASS_SIZE)==TRUE)//in case of right password
					{
						login_mode = GUEST;
						pass_tries_count=0;//clear the counter of wrong tries
     9de:	c1 2c       	mov	r12, r1
					

					/*compare passwords*/
					if (ui8ComparePass(pass,stored_pass,PASS_SIZE)==TRUE)//in case of right password
					{
						login_mode = GUEST;
     9e0:	82 e0       	ldi	r24, 0x02	; 2
     9e2:	31 c0       	rjmp	.+98     	; 0xa46 <__stack+0x1e7>
						M_Timer0_start();//start the counter of the session
						H_LCD_voidClearDisplay();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
					}
					else//in case of wrong password
					{
						pass_tries_count++;//increase the number of wrong tries to block login if it exceeds the allowed tries
     9e4:	c3 94       	inc	r12
						login_mode = NO_MODE;//set the mode as not logged in
						H_LCD_voidClearDisplay();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     9e6:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <H_LCD_voidClearDisplay>
						H_LCD_voidSendString("Wrong pass");
     9ea:	80 e0       	ldi	r24, 0x00	; 0
     9ec:	92 e0       	ldi	r25, 0x02	; 2
     9ee:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <H_LCD_voidSendString>
						H_LCD_voidSetPosition(2,1);
     9f2:	61 e0       	ldi	r22, 0x01	; 1
     9f4:	82 e0       	ldi	r24, 0x02	; 2
     9f6:	0e 94 ee 08 	call	0x11dc	; 0x11dc <H_LCD_voidSetPosition>
						H_LCD_voidSendString("Tries left:");
     9fa:	8d ed       	ldi	r24, 0xDD	; 221
     9fc:	91 e0       	ldi	r25, 0x01	; 1
     9fe:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <H_LCD_voidSendString>
						H_LCD_voidSendChar(TRIES_ALLOWED-pass_tries_count+ASCII_ZERO);//print the number of tries left before block mode to be activated
     a02:	83 e3       	ldi	r24, 0x33	; 51
     a04:	8c 19       	sub	r24, r12
     a06:	0e 94 d6 08 	call	0x11ac	; 0x11ac <H_LCD_voidSendChar>
     a0a:	8f ef       	ldi	r24, 0xFF	; 255
     a0c:	99 e6       	ldi	r25, 0x69	; 105
     a0e:	28 e1       	ldi	r18, 0x18	; 24
     a10:	81 50       	subi	r24, 0x01	; 1
     a12:	90 40       	sbci	r25, 0x00	; 0
     a14:	20 40       	sbci	r18, 0x00	; 0
     a16:	e1 f7       	brne	.-8      	; 0xa10 <__stack+0x1b1>
     a18:	00 c0       	rjmp	.+0      	; 0xa1a <__stack+0x1bb>
     a1a:	00 00       	nop
						_delay_ms(1000);//Halt the system for the given time in (ms)
						H_LCD_voidClearDisplay();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     a1c:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <H_LCD_voidClearDisplay>
						if (pass_tries_count>=TRIES_ALLOWED)//if the condition of the block mode is true
     a20:	32 e0       	ldi	r19, 0x02	; 2
     a22:	3c 15       	cp	r19, r12
     a24:	78 f4       	brcc	.+30     	; 0xa44 <__stack+0x1e5>
						{
							H_EEPROM_u8Write_Byte(LOGIN_BLOCKED_ADDRESS,TRUE);//write to the EEPROM TRUE to the the block mode address
     a26:	61 e0       	ldi	r22, 0x01	; 1
     a28:	80 e9       	ldi	r24, 0x90	; 144
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	0e 94 f3 06 	call	0xde6	; 0xde6 <H_EEPROM_u8Write_Byte>
     a30:	8f e1       	ldi	r24, 0x1F	; 31
     a32:	9e e4       	ldi	r25, 0x4E	; 78
     a34:	01 97       	sbiw	r24, 0x01	; 1
     a36:	f1 f7       	brne	.-4      	; 0xa34 <__stack+0x1d5>
     a38:	00 c0       	rjmp	.+0      	; 0xa3a <__stack+0x1db>
     a3a:	00 00       	nop
							_delay_ms(10);
							block_mode_flag = TRUE;//turn on block mode
     a3c:	81 e0       	ldi	r24, 0x01	; 1
     a3e:	89 83       	std	Y+1, r24	; 0x01
							break;//breaks the loop of insert guest password #while(login_mode != GUEST)# line 228
     a40:	0f ef       	ldi	r16, 0xFF	; 255
     a42:	08 c0       	rjmp	.+16     	; 0xa54 <__stack+0x1f5>
						H_LCD_voidClearDisplay();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
					}
					else//in case of wrong password
					{
						pass_tries_count++;//increase the number of wrong tries to block login if it exceeds the allowed tries
						login_mode = NO_MODE;//set the mode as not logged in
     a44:	8d 2d       	mov	r24, r13
     a46:	0f ef       	ldi	r16, 0xFF	; 255
     a48:	01 c0       	rjmp	.+2      	; 0xa4c <__stack+0x1ed>

			u8 pass_counter=0;//counts the entered key of the password from the keypad
			u8 pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};//temporarily hold the entire password that will be entered by the user to be check
			u8 stored_pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};//temporarily hold the entire stored password that is written by the user for the first time
			
			switch(key_pressed)
     a4a:	8d 2d       	mov	r24, r13
					}
				}
				break;//bREAK SWITCH case
				/********************************* Guest login **********************************************/
				case  CHECK_GUEST_MODE:
				while(login_mode != GUEST)
     a4c:	82 30       	cpi	r24, 0x02	; 2
     a4e:	09 f0       	breq	.+2      	; 0xa52 <__stack+0x1f3>
     a50:	36 cf       	rjmp	.-404    	; 0x8be <__stack+0x5f>
     a52:	d8 2e       	mov	r13, r24
			H_BUZZER_voidTurnOn();
			_delay_ms(1000);//Halt the system for the given time in (ms)
			H_BUZZER_voidTurnOff();
			
		}
		while (login_mode==NO_MODE)//The user can only leave the loop only in case of he was logged in as guest or admin
     a54:	dd 20       	and	r13, r13
     a56:	09 f4       	brne	.+2      	; 0xa5a <__stack+0x1fb>
     a58:	cd cd       	rjmp	.-1126   	; 0x5f4 <__EEPROM_REGION_LENGTH__+0x1f4>
     a5a:	01 e0       	ldi	r16, 0x01	; 1
     a5c:	ac c1       	rjmp	.+856    	; 0xdb6 <__stack+0x557>
		
		
		while(timeout_flag!=TRUE)//Show the menu in case of the time is not out
		{
			key_pressed = NO_PRESSED_KEY;//Set the key pressed by the user to its default value
			switch (show_menu)
     a5e:	80 2f       	mov	r24, r16
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	fc 01       	movw	r30, r24
     a64:	31 97       	sbiw	r30, 0x01	; 1
     a66:	ea 30       	cpi	r30, 0x0A	; 10
     a68:	f1 05       	cpc	r31, r1
     a6a:	08 f0       	brcs	.+2      	; 0xa6e <__stack+0x20f>
     a6c:	a4 c1       	rjmp	.+840    	; 0xdb6 <__stack+0x557>
     a6e:	e6 5d       	subi	r30, 0xD6	; 214
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	0c 94 46 0e 	jmp	0x1c8c	; 0x1c8c <__tablejump2__>
			{
				case MAIN_MENU:
				do
				{
					/******************** print main Menu ******************/
					H_LCD_voidClearDisplay();
     a76:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <H_LCD_voidClearDisplay>
					H_LCD_voidSendString("1:Room1 2:Room2");
     a7a:	8b e0       	ldi	r24, 0x0B	; 11
     a7c:	92 e0       	ldi	r25, 0x02	; 2
     a7e:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <H_LCD_voidSendString>
					H_LCD_voidSetPosition(2,1);
     a82:	61 e0       	ldi	r22, 0x01	; 1
     a84:	82 e0       	ldi	r24, 0x02	; 2
     a86:	0e 94 ee 08 	call	0x11dc	; 0x11dc <H_LCD_voidSetPosition>
					if(login_mode==ADMIN)//check login mode
     a8a:	91 e0       	ldi	r25, 0x01	; 1
     a8c:	d9 12       	cpse	r13, r25
     a8e:	05 c0       	rjmp	.+10     	; 0xa9a <__stack+0x23b>
					{
						H_LCD_voidSendString("3:Room3 4:More ");//this menu options only printed if the logged in user is an admin
     a90:	8b e1       	ldi	r24, 0x1B	; 27
     a92:	92 e0       	ldi	r25, 0x02	; 2
     a94:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <H_LCD_voidSendString>
     a98:	07 c0       	rjmp	.+14     	; 0xaa8 <__stack+0x249>
					}
					else if(login_mode==GUEST)//check login mode
     a9a:	22 e0       	ldi	r18, 0x02	; 2
     a9c:	d2 12       	cpse	r13, r18
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__stack+0x249>
					{
						H_LCD_voidSendString("3:Room3 4:Room4");//this menu options only printed if the logged in user is a guest
     aa0:	8b e2       	ldi	r24, 0x2B	; 43
     aa2:	92 e0       	ldi	r25, 0x02	; 2
     aa4:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <H_LCD_voidSendString>
					}
					/*******************************************************/
					
					key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed or the time is out
     aa8:	8d 2d       	mov	r24, r13
     aaa:	0e 94 6d 00 	call	0xda	; 0xda <u8GetKeyPressed>
     aae:	18 2f       	mov	r17, r24
     ab0:	3f ef       	ldi	r19, 0xFF	; 255
     ab2:	80 e7       	ldi	r24, 0x70	; 112
     ab4:	92 e0       	ldi	r25, 0x02	; 2
     ab6:	31 50       	subi	r19, 0x01	; 1
     ab8:	80 40       	sbci	r24, 0x00	; 0
     aba:	90 40       	sbci	r25, 0x00	; 0
     abc:	e1 f7       	brne	.-8      	; 0xab6 <__stack+0x257>
     abe:	00 c0       	rjmp	.+0      	; 0xac0 <__stack+0x261>
     ac0:	00 00       	nop
					_delay_ms(100);//to avoid the duplication of the pressed key
					
					if (key_pressed == SELECT_ROOM1)//If key pressed is 1
     ac2:	11 33       	cpi	r17, 0x31	; 49
     ac4:	01 f1       	breq	.+64     	; 0xb06 <__stack+0x2a7>
					{
						show_menu = ROOM1_MENU;//Set the next menu to be shown to room1 menu
					}
					else if (key_pressed == SELECT_ROOM2)//If key pressed is 2
     ac6:	12 33       	cpi	r17, 0x32	; 50
     ac8:	01 f1       	breq	.+64     	; 0xb0a <__stack+0x2ab>
					{
						show_menu = ROOM2_MENU;//Set the next menu to be shown to room2 menu
					}
					else if (key_pressed == SELECT_ROOM3)//If key pressed is 3
     aca:	13 33       	cpi	r17, 0x33	; 51
     acc:	01 f1       	breq	.+64     	; 0xb0e <__stack+0x2af>
					{
						show_menu = ROOM3_MENU;//Set the next menu to be shown to room3 menu
					}
					else if (key_pressed == SELECT_ROOM4 && login_mode == GUEST)//If key pressed is 4 and the logged in user is guest
     ace:	14 33       	cpi	r17, 0x34	; 52
     ad0:	19 f4       	brne	.+6      	; 0xad8 <__stack+0x279>
     ad2:	22 e0       	ldi	r18, 0x02	; 2
     ad4:	d2 16       	cp	r13, r18
     ad6:	e9 f0       	breq	.+58     	; 0xb12 <__stack+0x2b3>
					{
						show_menu = ROOM4_MENU;//Set the next menu to be shown to room4 menu
					}
					else if (key_pressed == ADMIN_MORE_OPTION && login_mode == ADMIN)//If key pressed is 4 and the logged in user is admin
     ad8:	14 33       	cpi	r17, 0x34	; 52
     ada:	19 f4       	brne	.+6      	; 0xae2 <__stack+0x283>
     adc:	31 e0       	ldi	r19, 0x01	; 1
     ade:	d3 16       	cp	r13, r19
     ae0:	d1 f0       	breq	.+52     	; 0xb16 <__stack+0x2b7>
					{
						show_menu = MORE_MENU;//Set the next menu to be shown to more menu
					}
					else if(key_pressed != NO_PRESSED_KEY)//show wrong input message if the user pressed wrong key
     ae2:	1f 3f       	cpi	r17, 0xFF	; 255
     ae4:	c9 f0       	breq	.+50     	; 0xb18 <__stack+0x2b9>
					{
						H_LCD_voidClearDisplay();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     ae6:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <H_LCD_voidClearDisplay>
						H_LCD_voidSendString("Wrong input");//print error message
     aea:	89 ec       	ldi	r24, 0xC9	; 201
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <H_LCD_voidSendString>
     af2:	8f ef       	ldi	r24, 0xFF	; 255
     af4:	94 e3       	ldi	r25, 0x34	; 52
     af6:	2c e0       	ldi	r18, 0x0C	; 12
     af8:	81 50       	subi	r24, 0x01	; 1
     afa:	90 40       	sbci	r25, 0x00	; 0
     afc:	20 40       	sbci	r18, 0x00	; 0
     afe:	e1 f7       	brne	.-8      	; 0xaf8 <__stack+0x299>
     b00:	00 c0       	rjmp	.+0      	; 0xb02 <__stack+0x2a3>
     b02:	00 00       	nop
     b04:	09 c0       	rjmp	.+18     	; 0xb18 <__stack+0x2b9>
					key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed or the time is out
					_delay_ms(100);//to avoid the duplication of the pressed key
					
					if (key_pressed == SELECT_ROOM1)//If key pressed is 1
					{
						show_menu = ROOM1_MENU;//Set the next menu to be shown to room1 menu
     b06:	03 e0       	ldi	r16, 0x03	; 3
     b08:	07 c0       	rjmp	.+14     	; 0xb18 <__stack+0x2b9>
					}
					else if (key_pressed == SELECT_ROOM2)//If key pressed is 2
					{
						show_menu = ROOM2_MENU;//Set the next menu to be shown to room2 menu
     b0a:	04 e0       	ldi	r16, 0x04	; 4
     b0c:	05 c0       	rjmp	.+10     	; 0xb18 <__stack+0x2b9>
					}
					else if (key_pressed == SELECT_ROOM3)//If key pressed is 3
					{
						show_menu = ROOM3_MENU;//Set the next menu to be shown to room3 menu
     b0e:	05 e0       	ldi	r16, 0x05	; 5
     b10:	03 c0       	rjmp	.+6      	; 0xb18 <__stack+0x2b9>
					}
					else if (key_pressed == SELECT_ROOM4 && login_mode == GUEST)//If key pressed is 4 and the logged in user is guest
					{
						show_menu = ROOM4_MENU;//Set the next menu to be shown to room4 menu
     b12:	06 e0       	ldi	r16, 0x06	; 6
     b14:	01 c0       	rjmp	.+2      	; 0xb18 <__stack+0x2b9>
					}
					else if (key_pressed == ADMIN_MORE_OPTION && login_mode == ADMIN)//If key pressed is 4 and the logged in user is admin
					{
						show_menu = MORE_MENU;//Set the next menu to be shown to more menu
     b16:	02 e0       	ldi	r16, 0x02	; 2
					{
						H_LCD_voidClearDisplay();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
						H_LCD_voidSendString("Wrong input");//print error message
						_delay_ms(500);//Halt the system for the given time in (ms)
					}
				} while ( ((key_pressed < '1') || (key_pressed > '4') ) && (timeout_flag == FALSE) );//break the loop in case of valid key or time is out
     b18:	11 53       	subi	r17, 0x31	; 49
     b1a:	14 30       	cpi	r17, 0x04	; 4
     b1c:	08 f4       	brcc	.+2      	; 0xb20 <__stack+0x2c1>
     b1e:	4b c1       	rjmp	.+662    	; 0xdb6 <__stack+0x557>
     b20:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <__data_end>
     b24:	88 23       	and	r24, r24
     b26:	09 f4       	brne	.+2      	; 0xb2a <__stack+0x2cb>
     b28:	a6 cf       	rjmp	.-180    	; 0xa76 <__stack+0x217>
     b2a:	45 c1       	rjmp	.+650    	; 0xdb6 <__stack+0x557>
				
				case MORE_MENU:
				do
				{
					/******************** print more Menu ******************/
					H_LCD_voidClearDisplay();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     b2c:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <H_LCD_voidClearDisplay>
					H_LCD_voidSendString("1:Room4    2:TV   ");
     b30:	8b e3       	ldi	r24, 0x3B	; 59
     b32:	92 e0       	ldi	r25, 0x02	; 2
     b34:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <H_LCD_voidSendString>
					H_LCD_voidSetPosition(2,1);
     b38:	61 e0       	ldi	r22, 0x01	; 1
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	0e 94 ee 08 	call	0x11dc	; 0x11dc <H_LCD_voidSetPosition>
					H_LCD_voidSendString("3:Air Cond.4:RET");
     b40:	8e e4       	ldi	r24, 0x4E	; 78
     b42:	92 e0       	ldi	r25, 0x02	; 2
     b44:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <H_LCD_voidSendString>
					/*******************************************************/
					key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed or the time is out
     b48:	8d 2d       	mov	r24, r13
     b4a:	0e 94 6d 00 	call	0xda	; 0xda <u8GetKeyPressed>
     b4e:	18 2f       	mov	r17, r24
     b50:	3f ef       	ldi	r19, 0xFF	; 255
     b52:	80 e7       	ldi	r24, 0x70	; 112
     b54:	92 e0       	ldi	r25, 0x02	; 2
     b56:	31 50       	subi	r19, 0x01	; 1
     b58:	80 40       	sbci	r24, 0x00	; 0
     b5a:	90 40       	sbci	r25, 0x00	; 0
     b5c:	e1 f7       	brne	.-8      	; 0xb56 <__stack+0x2f7>
     b5e:	00 c0       	rjmp	.+0      	; 0xb60 <__stack+0x301>
     b60:	00 00       	nop
					_delay_ms(100);//to avoid the duplication of the pressed key
					
					if (key_pressed == SELECT_ROOM4_ADMIN)//If key pressed is 1
     b62:	11 33       	cpi	r17, 0x31	; 49
     b64:	c1 f0       	breq	.+48     	; 0xb96 <__stack+0x337>
					{
						show_menu = ROOM4_MENU;//Set the next menu to be shown to room4 menu
					}
					else if (key_pressed == SELECT_TV)//If key pressed is 2
     b66:	12 33       	cpi	r17, 0x32	; 50
     b68:	c1 f0       	breq	.+48     	; 0xb9a <__stack+0x33b>
					{
						show_menu = TV_MENU;//Set the next menu to be shown to TV menu
					}
					else if (key_pressed == SELECT_AIR_CONDITIONING)//If key pressed is 3
     b6a:	13 33       	cpi	r17, 0x33	; 51
     b6c:	c1 f0       	breq	.+48     	; 0xb9e <__stack+0x33f>
					{
						show_menu = AIRCONDITIONING_MENU;//Set the next menu to be shown to Air conditioning menu
					}
					else if (key_pressed == ADMIN_RET_OPTION)//If key pressed is 4 (RET)
     b6e:	14 33       	cpi	r17, 0x34	; 52
     b70:	c1 f0       	breq	.+48     	; 0xba2 <__stack+0x343>
					{
						show_menu = MAIN_MENU;//Set the next menu to be shown to main menu
					}
					else if(key_pressed != NO_PRESSED_KEY)//show wrong input message if the user pressed wrong key
     b72:	1f 3f       	cpi	r17, 0xFF	; 255
     b74:	b9 f0       	breq	.+46     	; 0xba4 <__stack+0x345>
					{
						H_LCD_voidClearDisplay();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     b76:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <H_LCD_voidClearDisplay>
						H_LCD_voidSendString("Wrong input");//print error message
     b7a:	89 ec       	ldi	r24, 0xC9	; 201
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <H_LCD_voidSendString>
     b82:	2f ef       	ldi	r18, 0xFF	; 255
     b84:	34 e3       	ldi	r19, 0x34	; 52
     b86:	8c e0       	ldi	r24, 0x0C	; 12
     b88:	21 50       	subi	r18, 0x01	; 1
     b8a:	30 40       	sbci	r19, 0x00	; 0
     b8c:	80 40       	sbci	r24, 0x00	; 0
     b8e:	e1 f7       	brne	.-8      	; 0xb88 <__stack+0x329>
     b90:	00 c0       	rjmp	.+0      	; 0xb92 <__stack+0x333>
     b92:	00 00       	nop
     b94:	07 c0       	rjmp	.+14     	; 0xba4 <__stack+0x345>
					key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed or the time is out
					_delay_ms(100);//to avoid the duplication of the pressed key
					
					if (key_pressed == SELECT_ROOM4_ADMIN)//If key pressed is 1
					{
						show_menu = ROOM4_MENU;//Set the next menu to be shown to room4 menu
     b96:	06 e0       	ldi	r16, 0x06	; 6
     b98:	05 c0       	rjmp	.+10     	; 0xba4 <__stack+0x345>
					}
					else if (key_pressed == SELECT_TV)//If key pressed is 2
					{
						show_menu = TV_MENU;//Set the next menu to be shown to TV menu
     b9a:	07 e0       	ldi	r16, 0x07	; 7
     b9c:	03 c0       	rjmp	.+6      	; 0xba4 <__stack+0x345>
					}
					else if (key_pressed == SELECT_AIR_CONDITIONING)//If key pressed is 3
					{
						show_menu = AIRCONDITIONING_MENU;//Set the next menu to be shown to Air conditioning menu
     b9e:	08 e0       	ldi	r16, 0x08	; 8
     ba0:	01 c0       	rjmp	.+2      	; 0xba4 <__stack+0x345>
					}
					else if (key_pressed == ADMIN_RET_OPTION)//If key pressed is 4 (RET)
					{
						show_menu = MAIN_MENU;//Set the next menu to be shown to main menu
     ba2:	01 e0       	ldi	r16, 0x01	; 1
					{
						H_LCD_voidClearDisplay();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
						H_LCD_voidSendString("Wrong input");//print error message
						_delay_ms(500);//Halt the system for the given time in (ms)
					}
				} while (( (key_pressed < '1') || (key_pressed > '4') ) && (timeout_flag == FALSE));//break the loop in case of valid key or time is out
     ba4:	11 53       	subi	r17, 0x31	; 49
     ba6:	14 30       	cpi	r17, 0x04	; 4
     ba8:	08 f4       	brcc	.+2      	; 0xbac <__stack+0x34d>
     baa:	05 c1       	rjmp	.+522    	; 0xdb6 <__stack+0x557>
     bac:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <__data_end>
     bb0:	88 23       	and	r24, r24
     bb2:	09 f4       	brne	.+2      	; 0xbb6 <__stack+0x357>
     bb4:	bb cf       	rjmp	.-138    	; 0xb2c <__stack+0x2cd>
     bb6:	ff c0       	rjmp	.+510    	; 0xdb6 <__stack+0x557>
				
				case AIRCONDITIONING_MENU:
				do
				{
					/******************** print more Menu ******************/
					H_LCD_voidClearDisplay();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     bb8:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <H_LCD_voidClearDisplay>
					H_LCD_voidSendString("1:Set temperature ");
     bbc:	8f e5       	ldi	r24, 0x5F	; 95
     bbe:	92 e0       	ldi	r25, 0x02	; 2
     bc0:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <H_LCD_voidSendString>
					H_LCD_voidSetPosition(2,1);
     bc4:	61 e0       	ldi	r22, 0x01	; 1
     bc6:	82 e0       	ldi	r24, 0x02	; 2
     bc8:	0e 94 ee 08 	call	0x11dc	; 0x11dc <H_LCD_voidSetPosition>
					H_LCD_voidSendString("2:Control  0:RET");
     bcc:	82 e7       	ldi	r24, 0x72	; 114
     bce:	92 e0       	ldi	r25, 0x02	; 2
     bd0:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <H_LCD_voidSendString>
					/*******************************************************/
					key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed or the time is out
     bd4:	8d 2d       	mov	r24, r13
     bd6:	0e 94 6d 00 	call	0xda	; 0xda <u8GetKeyPressed>
     bda:	18 2f       	mov	r17, r24
     bdc:	9f ef       	ldi	r25, 0xFF	; 255
     bde:	20 e7       	ldi	r18, 0x70	; 112
     be0:	32 e0       	ldi	r19, 0x02	; 2
     be2:	91 50       	subi	r25, 0x01	; 1
     be4:	20 40       	sbci	r18, 0x00	; 0
     be6:	30 40       	sbci	r19, 0x00	; 0
     be8:	e1 f7       	brne	.-8      	; 0xbe2 <__stack+0x383>
     bea:	00 c0       	rjmp	.+0      	; 0xbec <__stack+0x38d>
     bec:	00 00       	nop
					_delay_ms(100);//to avoid the duplication of the pressed key
					
					if (key_pressed == SELECT_SET_TEMPERATURE)//If key pressed is 1
     bee:	81 33       	cpi	r24, 0x31	; 49
     bf0:	b1 f0       	breq	.+44     	; 0xc1e <__stack+0x3bf>
					{
						show_menu = TEMPERATURE_MENU;//Set the next menu to be shown to set temperature menu
					}
					else if (key_pressed == SELECT_AIR_COND_CTRL)//If key pressed is 2
     bf2:	82 33       	cpi	r24, 0x32	; 50
     bf4:	b1 f0       	breq	.+44     	; 0xc22 <__stack+0x3c3>
					{
						show_menu = AIRCOND_CTRL_MENU;//Set the next menu to be shown to air conditioning control menu
					}
					else if (key_pressed == SELECT_AIR_COND_RET)//If key pressed is 0
     bf6:	80 33       	cpi	r24, 0x30	; 48
     bf8:	b1 f0       	breq	.+44     	; 0xc26 <__stack+0x3c7>
					{
						show_menu = MORE_MENU;//Set the next menu to be shown to more menu
					}
					else if(key_pressed != NO_PRESSED_KEY)//show wrong input message if the user pressed wrong key
     bfa:	8f 3f       	cpi	r24, 0xFF	; 255
     bfc:	a9 f0       	breq	.+42     	; 0xc28 <__stack+0x3c9>
					{
						H_LCD_voidClearDisplay();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     bfe:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <H_LCD_voidClearDisplay>
						H_LCD_voidSendString("Wrong input");//print error message
     c02:	89 ec       	ldi	r24, 0xC9	; 201
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <H_LCD_voidSendString>
     c0a:	8f ef       	ldi	r24, 0xFF	; 255
     c0c:	94 e3       	ldi	r25, 0x34	; 52
     c0e:	2c e0       	ldi	r18, 0x0C	; 12
     c10:	81 50       	subi	r24, 0x01	; 1
     c12:	90 40       	sbci	r25, 0x00	; 0
     c14:	20 40       	sbci	r18, 0x00	; 0
     c16:	e1 f7       	brne	.-8      	; 0xc10 <__stack+0x3b1>
     c18:	00 c0       	rjmp	.+0      	; 0xc1a <__stack+0x3bb>
     c1a:	00 00       	nop
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <__stack+0x3c9>
					key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed or the time is out
					_delay_ms(100);//to avoid the duplication of the pressed key
					
					if (key_pressed == SELECT_SET_TEMPERATURE)//If key pressed is 1
					{
						show_menu = TEMPERATURE_MENU;//Set the next menu to be shown to set temperature menu
     c1e:	0a e0       	ldi	r16, 0x0A	; 10
     c20:	03 c0       	rjmp	.+6      	; 0xc28 <__stack+0x3c9>
					}
					else if (key_pressed == SELECT_AIR_COND_CTRL)//If key pressed is 2
					{
						show_menu = AIRCOND_CTRL_MENU;//Set the next menu to be shown to air conditioning control menu
     c22:	09 e0       	ldi	r16, 0x09	; 9
     c24:	01 c0       	rjmp	.+2      	; 0xc28 <__stack+0x3c9>
					}
					else if (key_pressed == SELECT_AIR_COND_RET)//If key pressed is 0
					{
						show_menu = MORE_MENU;//Set the next menu to be shown to more menu
     c26:	02 e0       	ldi	r16, 0x02	; 2
					{
						H_LCD_voidClearDisplay();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
						H_LCD_voidSendString("Wrong input");//print error message
						_delay_ms(500);//Halt the system for the given time in (ms)
					}
				} while (( (key_pressed < '0') || (key_pressed > '2') ) && (timeout_flag == FALSE));//break the loop in case of valid key or time is out
     c28:	10 53       	subi	r17, 0x30	; 48
     c2a:	13 30       	cpi	r17, 0x03	; 3
     c2c:	08 f4       	brcc	.+2      	; 0xc30 <__stack+0x3d1>
     c2e:	c3 c0       	rjmp	.+390    	; 0xdb6 <__stack+0x557>
     c30:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <__data_end>
     c34:	88 23       	and	r24, r24
     c36:	09 f4       	brne	.+2      	; 0xc3a <__stack+0x3db>
     c38:	bf cf       	rjmp	.-130    	; 0xbb8 <__stack+0x359>
     c3a:	bd c0       	rjmp	.+378    	; 0xdb6 <__stack+0x557>
				break;//End of air conditioning menu case
				
				case ROOM1_MENU:
				vMenuOption(ROOM1_MENU,login_mode);//call the function that show the menu of room 1
     c3c:	6d 2d       	mov	r22, r13
     c3e:	83 e0       	ldi	r24, 0x03	; 3
     c40:	0e 94 a2 00 	call	0x144	; 0x144 <vMenuOption>
				show_menu = MAIN_MENU;//Set the next menu to be shown to main menu
     c44:	01 e0       	ldi	r16, 0x01	; 1
				break;//End of room1 menu case
     c46:	b7 c0       	rjmp	.+366    	; 0xdb6 <__stack+0x557>
				
				case ROOM2_MENU:
				vMenuOption(ROOM2_MENU,login_mode);//call the function that show the menu of room 2
     c48:	6d 2d       	mov	r22, r13
     c4a:	84 e0       	ldi	r24, 0x04	; 4
     c4c:	0e 94 a2 00 	call	0x144	; 0x144 <vMenuOption>
				show_menu = MAIN_MENU;//Set the next menu to be shown to main menu
     c50:	01 e0       	ldi	r16, 0x01	; 1
				break;//End of room2 menu case
     c52:	b1 c0       	rjmp	.+354    	; 0xdb6 <__stack+0x557>
				
				case ROOM3_MENU:
				vMenuOption(ROOM3_MENU,login_mode);//call the function that show the menu of room 3
     c54:	6d 2d       	mov	r22, r13
     c56:	85 e0       	ldi	r24, 0x05	; 5
     c58:	0e 94 a2 00 	call	0x144	; 0x144 <vMenuOption>
				show_menu = MAIN_MENU;//Set the next menu to be shown to main menu
     c5c:	01 e0       	ldi	r16, 0x01	; 1
				break;//End of room3 menu case
     c5e:	ab c0       	rjmp	.+342    	; 0xdb6 <__stack+0x557>
				
				case ROOM4_MENU:
				vMenuOption(ROOM4_MENU,login_mode);//call the function that show the menu of room 4
     c60:	6d 2d       	mov	r22, r13
     c62:	86 e0       	ldi	r24, 0x06	; 6
     c64:	0e 94 a2 00 	call	0x144	; 0x144 <vMenuOption>
				if (login_mode == GUEST)//in case of guest is logged in
     c68:	32 e0       	ldi	r19, 0x02	; 2
     c6a:	d3 12       	cpse	r13, r19
     c6c:	9d c0       	rjmp	.+314    	; 0xda8 <__stack+0x549>
				{
					show_menu = MAIN_MENU;//Set the next menu to be shown to main menu
     c6e:	01 e0       	ldi	r16, 0x01	; 1
     c70:	a2 c0       	rjmp	.+324    	; 0xdb6 <__stack+0x557>
					show_menu = MORE_MENU;//Set the next menu to be shown to more menu
				}
				break;//End of room4 menu case
				
				case TV_MENU:
				vMenuOption(TV_MENU,login_mode);//call the function that show the menu of tv
     c72:	6d 2d       	mov	r22, r13
     c74:	87 e0       	ldi	r24, 0x07	; 7
     c76:	0e 94 a2 00 	call	0x144	; 0x144 <vMenuOption>
				show_menu = MORE_MENU;//Set the next menu to be shown to more menu
     c7a:	02 e0       	ldi	r16, 0x02	; 2
				break;//End of TV menu case
     c7c:	9c c0       	rjmp	.+312    	; 0xdb6 <__stack+0x557>
				
				case AIRCOND_CTRL_MENU:
				vMenuOption(AIRCOND_CTRL_MENU,login_mode);//call the function that show the menu of Air conditioning control
     c7e:	6d 2d       	mov	r22, r13
     c80:	89 e0       	ldi	r24, 0x09	; 9
     c82:	0e 94 a2 00 	call	0x144	; 0x144 <vMenuOption>
				show_menu = AIRCONDITIONING_MENU;//Set the next menu to be shown to air conditioning menu
     c86:	08 e0       	ldi	r16, 0x08	; 8
				break;//End of air conditioning control menu case
     c88:	96 c0       	rjmp	.+300    	; 0xdb6 <__stack+0x557>
				case TEMPERATURE_MENU:
				temperature = 0;//clear the value of temperature
				while (temperature==0 && timeout_flag == FALSE)//start the loop that asks for the temperature from the user in case of the time is not out
				{
					key_pressed = NO_PRESSED_KEY;//set the key pressed to the default value
					H_LCD_voidClearDisplay();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     c8a:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <H_LCD_voidClearDisplay>
					H_LCD_voidSendString("Set temp.:__ ");//print the format of inserting temperature
     c8e:	83 e8       	ldi	r24, 0x83	; 131
     c90:	92 e0       	ldi	r25, 0x02	; 2
     c92:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <H_LCD_voidSendString>
					H_LCD_voidSendChar(DEGREES_SYMBOL); // print the symbol of degree
     c96:	8f ed       	ldi	r24, 0xDF	; 223
     c98:	0e 94 d6 08 	call	0x11ac	; 0x11ac <H_LCD_voidSendChar>
					H_LCD_voidSendChar('C'); // print the C character
     c9c:	83 e4       	ldi	r24, 0x43	; 67
     c9e:	0e 94 d6 08 	call	0x11ac	; 0x11ac <H_LCD_voidSendChar>
					H_LCD_voidSetPosition(1,11);//move the cursor to the place to write the entered temperature
     ca2:	6b e0       	ldi	r22, 0x0B	; 11
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	0e 94 ee 08 	call	0x11dc	; 0x11dc <H_LCD_voidSetPosition>
     caa:	8f ef       	ldi	r24, 0xFF	; 255
     cac:	91 ee       	ldi	r25, 0xE1	; 225
     cae:	24 e0       	ldi	r18, 0x04	; 4
     cb0:	81 50       	subi	r24, 0x01	; 1
     cb2:	90 40       	sbci	r25, 0x00	; 0
     cb4:	20 40       	sbci	r18, 0x00	; 0
     cb6:	e1 f7       	brne	.-8      	; 0xcb0 <__stack+0x451>
     cb8:	00 c0       	rjmp	.+0      	; 0xcba <__stack+0x45b>
     cba:	00 00       	nop
					_delay_ms(200);//Halt the system for the given time in (ms)
					/*******************************************************************************/
					key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed or the time is out
     cbc:	8d 2d       	mov	r24, r13
     cbe:	0e 94 6d 00 	call	0xda	; 0xda <u8GetKeyPressed>
     cc2:	3f e7       	ldi	r19, 0x7F	; 127
     cc4:	9a e1       	ldi	r25, 0x1A	; 26
     cc6:	26 e0       	ldi	r18, 0x06	; 6
     cc8:	31 50       	subi	r19, 0x01	; 1
     cca:	90 40       	sbci	r25, 0x00	; 0
     ccc:	20 40       	sbci	r18, 0x00	; 0
     cce:	e1 f7       	brne	.-8      	; 0xcc8 <__stack+0x469>
     cd0:	00 c0       	rjmp	.+0      	; 0xcd2 <__stack+0x473>
     cd2:	00 00       	nop
					_delay_ms(250);//to avoid the duplication of the pressed key

					if (timeout_flag == TRUE) //in case of the time is out before the user press a key
     cd4:	90 91 a2 02 	lds	r25, 0x02A2	; 0x8002a2 <__data_end>
     cd8:	91 30       	cpi	r25, 0x01	; 1
     cda:	09 f4       	brne	.+2      	; 0xcde <__stack+0x47f>
     cdc:	67 c0       	rjmp	.+206    	; 0xdac <__stack+0x54d>
					{
						break;//break the loop that ask for temperature
					}
					if (key_pressed <'0' || key_pressed >'9')//show wrong input message if the user entered non numeric value
     cde:	10 ed       	ldi	r17, 0xD0	; 208
     ce0:	18 0f       	add	r17, r24
     ce2:	1a 30       	cpi	r17, 0x0A	; 10
     ce4:	80 f0       	brcs	.+32     	; 0xd06 <__stack+0x4a7>
					{
						H_LCD_voidClearDisplay();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     ce6:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <H_LCD_voidClearDisplay>
						H_LCD_voidSendString("Wrong input");//print error message
     cea:	89 ec       	ldi	r24, 0xC9	; 201
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <H_LCD_voidSendString>
     cf2:	3f ef       	ldi	r19, 0xFF	; 255
     cf4:	84 e3       	ldi	r24, 0x34	; 52
     cf6:	9c e0       	ldi	r25, 0x0C	; 12
     cf8:	31 50       	subi	r19, 0x01	; 1
     cfa:	80 40       	sbci	r24, 0x00	; 0
     cfc:	90 40       	sbci	r25, 0x00	; 0
     cfe:	e1 f7       	brne	.-8      	; 0xcf8 <__stack+0x499>
     d00:	00 c0       	rjmp	.+0      	; 0xd02 <__stack+0x4a3>
     d02:	00 00       	nop
						_delay_ms(500);//Halt the system for the given time in (ms)
						continue;//return to #while (temperature==0)# line 672
     d04:	48 c0       	rjmp	.+144    	; 0xd96 <__stack+0x537>
					}
					else//if the value is valid
					{
						H_LCD_voidSendChar(key_pressed);//print the value on the lcd
     d06:	0e 94 d6 08 	call	0x11ac	; 0x11ac <H_LCD_voidSendChar>
						temp_tens = key_pressed-ASCII_ZERO;//save the entered value
						key_pressed = NO_PRESSED_KEY;//set the key pressed to the default value
					}
					/*******************************************************************************/
					key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed or the time is out
     d0a:	8d 2d       	mov	r24, r13
     d0c:	0e 94 6d 00 	call	0xda	; 0xda <u8GetKeyPressed>
     d10:	2f e7       	ldi	r18, 0x7F	; 127
     d12:	3a e1       	ldi	r19, 0x1A	; 26
     d14:	96 e0       	ldi	r25, 0x06	; 6
     d16:	21 50       	subi	r18, 0x01	; 1
     d18:	30 40       	sbci	r19, 0x00	; 0
     d1a:	90 40       	sbci	r25, 0x00	; 0
     d1c:	e1 f7       	brne	.-8      	; 0xd16 <__stack+0x4b7>
     d1e:	00 c0       	rjmp	.+0      	; 0xd20 <__stack+0x4c1>
     d20:	00 00       	nop
					_delay_ms(250);//to avoid the duplication of the pressed key
					
					if (timeout_flag == TRUE)//if the user session is timeout
     d22:	90 91 a2 02 	lds	r25, 0x02A2	; 0x8002a2 <__data_end>
     d26:	91 30       	cpi	r25, 0x01	; 1
     d28:	09 f4       	brne	.+2      	; 0xd2c <__stack+0x4cd>
     d2a:	42 c0       	rjmp	.+132    	; 0xdb0 <__stack+0x551>
					{
						break;//break the loop that ask for temperature
					}
					if ((key_pressed <'0' || key_pressed >'9'))//show wrong input message if the user entered non numeric value
     d2c:	0f 2e       	mov	r0, r31
     d2e:	f0 ed       	ldi	r31, 0xD0	; 208
     d30:	ff 2e       	mov	r15, r31
     d32:	f0 2d       	mov	r31, r0
     d34:	f8 0e       	add	r15, r24
     d36:	29 e0       	ldi	r18, 0x09	; 9
     d38:	2f 15       	cp	r18, r15
     d3a:	80 f4       	brcc	.+32     	; 0xd5c <__stack+0x4fd>
					{
						H_LCD_voidClearDisplay();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     d3c:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <H_LCD_voidClearDisplay>
						H_LCD_voidSendString("Wrong input");//print error message
     d40:	89 ec       	ldi	r24, 0xC9	; 201
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <H_LCD_voidSendString>
     d48:	3f ef       	ldi	r19, 0xFF	; 255
     d4a:	84 e3       	ldi	r24, 0x34	; 52
     d4c:	9c e0       	ldi	r25, 0x0C	; 12
     d4e:	31 50       	subi	r19, 0x01	; 1
     d50:	80 40       	sbci	r24, 0x00	; 0
     d52:	90 40       	sbci	r25, 0x00	; 0
     d54:	e1 f7       	brne	.-8      	; 0xd4e <__stack+0x4ef>
     d56:	00 c0       	rjmp	.+0      	; 0xd58 <__stack+0x4f9>
     d58:	00 00       	nop
						_delay_ms(500);//Halt the system for the given time in (ms)
						continue;//repeat the loop that ask for the temperature
     d5a:	1d c0       	rjmp	.+58     	; 0xd96 <__stack+0x537>
					}
					else//if the value is valid
					{
						H_LCD_voidSendChar(key_pressed);//print the value on the lcd
     d5c:	0e 94 d6 08 	call	0x11ac	; 0x11ac <H_LCD_voidSendChar>
						temp_ones = key_pressed-ASCII_ZERO;//save the entered value
						key_pressed = NO_PRESSED_KEY;//set the key pressed to the default value
					}
					temperature = temp_tens*10 + temp_ones;//set the value of the temperature from the given separated values
     d60:	11 0f       	add	r17, r17
     d62:	01 2f       	mov	r16, r17
     d64:	00 0f       	add	r16, r16
     d66:	00 0f       	add	r16, r16
     d68:	10 0f       	add	r17, r16
     d6a:	01 2f       	mov	r16, r17
     d6c:	0f 0d       	add	r16, r15
					//M_UART_voidSend(SET_TEMPERATURE);//Send the code of set temperature
					//_delay_ms(200);//Halt the system to prevent write collision
					M_UART_voidSend(temperature);//send the entered temperature
     d6e:	80 2f       	mov	r24, r16
     d70:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <M_UART_voidSend>
					H_LCD_voidClearDisplay();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     d74:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <H_LCD_voidClearDisplay>
					H_LCD_voidSendString("Temperature Sent");//show the message
     d78:	81 e9       	ldi	r24, 0x91	; 145
     d7a:	92 e0       	ldi	r25, 0x02	; 2
     d7c:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <H_LCD_voidSendString>
     d80:	2f ef       	ldi	r18, 0xFF	; 255
     d82:	34 e3       	ldi	r19, 0x34	; 52
     d84:	8c e0       	ldi	r24, 0x0C	; 12
     d86:	21 50       	subi	r18, 0x01	; 1
     d88:	30 40       	sbci	r19, 0x00	; 0
     d8a:	80 40       	sbci	r24, 0x00	; 0
     d8c:	e1 f7       	brne	.-8      	; 0xd86 <__stack+0x527>
     d8e:	00 c0       	rjmp	.+0      	; 0xd90 <__stack+0x531>
     d90:	00 00       	nop
     d92:	01 c0       	rjmp	.+2      	; 0xd96 <__stack+0x537>
		
		
		while(timeout_flag!=TRUE)//Show the menu in case of the time is not out
		{
			key_pressed = NO_PRESSED_KEY;//Set the key pressed by the user to its default value
			switch (show_menu)
     d94:	00 e0       	ldi	r16, 0x00	; 0
				show_menu = AIRCONDITIONING_MENU;//Set the next menu to be shown to air conditioning menu
				break;//End of air conditioning control menu case
				
				case TEMPERATURE_MENU:
				temperature = 0;//clear the value of temperature
				while (temperature==0 && timeout_flag == FALSE)//start the loop that asks for the temperature from the user in case of the time is not out
     d96:	01 11       	cpse	r16, r1
     d98:	0d c0       	rjmp	.+26     	; 0xdb4 <__stack+0x555>
     d9a:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <__data_end>
     d9e:	88 23       	and	r24, r24
     da0:	09 f4       	brne	.+2      	; 0xda4 <__stack+0x545>
     da2:	73 cf       	rjmp	.-282    	; 0xc8a <__stack+0x42b>
					M_UART_voidSend(temperature);//send the entered temperature
					H_LCD_voidClearDisplay();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
					H_LCD_voidSendString("Temperature Sent");//show the message
					_delay_ms(500);//Halt the system for the given time in (ms)
				}
				show_menu = AIRCONDITIONING_MENU;//Set the next menu to be shown to air conditioning menu
     da4:	08 e0       	ldi	r16, 0x08	; 8
     da6:	07 c0       	rjmp	.+14     	; 0xdb6 <__stack+0x557>
				{
					show_menu = MAIN_MENU;//Set the next menu to be shown to main menu
				}
				else//in case of admin is logged in
				{
					show_menu = MORE_MENU;//Set the next menu to be shown to more menu
     da8:	02 e0       	ldi	r16, 0x02	; 2
     daa:	05 c0       	rjmp	.+10     	; 0xdb6 <__stack+0x557>
					M_UART_voidSend(temperature);//send the entered temperature
					H_LCD_voidClearDisplay();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
					H_LCD_voidSendString("Temperature Sent");//show the message
					_delay_ms(500);//Halt the system for the given time in (ms)
				}
				show_menu = AIRCONDITIONING_MENU;//Set the next menu to be shown to air conditioning menu
     dac:	08 e0       	ldi	r16, 0x08	; 8
     dae:	03 c0       	rjmp	.+6      	; 0xdb6 <__stack+0x557>
     db0:	08 e0       	ldi	r16, 0x08	; 8
     db2:	01 c0       	rjmp	.+2      	; 0xdb6 <__stack+0x557>
     db4:	08 e0       	ldi	r16, 0x08	; 8
		
		/*************************************************************************************************/
		u8 show_menu = MAIN_MENU;
		
		
		while(timeout_flag!=TRUE)//Show the menu in case of the time is not out
     db6:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <__data_end>
     dba:	81 30       	cpi	r24, 0x01	; 1
     dbc:	09 f0       	breq	.+2      	; 0xdc0 <__stack+0x561>
     dbe:	4f ce       	rjmp	.-866    	; 0xa5e <__stack+0x1ff>
     dc0:	f0 cb       	rjmp	.-2080   	; 0x5a2 <__EEPROM_REGION_LENGTH__+0x1a2>

00000dc2 <H_BUZZER_voidInit>:
#include "BUZZER_configuration.h"
#include "BUZZER_interface.h"

void H_BUZZER_voidInit(void)
{
	M_DIO_voidSetPinDirection(BUZZER_PIN, OUTPUT);
     dc2:	61 e0       	ldi	r22, 0x01	; 1
     dc4:	87 e0       	ldi	r24, 0x07	; 7
     dc6:	0e 94 b0 09 	call	0x1360	; 0x1360 <M_DIO_voidSetPinDirection>
     dca:	08 95       	ret

00000dcc <H_BUZZER_voidTurnOn>:
}
void H_BUZZER_voidTurnOn(void)
{
	M_DIO_voidSetPinValue(BUZZER_PIN, HIGH);
     dcc:	61 e0       	ldi	r22, 0x01	; 1
     dce:	87 e0       	ldi	r24, 0x07	; 7
     dd0:	0e 94 37 0a 	call	0x146e	; 0x146e <M_DIO_voidSetPinValue>
     dd4:	08 95       	ret

00000dd6 <H_BUZZER_voidTurnOff>:
}
void H_BUZZER_voidTurnOff(void)
{
	M_DIO_voidSetPinValue(BUZZER_PIN, LOW);
     dd6:	60 e0       	ldi	r22, 0x00	; 0
     dd8:	87 e0       	ldi	r24, 0x07	; 7
     dda:	0e 94 37 0a 	call	0x146e	; 0x146e <M_DIO_voidSetPinValue>
     dde:	08 95       	ret

00000de0 <H_EEPROM_voidInit>:
#include "EEPROM_cofiguration.h"
#include "EEPROM_interface.h"
#include "../../MCAL/TWI/TWI_Interface.h"

void H_EEPROM_voidInit(void) {
	M_TWI_voidInit();
     de0:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <M_TWI_voidInit>
     de4:	08 95       	ret

00000de6 <H_EEPROM_u8Write_Byte>:
}
u8 H_EEPROM_u8Write_Byte(u16 copy_u16Address, u8 data) {
     de6:	1f 93       	push	r17
     de8:	cf 93       	push	r28
     dea:	df 93       	push	r29
     dec:	ec 01       	movw	r28, r24
     dee:	16 2f       	mov	r17, r22
	u8 _3BIT_MSB;
	//send start
	M_TWI_voidSendStart();
     df0:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <M_TWI_voidSendStart>
	//cheak status
	if (!(M_TWI_u8GetStatus() == TWI_MT_START_SUCCESS)) {
     df4:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <M_TWI_u8GetStatus>
     df8:	88 30       	cpi	r24, 0x08	; 8
     dfa:	e9 f4       	brne	.+58     	; 0xe36 <H_EEPROM_u8Write_Byte+0x50>
		return 0;
	}
	//send SLA+W
	_3BIT_MSB = (u8) ((copy_u16Address & 0x0700) >> 7);
     dfc:	ce 01       	movw	r24, r28
     dfe:	88 27       	eor	r24, r24
     e00:	97 70       	andi	r25, 0x07	; 7
     e02:	88 0f       	add	r24, r24
     e04:	89 2f       	mov	r24, r25
     e06:	88 1f       	adc	r24, r24
     e08:	99 0b       	sbc	r25, r25
     e0a:	91 95       	neg	r25
	M_TWI_voidSendByte(_3BIT_MSB | 0xA0);
     e0c:	80 6a       	ori	r24, 0xA0	; 160
     e0e:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <M_TWI_voidSendByte>
	//cheak status

	if (!(M_TWI_u8GetStatus() == TWI_MT_SLA_WRITE_WITH_ACK)) {
     e12:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <M_TWI_u8GetStatus>
     e16:	88 31       	cpi	r24, 0x18	; 24
     e18:	81 f4       	brne	.+32     	; 0xe3a <H_EEPROM_u8Write_Byte+0x54>
		return 0;
	}
	//send rest address
	M_TWI_voidSendByte((u8)(copy_u16Address));
     e1a:	8c 2f       	mov	r24, r28
     e1c:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <M_TWI_voidSendByte>
	//cheak status
	if (!(M_TWI_u8GetStatus() == TWI_MT_DATA_TRANSMITTED_WITH_ACK)) {
     e20:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <M_TWI_u8GetStatus>
     e24:	88 32       	cpi	r24, 0x28	; 40
     e26:	59 f4       	brne	.+22     	; 0xe3e <H_EEPROM_u8Write_Byte+0x58>
		return 0;
	}
	M_TWI_voidSendByte(data);
     e28:	81 2f       	mov	r24, r17
     e2a:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <M_TWI_voidSendByte>
	//stop
	M_TWI_voidSendStop();
     e2e:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <M_TWI_voidSendStop>
	return 1;
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	05 c0       	rjmp	.+10     	; 0xe40 <H_EEPROM_u8Write_Byte+0x5a>
	u8 _3BIT_MSB;
	//send start
	M_TWI_voidSendStart();
	//cheak status
	if (!(M_TWI_u8GetStatus() == TWI_MT_START_SUCCESS)) {
		return 0;
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	03 c0       	rjmp	.+6      	; 0xe40 <H_EEPROM_u8Write_Byte+0x5a>
	_3BIT_MSB = (u8) ((copy_u16Address & 0x0700) >> 7);
	M_TWI_voidSendByte(_3BIT_MSB | 0xA0);
	//cheak status

	if (!(M_TWI_u8GetStatus() == TWI_MT_SLA_WRITE_WITH_ACK)) {
		return 0;
     e3a:	80 e0       	ldi	r24, 0x00	; 0
     e3c:	01 c0       	rjmp	.+2      	; 0xe40 <H_EEPROM_u8Write_Byte+0x5a>
	}
	//send rest address
	M_TWI_voidSendByte((u8)(copy_u16Address));
	//cheak status
	if (!(M_TWI_u8GetStatus() == TWI_MT_DATA_TRANSMITTED_WITH_ACK)) {
		return 0;
     e3e:	80 e0       	ldi	r24, 0x00	; 0
	}
	M_TWI_voidSendByte(data);
	//stop
	M_TWI_voidSendStop();
	return 1;
}
     e40:	df 91       	pop	r29
     e42:	cf 91       	pop	r28
     e44:	1f 91       	pop	r17
     e46:	08 95       	ret

00000e48 <H_EEPROM_u8Read_Byte>:

u8 H_EEPROM_u8Read_Byte(u16 copy_u16Address, u8 *ptr_data) {
     e48:	0f 93       	push	r16
     e4a:	1f 93       	push	r17
     e4c:	cf 93       	push	r28
     e4e:	df 93       	push	r29
     e50:	ec 01       	movw	r28, r24
     e52:	8b 01       	movw	r16, r22
	u8 _3BIT_MSB;
	//send start
	M_TWI_voidSendStart();
     e54:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <M_TWI_voidSendStart>
	//cheak status
	if (!(M_TWI_u8GetStatus() == TWI_MT_START_SUCCESS)) {
     e58:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <M_TWI_u8GetStatus>
     e5c:	88 30       	cpi	r24, 0x08	; 8
     e5e:	71 f5       	brne	.+92     	; 0xebc <H_EEPROM_u8Read_Byte+0x74>
		return 0;
	}
	//send SLA+W
	_3BIT_MSB = (u8) ((copy_u16Address & 0x0700) >> 7);
     e60:	ce 01       	movw	r24, r28
     e62:	88 27       	eor	r24, r24
     e64:	97 70       	andi	r25, 0x07	; 7
     e66:	88 0f       	add	r24, r24
     e68:	89 2f       	mov	r24, r25
     e6a:	88 1f       	adc	r24, r24
     e6c:	99 0b       	sbc	r25, r25
     e6e:	91 95       	neg	r25
	M_TWI_voidSendByte(_3BIT_MSB | 0xA0);
     e70:	80 6a       	ori	r24, 0xA0	; 160
     e72:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <M_TWI_voidSendByte>
	//cheak status
	if (!(M_TWI_u8GetStatus() == TWI_MT_SLA_WRITE_WITH_ACK)) {
     e76:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <M_TWI_u8GetStatus>
     e7a:	88 31       	cpi	r24, 0x18	; 24
     e7c:	09 f5       	brne	.+66     	; 0xec0 <H_EEPROM_u8Read_Byte+0x78>
		return 0;
	}
	//send rest address
	M_TWI_voidSendByte((u8) (copy_u16Address));
     e7e:	8c 2f       	mov	r24, r28
     e80:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <M_TWI_voidSendByte>
	//cheak status
	if (!(M_TWI_u8GetStatus() == TWI_MT_DATA_TRANSMITTED_WITH_ACK)) {
     e84:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <M_TWI_u8GetStatus>
     e88:	88 32       	cpi	r24, 0x28	; 40
     e8a:	e1 f4       	brne	.+56     	; 0xec4 <H_EEPROM_u8Read_Byte+0x7c>
		return 0;
	}
	//send repeated start
	M_TWI_voidSendStart();
     e8c:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <M_TWI_voidSendStart>
	//cheak status
	if (!(M_TWI_u8GetStatus() == TWI_MR_REPEATED_START_SUCCESS)) {
     e90:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <M_TWI_u8GetStatus>
     e94:	80 31       	cpi	r24, 0x10	; 16
     e96:	c1 f4       	brne	.+48     	; 0xec8 <H_EEPROM_u8Read_Byte+0x80>
		return 0;
	}
	//send SLA+R
	M_TWI_voidSendByte( 0xA0 | 1 );
     e98:	81 ea       	ldi	r24, 0xA1	; 161
     e9a:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <M_TWI_voidSendByte>
	//cheak status
	if (!(M_TWI_u8GetStatus() == TWI_MR_SLA_READ_WITH_ACK)) {
     e9e:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <M_TWI_u8GetStatus>
     ea2:	80 34       	cpi	r24, 0x40	; 64
     ea4:	99 f4       	brne	.+38     	; 0xecc <H_EEPROM_u8Read_Byte+0x84>
		return 0;
	}
	//recieve
	M_TWI_voidRecieveByte_NoAck(ptr_data);
     ea6:	c8 01       	movw	r24, r16
     ea8:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <M_TWI_voidRecieveByte_NoAck>
	//cheak status
	if (!(M_TWI_u8GetStatus() == TWI_MR_recieved_data_WITH_NOACK)) {
     eac:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <M_TWI_u8GetStatus>
     eb0:	88 35       	cpi	r24, 0x58	; 88
     eb2:	71 f4       	brne	.+28     	; 0xed0 <H_EEPROM_u8Read_Byte+0x88>
		return 0;
	}
	//send stop
	M_TWI_voidSendStop();
     eb4:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <M_TWI_voidSendStop>
	return 1;
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	0b c0       	rjmp	.+22     	; 0xed2 <H_EEPROM_u8Read_Byte+0x8a>
	u8 _3BIT_MSB;
	//send start
	M_TWI_voidSendStart();
	//cheak status
	if (!(M_TWI_u8GetStatus() == TWI_MT_START_SUCCESS)) {
		return 0;
     ebc:	80 e0       	ldi	r24, 0x00	; 0
     ebe:	09 c0       	rjmp	.+18     	; 0xed2 <H_EEPROM_u8Read_Byte+0x8a>
	//send SLA+W
	_3BIT_MSB = (u8) ((copy_u16Address & 0x0700) >> 7);
	M_TWI_voidSendByte(_3BIT_MSB | 0xA0);
	//cheak status
	if (!(M_TWI_u8GetStatus() == TWI_MT_SLA_WRITE_WITH_ACK)) {
		return 0;
     ec0:	80 e0       	ldi	r24, 0x00	; 0
     ec2:	07 c0       	rjmp	.+14     	; 0xed2 <H_EEPROM_u8Read_Byte+0x8a>
	}
	//send rest address
	M_TWI_voidSendByte((u8) (copy_u16Address));
	//cheak status
	if (!(M_TWI_u8GetStatus() == TWI_MT_DATA_TRANSMITTED_WITH_ACK)) {
		return 0;
     ec4:	80 e0       	ldi	r24, 0x00	; 0
     ec6:	05 c0       	rjmp	.+10     	; 0xed2 <H_EEPROM_u8Read_Byte+0x8a>
	}
	//send repeated start
	M_TWI_voidSendStart();
	//cheak status
	if (!(M_TWI_u8GetStatus() == TWI_MR_REPEATED_START_SUCCESS)) {
		return 0;
     ec8:	80 e0       	ldi	r24, 0x00	; 0
     eca:	03 c0       	rjmp	.+6      	; 0xed2 <H_EEPROM_u8Read_Byte+0x8a>
	}
	//send SLA+R
	M_TWI_voidSendByte( 0xA0 | 1 );
	//cheak status
	if (!(M_TWI_u8GetStatus() == TWI_MR_SLA_READ_WITH_ACK)) {
		return 0;
     ecc:	80 e0       	ldi	r24, 0x00	; 0
     ece:	01 c0       	rjmp	.+2      	; 0xed2 <H_EEPROM_u8Read_Byte+0x8a>
	}
	//recieve
	M_TWI_voidRecieveByte_NoAck(ptr_data);
	//cheak status
	if (!(M_TWI_u8GetStatus() == TWI_MR_recieved_data_WITH_NOACK)) {
		return 0;
     ed0:	80 e0       	ldi	r24, 0x00	; 0
	}
	//send stop
	M_TWI_voidSendStop();
	return 1;
}
     ed2:	df 91       	pop	r29
     ed4:	cf 91       	pop	r28
     ed6:	1f 91       	pop	r17
     ed8:	0f 91       	pop	r16
     eda:	08 95       	ret

00000edc <H_KEYPAD_voidInit>:

u8 r,c;

void H_KEYPAD_voidInit(void)
{
	for (r = 0; r < 4; r++)
     edc:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <r>
     ee0:	27 c0       	rjmp	.+78     	; 0xf30 <H_KEYPAD_voidInit+0x54>
		{
		    //step 1  config rows as output
		M_DIO_voidSetPinDirection(arr_row[r], OUTPUT);
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	ea 59       	subi	r30, 0x9A	; 154
     ee6:	ff 4f       	sbci	r31, 0xFF	; 255
     ee8:	61 e0       	ldi	r22, 0x01	; 1
     eea:	80 81       	ld	r24, Z
     eec:	0e 94 b0 09 	call	0x1360	; 0x1360 <M_DIO_voidSetPinDirection>
			//step 2  config cols as input
		M_DIO_voidSetPinDirection(arr_col[r], INPUT);
     ef0:	e0 91 ca 02 	lds	r30, 0x02CA	; 0x8002ca <r>
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	ee 59       	subi	r30, 0x9E	; 158
     ef8:	ff 4f       	sbci	r31, 0xFF	; 255
     efa:	60 e0       	ldi	r22, 0x00	; 0
     efc:	80 81       	ld	r24, Z
     efe:	0e 94 b0 09 	call	0x1360	; 0x1360 <M_DIO_voidSetPinDirection>
			//step 3  config cols as high  //pullup resistor
		M_DIO_voidSetPinValue(arr_col[r], HIGH);  //comment this line if there are pullup resitors on the hardware
     f02:	e0 91 ca 02 	lds	r30, 0x02CA	; 0x8002ca <r>
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	ee 59       	subi	r30, 0x9E	; 158
     f0a:	ff 4f       	sbci	r31, 0xFF	; 255
     f0c:	61 e0       	ldi	r22, 0x01	; 1
     f0e:	80 81       	ld	r24, Z
     f10:	0e 94 37 0a 	call	0x146e	; 0x146e <M_DIO_voidSetPinValue>
			                                        //or in the simulation else use this internal pullup resistor
			//step 4  config initial value of rows as high
		M_DIO_voidSetPinValue(arr_row[r], HIGH);
     f14:	e0 91 ca 02 	lds	r30, 0x02CA	; 0x8002ca <r>
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	ea 59       	subi	r30, 0x9A	; 154
     f1c:	ff 4f       	sbci	r31, 0xFF	; 255
     f1e:	61 e0       	ldi	r22, 0x01	; 1
     f20:	80 81       	ld	r24, Z
     f22:	0e 94 37 0a 	call	0x146e	; 0x146e <M_DIO_voidSetPinValue>

u8 r,c;

void H_KEYPAD_voidInit(void)
{
	for (r = 0; r < 4; r++)
     f26:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <r>
     f2a:	8f 5f       	subi	r24, 0xFF	; 255
     f2c:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <r>
     f30:	e0 91 ca 02 	lds	r30, 0x02CA	; 0x8002ca <r>
     f34:	e4 30       	cpi	r30, 0x04	; 4
     f36:	a8 f2       	brcs	.-86     	; 0xee2 <H_KEYPAD_voidInit+0x6>
		M_DIO_voidSetPinValue(arr_col[r], HIGH);  //comment this line if there are pullup resitors on the hardware
			                                        //or in the simulation else use this internal pullup resistor
			//step 4  config initial value of rows as high
		M_DIO_voidSetPinValue(arr_row[r], HIGH);
		}
}
     f38:	08 95       	ret

00000f3a <H_KEYPAD_u8_getPressedKey>:

u8 H_KEYPAD_u8_getPressedKey(void) {
     f3a:	cf 93       	push	r28

	u8 key=NO_PRESSED_KEY;

	for (r = 0; r < 4; r++)
     f3c:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <r>
		}
}

u8 H_KEYPAD_u8_getPressedKey(void) {

	u8 key=NO_PRESSED_KEY;
     f40:	cf ef       	ldi	r28, 0xFF	; 255

	for (r = 0; r < 4; r++)
     f42:	41 c0       	rjmp	.+130    	; 0xfc6 <H_KEYPAD_u8_getPressedKey+0x8c>
	{
		M_DIO_voidSetPinValue(arr_row[r] , LOW); //first row R0 = 0;
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	ea 59       	subi	r30, 0x9A	; 154
     f48:	ff 4f       	sbci	r31, 0xFF	; 255
     f4a:	60 e0       	ldi	r22, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	0e 94 37 0a 	call	0x146e	; 0x146e <M_DIO_voidSetPinValue>
	    for(c=0;c<4;c++)
     f52:	10 92 cb 02 	sts	0x02CB, r1	; 0x8002cb <c>
     f56:	25 c0       	rjmp	.+74     	; 0xfa2 <H_KEYPAD_u8_getPressedKey+0x68>
	    {//cheak column
	    	if(M_DIO_u8GetPinValue(arr_col[c])==BUTTON_PRESSED)
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	ee 59       	subi	r30, 0x9E	; 158
     f5c:	ff 4f       	sbci	r31, 0xFF	; 255
     f5e:	80 81       	ld	r24, Z
     f60:	0e 94 be 0a 	call	0x157c	; 0x157c <M_DIO_u8GetPinValue>
     f64:	81 11       	cpse	r24, r1
     f66:	18 c0       	rjmp	.+48     	; 0xf98 <H_KEYPAD_u8_getPressedKey+0x5e>
	    	{
	    		while(M_DIO_u8GetPinValue(arr_col[c])==BUTTON_PRESSED);
     f68:	e0 91 cb 02 	lds	r30, 0x02CB	; 0x8002cb <c>
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	ee 59       	subi	r30, 0x9E	; 158
     f70:	ff 4f       	sbci	r31, 0xFF	; 255
     f72:	80 81       	ld	r24, Z
     f74:	0e 94 be 0a 	call	0x157c	; 0x157c <M_DIO_u8GetPinValue>
     f78:	88 23       	and	r24, r24
     f7a:	b1 f3       	breq	.-20     	; 0xf68 <H_KEYPAD_u8_getPressedKey+0x2e>
	    		key=LOCAL_ARR[r][c];
     f7c:	e0 91 ca 02 	lds	r30, 0x02CA	; 0x8002ca <r>
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <c>
     f86:	ee 0f       	add	r30, r30
     f88:	ff 1f       	adc	r31, r31
     f8a:	ee 0f       	add	r30, r30
     f8c:	ff 1f       	adc	r31, r31
     f8e:	e6 59       	subi	r30, 0x96	; 150
     f90:	ff 4f       	sbci	r31, 0xFF	; 255
     f92:	e8 0f       	add	r30, r24
     f94:	f1 1d       	adc	r31, r1
     f96:	c0 81       	ld	r28, Z
	u8 key=NO_PRESSED_KEY;

	for (r = 0; r < 4; r++)
	{
		M_DIO_voidSetPinValue(arr_row[r] , LOW); //first row R0 = 0;
	    for(c=0;c<4;c++)
     f98:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <c>
     f9c:	8f 5f       	subi	r24, 0xFF	; 255
     f9e:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <c>
     fa2:	e0 91 cb 02 	lds	r30, 0x02CB	; 0x8002cb <c>
     fa6:	e4 30       	cpi	r30, 0x04	; 4
     fa8:	b8 f2       	brcs	.-82     	; 0xf58 <H_KEYPAD_u8_getPressedKey+0x1e>
	    	{
	    		while(M_DIO_u8GetPinValue(arr_col[c])==BUTTON_PRESSED);
	    		key=LOCAL_ARR[r][c];
	    	}
	    }
	    M_DIO_voidSetPinValue(arr_row[r] , HIGH);//R0=1 AGAIN and try for another row
     faa:	e0 91 ca 02 	lds	r30, 0x02CA	; 0x8002ca <r>
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	ea 59       	subi	r30, 0x9A	; 154
     fb2:	ff 4f       	sbci	r31, 0xFF	; 255
     fb4:	61 e0       	ldi	r22, 0x01	; 1
     fb6:	80 81       	ld	r24, Z
     fb8:	0e 94 37 0a 	call	0x146e	; 0x146e <M_DIO_voidSetPinValue>

u8 H_KEYPAD_u8_getPressedKey(void) {

	u8 key=NO_PRESSED_KEY;

	for (r = 0; r < 4; r++)
     fbc:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <r>
     fc0:	8f 5f       	subi	r24, 0xFF	; 255
     fc2:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <r>
     fc6:	e0 91 ca 02 	lds	r30, 0x02CA	; 0x8002ca <r>
     fca:	e4 30       	cpi	r30, 0x04	; 4
     fcc:	08 f4       	brcc	.+2      	; 0xfd0 <H_KEYPAD_u8_getPressedKey+0x96>
     fce:	ba cf       	rjmp	.-140    	; 0xf44 <H_KEYPAD_u8_getPressedKey+0xa>
	    	}
	    }
	    M_DIO_voidSetPinValue(arr_row[r] , HIGH);//R0=1 AGAIN and try for another row
    }
	return key;
}
     fd0:	8c 2f       	mov	r24, r28
     fd2:	cf 91       	pop	r28
     fd4:	08 95       	ret

00000fd6 <H_LCD_voidSendCommand>:
	}
	for(j=i-1;j>=0;j--)
	{
		H_LCD_voidSendChar(lcoal_ArrStrig[j]);
	}
}
     fd6:	cf 93       	push	r28
     fd8:	c8 2f       	mov	r28, r24
     fda:	60 e0       	ldi	r22, 0x00	; 0
     fdc:	83 e0       	ldi	r24, 0x03	; 3
     fde:	0e 94 37 0a 	call	0x146e	; 0x146e <M_DIO_voidSetPinValue>
     fe2:	c4 fb       	bst	r28, 4
     fe4:	66 27       	eor	r22, r22
     fe6:	60 f9       	bld	r22, 0
     fe8:	88 e0       	ldi	r24, 0x08	; 8
     fea:	0e 94 37 0a 	call	0x146e	; 0x146e <M_DIO_voidSetPinValue>
     fee:	c5 fb       	bst	r28, 5
     ff0:	66 27       	eor	r22, r22
     ff2:	60 f9       	bld	r22, 0
     ff4:	89 e0       	ldi	r24, 0x09	; 9
     ff6:	0e 94 37 0a 	call	0x146e	; 0x146e <M_DIO_voidSetPinValue>
     ffa:	c6 fb       	bst	r28, 6
     ffc:	66 27       	eor	r22, r22
     ffe:	60 f9       	bld	r22, 0
    1000:	8a e0       	ldi	r24, 0x0A	; 10
    1002:	0e 94 37 0a 	call	0x146e	; 0x146e <M_DIO_voidSetPinValue>
    1006:	6c 2f       	mov	r22, r28
    1008:	66 1f       	adc	r22, r22
    100a:	66 27       	eor	r22, r22
    100c:	66 1f       	adc	r22, r22
    100e:	8c e0       	ldi	r24, 0x0C	; 12
    1010:	0e 94 37 0a 	call	0x146e	; 0x146e <M_DIO_voidSetPinValue>
    1014:	61 e0       	ldi	r22, 0x01	; 1
    1016:	82 e0       	ldi	r24, 0x02	; 2
    1018:	0e 94 37 0a 	call	0x146e	; 0x146e <M_DIO_voidSetPinValue>
    101c:	8f ec       	ldi	r24, 0xCF	; 207
    101e:	97 e0       	ldi	r25, 0x07	; 7
    1020:	01 97       	sbiw	r24, 0x01	; 1
    1022:	f1 f7       	brne	.-4      	; 0x1020 <H_LCD_voidSendCommand+0x4a>
    1024:	00 c0       	rjmp	.+0      	; 0x1026 <H_LCD_voidSendCommand+0x50>
    1026:	00 00       	nop
    1028:	60 e0       	ldi	r22, 0x00	; 0
    102a:	82 e0       	ldi	r24, 0x02	; 2
    102c:	0e 94 37 0a 	call	0x146e	; 0x146e <M_DIO_voidSetPinValue>
    1030:	6c 2f       	mov	r22, r28
    1032:	61 70       	andi	r22, 0x01	; 1
    1034:	88 e0       	ldi	r24, 0x08	; 8
    1036:	0e 94 37 0a 	call	0x146e	; 0x146e <M_DIO_voidSetPinValue>
    103a:	c1 fb       	bst	r28, 1
    103c:	66 27       	eor	r22, r22
    103e:	60 f9       	bld	r22, 0
    1040:	89 e0       	ldi	r24, 0x09	; 9
    1042:	0e 94 37 0a 	call	0x146e	; 0x146e <M_DIO_voidSetPinValue>
    1046:	c2 fb       	bst	r28, 2
    1048:	66 27       	eor	r22, r22
    104a:	60 f9       	bld	r22, 0
    104c:	8a e0       	ldi	r24, 0x0A	; 10
    104e:	0e 94 37 0a 	call	0x146e	; 0x146e <M_DIO_voidSetPinValue>
    1052:	c3 fb       	bst	r28, 3
    1054:	66 27       	eor	r22, r22
    1056:	60 f9       	bld	r22, 0
    1058:	8c e0       	ldi	r24, 0x0C	; 12
    105a:	0e 94 37 0a 	call	0x146e	; 0x146e <M_DIO_voidSetPinValue>
    105e:	61 e0       	ldi	r22, 0x01	; 1
    1060:	82 e0       	ldi	r24, 0x02	; 2
    1062:	0e 94 37 0a 	call	0x146e	; 0x146e <M_DIO_voidSetPinValue>
    1066:	8f ec       	ldi	r24, 0xCF	; 207
    1068:	97 e0       	ldi	r25, 0x07	; 7
    106a:	01 97       	sbiw	r24, 0x01	; 1
    106c:	f1 f7       	brne	.-4      	; 0x106a <H_LCD_voidSendCommand+0x94>
    106e:	00 c0       	rjmp	.+0      	; 0x1070 <H_LCD_voidSendCommand+0x9a>
    1070:	00 00       	nop
    1072:	60 e0       	ldi	r22, 0x00	; 0
    1074:	82 e0       	ldi	r24, 0x02	; 2
    1076:	0e 94 37 0a 	call	0x146e	; 0x146e <M_DIO_voidSetPinValue>
    107a:	8f ec       	ldi	r24, 0xCF	; 207
    107c:	97 e0       	ldi	r25, 0x07	; 7
    107e:	01 97       	sbiw	r24, 0x01	; 1
    1080:	f1 f7       	brne	.-4      	; 0x107e <H_LCD_voidSendCommand+0xa8>
    1082:	00 c0       	rjmp	.+0      	; 0x1084 <H_LCD_voidSendCommand+0xae>
    1084:	00 00       	nop
    1086:	cf 91       	pop	r28
    1088:	08 95       	ret

0000108a <H_LCD_voidSendData>:
    108a:	cf 93       	push	r28
    108c:	c8 2f       	mov	r28, r24
    108e:	61 e0       	ldi	r22, 0x01	; 1
    1090:	83 e0       	ldi	r24, 0x03	; 3
    1092:	0e 94 37 0a 	call	0x146e	; 0x146e <M_DIO_voidSetPinValue>
    1096:	c4 fb       	bst	r28, 4
    1098:	66 27       	eor	r22, r22
    109a:	60 f9       	bld	r22, 0
    109c:	88 e0       	ldi	r24, 0x08	; 8
    109e:	0e 94 37 0a 	call	0x146e	; 0x146e <M_DIO_voidSetPinValue>
    10a2:	c5 fb       	bst	r28, 5
    10a4:	66 27       	eor	r22, r22
    10a6:	60 f9       	bld	r22, 0
    10a8:	89 e0       	ldi	r24, 0x09	; 9
    10aa:	0e 94 37 0a 	call	0x146e	; 0x146e <M_DIO_voidSetPinValue>
    10ae:	c6 fb       	bst	r28, 6
    10b0:	66 27       	eor	r22, r22
    10b2:	60 f9       	bld	r22, 0
    10b4:	8a e0       	ldi	r24, 0x0A	; 10
    10b6:	0e 94 37 0a 	call	0x146e	; 0x146e <M_DIO_voidSetPinValue>
    10ba:	6c 2f       	mov	r22, r28
    10bc:	66 1f       	adc	r22, r22
    10be:	66 27       	eor	r22, r22
    10c0:	66 1f       	adc	r22, r22
    10c2:	8c e0       	ldi	r24, 0x0C	; 12
    10c4:	0e 94 37 0a 	call	0x146e	; 0x146e <M_DIO_voidSetPinValue>
    10c8:	61 e0       	ldi	r22, 0x01	; 1
    10ca:	82 e0       	ldi	r24, 0x02	; 2
    10cc:	0e 94 37 0a 	call	0x146e	; 0x146e <M_DIO_voidSetPinValue>
    10d0:	8f ec       	ldi	r24, 0xCF	; 207
    10d2:	97 e0       	ldi	r25, 0x07	; 7
    10d4:	01 97       	sbiw	r24, 0x01	; 1
    10d6:	f1 f7       	brne	.-4      	; 0x10d4 <H_LCD_voidSendData+0x4a>
    10d8:	00 c0       	rjmp	.+0      	; 0x10da <H_LCD_voidSendData+0x50>
    10da:	00 00       	nop
    10dc:	60 e0       	ldi	r22, 0x00	; 0
    10de:	82 e0       	ldi	r24, 0x02	; 2
    10e0:	0e 94 37 0a 	call	0x146e	; 0x146e <M_DIO_voidSetPinValue>
    10e4:	6c 2f       	mov	r22, r28
    10e6:	61 70       	andi	r22, 0x01	; 1
    10e8:	88 e0       	ldi	r24, 0x08	; 8
    10ea:	0e 94 37 0a 	call	0x146e	; 0x146e <M_DIO_voidSetPinValue>
    10ee:	c1 fb       	bst	r28, 1
    10f0:	66 27       	eor	r22, r22
    10f2:	60 f9       	bld	r22, 0
    10f4:	89 e0       	ldi	r24, 0x09	; 9
    10f6:	0e 94 37 0a 	call	0x146e	; 0x146e <M_DIO_voidSetPinValue>
    10fa:	c2 fb       	bst	r28, 2
    10fc:	66 27       	eor	r22, r22
    10fe:	60 f9       	bld	r22, 0
    1100:	8a e0       	ldi	r24, 0x0A	; 10
    1102:	0e 94 37 0a 	call	0x146e	; 0x146e <M_DIO_voidSetPinValue>
    1106:	c3 fb       	bst	r28, 3
    1108:	66 27       	eor	r22, r22
    110a:	60 f9       	bld	r22, 0
    110c:	8c e0       	ldi	r24, 0x0C	; 12
    110e:	0e 94 37 0a 	call	0x146e	; 0x146e <M_DIO_voidSetPinValue>
    1112:	61 e0       	ldi	r22, 0x01	; 1
    1114:	82 e0       	ldi	r24, 0x02	; 2
    1116:	0e 94 37 0a 	call	0x146e	; 0x146e <M_DIO_voidSetPinValue>
    111a:	8f ec       	ldi	r24, 0xCF	; 207
    111c:	97 e0       	ldi	r25, 0x07	; 7
    111e:	01 97       	sbiw	r24, 0x01	; 1
    1120:	f1 f7       	brne	.-4      	; 0x111e <H_LCD_voidSendData+0x94>
    1122:	00 c0       	rjmp	.+0      	; 0x1124 <H_LCD_voidSendData+0x9a>
    1124:	00 00       	nop
    1126:	60 e0       	ldi	r22, 0x00	; 0
    1128:	82 e0       	ldi	r24, 0x02	; 2
    112a:	0e 94 37 0a 	call	0x146e	; 0x146e <M_DIO_voidSetPinValue>
    112e:	8f ec       	ldi	r24, 0xCF	; 207
    1130:	97 e0       	ldi	r25, 0x07	; 7
    1132:	01 97       	sbiw	r24, 0x01	; 1
    1134:	f1 f7       	brne	.-4      	; 0x1132 <H_LCD_voidSendData+0xa8>
    1136:	00 c0       	rjmp	.+0      	; 0x1138 <H_LCD_voidSendData+0xae>
    1138:	00 00       	nop
    113a:	cf 91       	pop	r28
    113c:	08 95       	ret

0000113e <H_LCD_voidInit>:
    113e:	61 e0       	ldi	r22, 0x01	; 1
    1140:	83 e0       	ldi	r24, 0x03	; 3
    1142:	0e 94 b0 09 	call	0x1360	; 0x1360 <M_DIO_voidSetPinDirection>
    1146:	61 e0       	ldi	r22, 0x01	; 1
    1148:	82 e0       	ldi	r24, 0x02	; 2
    114a:	0e 94 b0 09 	call	0x1360	; 0x1360 <M_DIO_voidSetPinDirection>
    114e:	61 e0       	ldi	r22, 0x01	; 1
    1150:	88 e0       	ldi	r24, 0x08	; 8
    1152:	0e 94 b0 09 	call	0x1360	; 0x1360 <M_DIO_voidSetPinDirection>
    1156:	61 e0       	ldi	r22, 0x01	; 1
    1158:	89 e0       	ldi	r24, 0x09	; 9
    115a:	0e 94 b0 09 	call	0x1360	; 0x1360 <M_DIO_voidSetPinDirection>
    115e:	61 e0       	ldi	r22, 0x01	; 1
    1160:	8a e0       	ldi	r24, 0x0A	; 10
    1162:	0e 94 b0 09 	call	0x1360	; 0x1360 <M_DIO_voidSetPinDirection>
    1166:	61 e0       	ldi	r22, 0x01	; 1
    1168:	8c e0       	ldi	r24, 0x0C	; 12
    116a:	0e 94 b0 09 	call	0x1360	; 0x1360 <M_DIO_voidSetPinDirection>
    116e:	2f e7       	ldi	r18, 0x7F	; 127
    1170:	88 e3       	ldi	r24, 0x38	; 56
    1172:	91 e0       	ldi	r25, 0x01	; 1
    1174:	21 50       	subi	r18, 0x01	; 1
    1176:	80 40       	sbci	r24, 0x00	; 0
    1178:	90 40       	sbci	r25, 0x00	; 0
    117a:	e1 f7       	brne	.-8      	; 0x1174 <H_LCD_voidInit+0x36>
    117c:	00 c0       	rjmp	.+0      	; 0x117e <H_LCD_voidInit+0x40>
    117e:	00 00       	nop
    1180:	82 e0       	ldi	r24, 0x02	; 2
    1182:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <H_LCD_voidSendCommand>
    1186:	88 e2       	ldi	r24, 0x28	; 40
    1188:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <H_LCD_voidSendCommand>
    118c:	8c e0       	ldi	r24, 0x0C	; 12
    118e:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <H_LCD_voidSendCommand>
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <H_LCD_voidSendCommand>
    1198:	8f ec       	ldi	r24, 0xCF	; 207
    119a:	97 e0       	ldi	r25, 0x07	; 7
    119c:	01 97       	sbiw	r24, 0x01	; 1
    119e:	f1 f7       	brne	.-4      	; 0x119c <H_LCD_voidInit+0x5e>
    11a0:	00 c0       	rjmp	.+0      	; 0x11a2 <H_LCD_voidInit+0x64>
    11a2:	00 00       	nop
    11a4:	86 e0       	ldi	r24, 0x06	; 6
    11a6:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <H_LCD_voidSendCommand>
    11aa:	08 95       	ret

000011ac <H_LCD_voidSendChar>:
    11ac:	0e 94 45 08 	call	0x108a	; 0x108a <H_LCD_voidSendData>
    11b0:	08 95       	ret

000011b2 <H_LCD_voidSendString>:
    11b2:	0f 93       	push	r16
    11b4:	1f 93       	push	r17
    11b6:	cf 93       	push	r28
    11b8:	00 97       	sbiw	r24, 0x00	; 0
    11ba:	61 f0       	breq	.+24     	; 0x11d4 <H_LCD_voidSendString+0x22>
    11bc:	8c 01       	movw	r16, r24
    11be:	c0 e0       	ldi	r28, 0x00	; 0
    11c0:	03 c0       	rjmp	.+6      	; 0x11c8 <H_LCD_voidSendString+0x16>
    11c2:	0e 94 d6 08 	call	0x11ac	; 0x11ac <H_LCD_voidSendChar>
    11c6:	cf 5f       	subi	r28, 0xFF	; 255
    11c8:	f8 01       	movw	r30, r16
    11ca:	ec 0f       	add	r30, r28
    11cc:	f1 1d       	adc	r31, r1
    11ce:	80 81       	ld	r24, Z
    11d0:	81 11       	cpse	r24, r1
    11d2:	f7 cf       	rjmp	.-18     	; 0x11c2 <H_LCD_voidSendString+0x10>
    11d4:	cf 91       	pop	r28
    11d6:	1f 91       	pop	r17
    11d8:	0f 91       	pop	r16
    11da:	08 95       	ret

000011dc <H_LCD_voidSetPosition>:
    11dc:	81 30       	cpi	r24, 0x01	; 1
    11de:	19 f4       	brne	.+6      	; 0x11e6 <H_LCD_voidSetPosition+0xa>
    11e0:	8f e7       	ldi	r24, 0x7F	; 127
    11e2:	86 0f       	add	r24, r22
    11e4:	06 c0       	rjmp	.+12     	; 0x11f2 <H_LCD_voidSetPosition+0x16>
    11e6:	82 30       	cpi	r24, 0x02	; 2
    11e8:	19 f4       	brne	.+6      	; 0x11f0 <H_LCD_voidSetPosition+0x14>
    11ea:	8f eb       	ldi	r24, 0xBF	; 191
    11ec:	86 0f       	add	r24, r22
    11ee:	01 c0       	rjmp	.+2      	; 0x11f2 <H_LCD_voidSetPosition+0x16>
    11f0:	80 e8       	ldi	r24, 0x80	; 128
    11f2:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <H_LCD_voidSendCommand>
    11f6:	08 95       	ret

000011f8 <H_LCD_voidClearDisplay>:

void H_LCD_voidClearDisplay(void) {

	H_LCD_voidSendCommand(0x01);
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <H_LCD_voidSendCommand>
    11fe:	8f ec       	ldi	r24, 0xCF	; 207
    1200:	97 e0       	ldi	r25, 0x07	; 7
    1202:	01 97       	sbiw	r24, 0x01	; 1
    1204:	f1 f7       	brne	.-4      	; 0x1202 <H_LCD_voidClearDisplay+0xa>
    1206:	00 c0       	rjmp	.+0      	; 0x1208 <H_LCD_voidClearDisplay+0x10>
    1208:	00 00       	nop
    120a:	08 95       	ret

0000120c <H_LED_voidInit>:
#include "LED_interface.h"
/*---------------------------- Software Interfaces ---------------------------*/

void H_LED_voidInit(u8 copy_u8led)
{
	M_DIO_voidSetPinDirection(copy_u8led,OUTPUT);
    120c:	61 e0       	ldi	r22, 0x01	; 1
    120e:	0e 94 b0 09 	call	0x1360	; 0x1360 <M_DIO_voidSetPinDirection>
    1212:	08 95       	ret

00001214 <H_LED_voidTurnOn>:
}

void H_LED_voidTurnOn(u8 copy_u8led)
{
	M_DIO_voidSetPinValue(copy_u8led,HIGH);
    1214:	61 e0       	ldi	r22, 0x01	; 1
    1216:	0e 94 37 0a 	call	0x146e	; 0x146e <M_DIO_voidSetPinValue>
    121a:	08 95       	ret

0000121c <H_LED_voidTurnOff>:
}

void H_LED_voidTurnOff(u8 copy_u8led)
{
	M_DIO_voidSetPinValue(copy_u8led,LOW);
    121c:	60 e0       	ldi	r22, 0x00	; 0
    121e:	0e 94 37 0a 	call	0x146e	; 0x146e <M_DIO_voidSetPinValue>
    1222:	08 95       	ret

00001224 <H_SSD_voidInit>:
	}

}
*/
void H_SSD_voidInit(void) {
	  M_DIO_voidSetPinDirection(SSD_COM2_PIN, OUTPUT);//seg right
    1224:	61 e0       	ldi	r22, 0x01	; 1
    1226:	84 e0       	ldi	r24, 0x04	; 4
    1228:	0e 94 b0 09 	call	0x1360	; 0x1360 <M_DIO_voidSetPinDirection>
	  M_DIO_voidSetPinDirection(SSD_COM1_PIN, OUTPUT);//seg left
    122c:	61 e0       	ldi	r22, 0x01	; 1
    122e:	85 e0       	ldi	r24, 0x05	; 5
    1230:	0e 94 b0 09 	call	0x1360	; 0x1360 <M_DIO_voidSetPinDirection>

	  //M_DIO_voidSetPortDirection(PORT_D, OUTPUT);

	  M_DIO_voidSetPinDirection(SSD_PINA, OUTPUT);
    1234:	61 e0       	ldi	r22, 0x01	; 1
    1236:	8d e0       	ldi	r24, 0x0D	; 13
    1238:	0e 94 b0 09 	call	0x1360	; 0x1360 <M_DIO_voidSetPinDirection>
	  M_DIO_voidSetPinDirection(SSD_PINB, OUTPUT);
    123c:	61 e0       	ldi	r22, 0x01	; 1
    123e:	8e e0       	ldi	r24, 0x0E	; 14
    1240:	0e 94 b0 09 	call	0x1360	; 0x1360 <M_DIO_voidSetPinDirection>
	  M_DIO_voidSetPinDirection(SSD_PINC, OUTPUT);
    1244:	61 e0       	ldi	r22, 0x01	; 1
    1246:	8f e1       	ldi	r24, 0x1F	; 31
    1248:	0e 94 b0 09 	call	0x1360	; 0x1360 <M_DIO_voidSetPinDirection>
	  M_DIO_voidSetPinDirection(SSD_PIND, OUTPUT);
    124c:	61 e0       	ldi	r22, 0x01	; 1
    124e:	86 e0       	ldi	r24, 0x06	; 6
    1250:	0e 94 b0 09 	call	0x1360	; 0x1360 <M_DIO_voidSetPinDirection>

	  M_DIO_voidSetPinValue(SSD_COM2_PIN,LOW);
    1254:	60 e0       	ldi	r22, 0x00	; 0
    1256:	84 e0       	ldi	r24, 0x04	; 4
    1258:	0e 94 37 0a 	call	0x146e	; 0x146e <M_DIO_voidSetPinValue>
	  M_DIO_voidSetPinValue(SSD_COM1_PIN,LOW);
    125c:	60 e0       	ldi	r22, 0x00	; 0
    125e:	85 e0       	ldi	r24, 0x05	; 5
    1260:	0e 94 37 0a 	call	0x146e	; 0x146e <M_DIO_voidSetPinValue>
    1264:	08 95       	ret

00001266 <H_SSD_voidDisplayNumForAtime>:
}

void H_SSD_voidDisplayNumForAtime(u8 number, u16 time) {
    1266:	ef 92       	push	r14
    1268:	ff 92       	push	r15
    126a:	1f 93       	push	r17
    126c:	cf 93       	push	r28
    126e:	df 93       	push	r29
    1270:	7b 01       	movw	r14, r22

	u8 left = number/10;  //4  0100
    1272:	cd ec       	ldi	r28, 0xCD	; 205
    1274:	8c 9f       	mul	r24, r28
    1276:	c1 2d       	mov	r28, r1
    1278:	11 24       	eor	r1, r1
    127a:	c6 95       	lsr	r28
    127c:	c6 95       	lsr	r28
    127e:	c6 95       	lsr	r28
	u8 right = number%10; //5  0101
    1280:	2c 2f       	mov	r18, r28
    1282:	22 0f       	add	r18, r18
    1284:	92 2f       	mov	r25, r18
    1286:	99 0f       	add	r25, r25
    1288:	99 0f       	add	r25, r25
    128a:	92 0f       	add	r25, r18
    128c:	d8 2f       	mov	r29, r24
    128e:	d9 1b       	sub	r29, r25
	               //     3210
	for (u8 i = 0; i < time/8; i++) {
    1290:	10 e0       	ldi	r17, 0x00	; 0
    1292:	4b c0       	rjmp	.+150    	; 0x132a <H_SSD_voidDisplayNumForAtime+0xc4>

		M_DIO_voidSetPinValue(SSD_COM2_PIN,LOW); //enable seg right
    1294:	60 e0       	ldi	r22, 0x00	; 0
    1296:	84 e0       	ldi	r24, 0x04	; 4
    1298:	0e 94 37 0a 	call	0x146e	; 0x146e <M_DIO_voidSetPinValue>
		M_DIO_voidSetPinValue(SSD_COM1_PIN,HIGH); //Disable seg left
    129c:	61 e0       	ldi	r22, 0x01	; 1
    129e:	85 e0       	ldi	r24, 0x05	; 5
    12a0:	0e 94 37 0a 	call	0x146e	; 0x146e <M_DIO_voidSetPinValue>

		//DIO_voidSetPortValue(PORT_D, right);
		M_DIO_voidSetPinValue(SSD_PINA, READ_BIT(right,0));
    12a4:	6d 2f       	mov	r22, r29
    12a6:	61 70       	andi	r22, 0x01	; 1
    12a8:	8d e0       	ldi	r24, 0x0D	; 13
    12aa:	0e 94 37 0a 	call	0x146e	; 0x146e <M_DIO_voidSetPinValue>
		M_DIO_voidSetPinValue(SSD_PINB, READ_BIT(right,1));
    12ae:	d1 fb       	bst	r29, 1
    12b0:	66 27       	eor	r22, r22
    12b2:	60 f9       	bld	r22, 0
    12b4:	8e e0       	ldi	r24, 0x0E	; 14
    12b6:	0e 94 37 0a 	call	0x146e	; 0x146e <M_DIO_voidSetPinValue>
	    M_DIO_voidSetPinValue(SSD_PINC, READ_BIT(right,2));
    12ba:	d2 fb       	bst	r29, 2
    12bc:	66 27       	eor	r22, r22
    12be:	60 f9       	bld	r22, 0
    12c0:	8f e1       	ldi	r24, 0x1F	; 31
    12c2:	0e 94 37 0a 	call	0x146e	; 0x146e <M_DIO_voidSetPinValue>
		M_DIO_voidSetPinValue(SSD_PIND, READ_BIT(right,3));
    12c6:	d3 fb       	bst	r29, 3
    12c8:	66 27       	eor	r22, r22
    12ca:	60 f9       	bld	r22, 0
    12cc:	86 e0       	ldi	r24, 0x06	; 6
    12ce:	0e 94 37 0a 	call	0x146e	; 0x146e <M_DIO_voidSetPinValue>
    12d2:	8f e3       	ldi	r24, 0x3F	; 63
    12d4:	9f e1       	ldi	r25, 0x1F	; 31
    12d6:	01 97       	sbiw	r24, 0x01	; 1
    12d8:	f1 f7       	brne	.-4      	; 0x12d6 <H_SSD_voidDisplayNumForAtime+0x70>
    12da:	00 c0       	rjmp	.+0      	; 0x12dc <H_SSD_voidDisplayNumForAtime+0x76>
    12dc:	00 00       	nop

		_delay_ms(4);

		M_DIO_voidSetPinValue(SSD_COM1_PIN,LOW); //enable seg left
    12de:	60 e0       	ldi	r22, 0x00	; 0
    12e0:	85 e0       	ldi	r24, 0x05	; 5
    12e2:	0e 94 37 0a 	call	0x146e	; 0x146e <M_DIO_voidSetPinValue>
		M_DIO_voidSetPinValue(SSD_COM2_PIN,HIGH); //Disable seg right
    12e6:	61 e0       	ldi	r22, 0x01	; 1
    12e8:	84 e0       	ldi	r24, 0x04	; 4
    12ea:	0e 94 37 0a 	call	0x146e	; 0x146e <M_DIO_voidSetPinValue>

		//DIO_voidSetPortValue(PORT_D, left);
		M_DIO_voidSetPinValue(SSD_PINA, READ_BIT(left,0));
    12ee:	6c 2f       	mov	r22, r28
    12f0:	61 70       	andi	r22, 0x01	; 1
    12f2:	8d e0       	ldi	r24, 0x0D	; 13
    12f4:	0e 94 37 0a 	call	0x146e	; 0x146e <M_DIO_voidSetPinValue>
		M_DIO_voidSetPinValue(SSD_PINB, READ_BIT(left,1));
    12f8:	c1 fb       	bst	r28, 1
    12fa:	66 27       	eor	r22, r22
    12fc:	60 f9       	bld	r22, 0
    12fe:	8e e0       	ldi	r24, 0x0E	; 14
    1300:	0e 94 37 0a 	call	0x146e	; 0x146e <M_DIO_voidSetPinValue>
	    M_DIO_voidSetPinValue(SSD_PINC, READ_BIT(left,2));
    1304:	c2 fb       	bst	r28, 2
    1306:	66 27       	eor	r22, r22
    1308:	60 f9       	bld	r22, 0
    130a:	8f e1       	ldi	r24, 0x1F	; 31
    130c:	0e 94 37 0a 	call	0x146e	; 0x146e <M_DIO_voidSetPinValue>
		M_DIO_voidSetPinValue(SSD_PIND, READ_BIT(left,3));
    1310:	c3 fb       	bst	r28, 3
    1312:	66 27       	eor	r22, r22
    1314:	60 f9       	bld	r22, 0
    1316:	86 e0       	ldi	r24, 0x06	; 6
    1318:	0e 94 37 0a 	call	0x146e	; 0x146e <M_DIO_voidSetPinValue>
    131c:	8f e3       	ldi	r24, 0x3F	; 63
    131e:	9f e1       	ldi	r25, 0x1F	; 31
    1320:	01 97       	sbiw	r24, 0x01	; 1
    1322:	f1 f7       	brne	.-4      	; 0x1320 <H_SSD_voidDisplayNumForAtime+0xba>
    1324:	00 c0       	rjmp	.+0      	; 0x1326 <H_SSD_voidDisplayNumForAtime+0xc0>
    1326:	00 00       	nop
void H_SSD_voidDisplayNumForAtime(u8 number, u16 time) {

	u8 left = number/10;  //4  0100
	u8 right = number%10; //5  0101
	               //     3210
	for (u8 i = 0; i < time/8; i++) {
    1328:	1f 5f       	subi	r17, 0xFF	; 255
    132a:	81 2f       	mov	r24, r17
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	97 01       	movw	r18, r14
    1330:	36 95       	lsr	r19
    1332:	27 95       	ror	r18
    1334:	36 95       	lsr	r19
    1336:	27 95       	ror	r18
    1338:	36 95       	lsr	r19
    133a:	27 95       	ror	r18
    133c:	82 17       	cp	r24, r18
    133e:	93 07       	cpc	r25, r19
    1340:	08 f4       	brcc	.+2      	; 0x1344 <H_SSD_voidDisplayNumForAtime+0xde>
    1342:	a8 cf       	rjmp	.-176    	; 0x1294 <H_SSD_voidDisplayNumForAtime+0x2e>
	    M_DIO_voidSetPinValue(SSD_PINC, READ_BIT(left,2));
		M_DIO_voidSetPinValue(SSD_PIND, READ_BIT(left,3));
		_delay_ms(4);
	}
	
	  M_DIO_voidSetPinValue(SSD_COM2_PIN,LOW);
    1344:	60 e0       	ldi	r22, 0x00	; 0
    1346:	84 e0       	ldi	r24, 0x04	; 4
    1348:	0e 94 37 0a 	call	0x146e	; 0x146e <M_DIO_voidSetPinValue>
	  M_DIO_voidSetPinValue(SSD_COM1_PIN,LOW);
    134c:	60 e0       	ldi	r22, 0x00	; 0
    134e:	85 e0       	ldi	r24, 0x05	; 5
    1350:	0e 94 37 0a 	call	0x146e	; 0x146e <M_DIO_voidSetPinValue>

}
    1354:	df 91       	pop	r29
    1356:	cf 91       	pop	r28
    1358:	1f 91       	pop	r17
    135a:	ff 90       	pop	r15
    135c:	ef 90       	pop	r14
    135e:	08 95       	ret

00001360 <M_DIO_voidSetPinDirection>:
/************************** software implementation ****************************/
void M_DIO_voidSetPinDirection(u8 Copy_u8PinId,u8 Copy_u8Direction)
{
	u8 port;
	u8 pin;
	port = Copy_u8PinId / 8;
    1360:	98 2f       	mov	r25, r24
    1362:	96 95       	lsr	r25
    1364:	96 95       	lsr	r25
    1366:	96 95       	lsr	r25
	pin  = Copy_u8PinId % 8;
    1368:	87 70       	andi	r24, 0x07	; 7
	switch(Copy_u8Direction)
    136a:	66 23       	and	r22, r22
    136c:	09 f4       	brne	.+2      	; 0x1370 <M_DIO_voidSetPinDirection+0x10>
    136e:	3f c0       	rjmp	.+126    	; 0x13ee <M_DIO_voidSetPinDirection+0x8e>
    1370:	61 30       	cpi	r22, 0x01	; 1
    1372:	09 f0       	breq	.+2      	; 0x1376 <M_DIO_voidSetPinDirection+0x16>
    1374:	7b c0       	rjmp	.+246    	; 0x146c <M_DIO_voidSetPinDirection+0x10c>
	{
		case OUTPUT:
		switch(port)
    1376:	91 30       	cpi	r25, 0x01	; 1
    1378:	99 f0       	breq	.+38     	; 0x13a0 <M_DIO_voidSetPinDirection+0x40>
    137a:	28 f0       	brcs	.+10     	; 0x1386 <M_DIO_voidSetPinDirection+0x26>
    137c:	92 30       	cpi	r25, 0x02	; 2
    137e:	e9 f0       	breq	.+58     	; 0x13ba <M_DIO_voidSetPinDirection+0x5a>
    1380:	93 30       	cpi	r25, 0x03	; 3
    1382:	41 f1       	breq	.+80     	; 0x13d4 <M_DIO_voidSetPinDirection+0x74>
    1384:	08 95       	ret
		{
			case PORT_A:
			SET_BIT(DDRA,pin);
    1386:	4a b3       	in	r20, 0x1a	; 26
    1388:	21 e0       	ldi	r18, 0x01	; 1
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	b9 01       	movw	r22, r18
    138e:	02 c0       	rjmp	.+4      	; 0x1394 <M_DIO_voidSetPinDirection+0x34>
    1390:	66 0f       	add	r22, r22
    1392:	77 1f       	adc	r23, r23
    1394:	8a 95       	dec	r24
    1396:	e2 f7       	brpl	.-8      	; 0x1390 <M_DIO_voidSetPinDirection+0x30>
    1398:	cb 01       	movw	r24, r22
    139a:	84 2b       	or	r24, r20
    139c:	8a bb       	out	0x1a, r24	; 26
            break;
    139e:	08 95       	ret
			case PORT_B:
			SET_BIT(DDRB,pin);
    13a0:	47 b3       	in	r20, 0x17	; 23
    13a2:	21 e0       	ldi	r18, 0x01	; 1
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	b9 01       	movw	r22, r18
    13a8:	02 c0       	rjmp	.+4      	; 0x13ae <M_DIO_voidSetPinDirection+0x4e>
    13aa:	66 0f       	add	r22, r22
    13ac:	77 1f       	adc	r23, r23
    13ae:	8a 95       	dec	r24
    13b0:	e2 f7       	brpl	.-8      	; 0x13aa <M_DIO_voidSetPinDirection+0x4a>
    13b2:	cb 01       	movw	r24, r22
    13b4:	84 2b       	or	r24, r20
    13b6:	87 bb       	out	0x17, r24	; 23
			break;
    13b8:	08 95       	ret
			case PORT_C:
			SET_BIT(DDRC,pin);
    13ba:	44 b3       	in	r20, 0x14	; 20
    13bc:	21 e0       	ldi	r18, 0x01	; 1
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	b9 01       	movw	r22, r18
    13c2:	02 c0       	rjmp	.+4      	; 0x13c8 <M_DIO_voidSetPinDirection+0x68>
    13c4:	66 0f       	add	r22, r22
    13c6:	77 1f       	adc	r23, r23
    13c8:	8a 95       	dec	r24
    13ca:	e2 f7       	brpl	.-8      	; 0x13c4 <M_DIO_voidSetPinDirection+0x64>
    13cc:	cb 01       	movw	r24, r22
    13ce:	84 2b       	or	r24, r20
    13d0:	84 bb       	out	0x14, r24	; 20
			break;
    13d2:	08 95       	ret
			case PORT_D:
			SET_BIT(DDRD,pin);
    13d4:	41 b3       	in	r20, 0x11	; 17
    13d6:	21 e0       	ldi	r18, 0x01	; 1
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	b9 01       	movw	r22, r18
    13dc:	02 c0       	rjmp	.+4      	; 0x13e2 <M_DIO_voidSetPinDirection+0x82>
    13de:	66 0f       	add	r22, r22
    13e0:	77 1f       	adc	r23, r23
    13e2:	8a 95       	dec	r24
    13e4:	e2 f7       	brpl	.-8      	; 0x13de <M_DIO_voidSetPinDirection+0x7e>
    13e6:	cb 01       	movw	r24, r22
    13e8:	84 2b       	or	r24, r20
    13ea:	81 bb       	out	0x11, r24	; 17
			break;
    13ec:	08 95       	ret
		}
		break;
		case INPUT:
		switch(port)
    13ee:	91 30       	cpi	r25, 0x01	; 1
    13f0:	a1 f0       	breq	.+40     	; 0x141a <M_DIO_voidSetPinDirection+0xba>
    13f2:	28 f0       	brcs	.+10     	; 0x13fe <M_DIO_voidSetPinDirection+0x9e>
    13f4:	92 30       	cpi	r25, 0x02	; 2
    13f6:	f9 f0       	breq	.+62     	; 0x1436 <M_DIO_voidSetPinDirection+0xd6>
    13f8:	93 30       	cpi	r25, 0x03	; 3
    13fa:	59 f1       	breq	.+86     	; 0x1452 <M_DIO_voidSetPinDirection+0xf2>
    13fc:	08 95       	ret
		{
			case PORT_A:
			CLEAR_BIT(DDRA,pin);
    13fe:	4a b3       	in	r20, 0x1a	; 26
    1400:	21 e0       	ldi	r18, 0x01	; 1
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	b9 01       	movw	r22, r18
    1406:	02 c0       	rjmp	.+4      	; 0x140c <M_DIO_voidSetPinDirection+0xac>
    1408:	66 0f       	add	r22, r22
    140a:	77 1f       	adc	r23, r23
    140c:	8a 95       	dec	r24
    140e:	e2 f7       	brpl	.-8      	; 0x1408 <M_DIO_voidSetPinDirection+0xa8>
    1410:	cb 01       	movw	r24, r22
    1412:	80 95       	com	r24
    1414:	84 23       	and	r24, r20
    1416:	8a bb       	out	0x1a, r24	; 26
			break;
    1418:	08 95       	ret
			case PORT_B:
			CLEAR_BIT(DDRB,pin);
    141a:	47 b3       	in	r20, 0x17	; 23
    141c:	21 e0       	ldi	r18, 0x01	; 1
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	b9 01       	movw	r22, r18
    1422:	02 c0       	rjmp	.+4      	; 0x1428 <M_DIO_voidSetPinDirection+0xc8>
    1424:	66 0f       	add	r22, r22
    1426:	77 1f       	adc	r23, r23
    1428:	8a 95       	dec	r24
    142a:	e2 f7       	brpl	.-8      	; 0x1424 <M_DIO_voidSetPinDirection+0xc4>
    142c:	cb 01       	movw	r24, r22
    142e:	80 95       	com	r24
    1430:	84 23       	and	r24, r20
    1432:	87 bb       	out	0x17, r24	; 23
			break;
    1434:	08 95       	ret
			case PORT_C:
			CLEAR_BIT(DDRC,pin);
    1436:	44 b3       	in	r20, 0x14	; 20
    1438:	21 e0       	ldi	r18, 0x01	; 1
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	b9 01       	movw	r22, r18
    143e:	02 c0       	rjmp	.+4      	; 0x1444 <M_DIO_voidSetPinDirection+0xe4>
    1440:	66 0f       	add	r22, r22
    1442:	77 1f       	adc	r23, r23
    1444:	8a 95       	dec	r24
    1446:	e2 f7       	brpl	.-8      	; 0x1440 <M_DIO_voidSetPinDirection+0xe0>
    1448:	cb 01       	movw	r24, r22
    144a:	80 95       	com	r24
    144c:	84 23       	and	r24, r20
    144e:	84 bb       	out	0x14, r24	; 20
			break;
    1450:	08 95       	ret
			case PORT_D:
			CLEAR_BIT(DDRD,pin);
    1452:	41 b3       	in	r20, 0x11	; 17
    1454:	21 e0       	ldi	r18, 0x01	; 1
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	b9 01       	movw	r22, r18
    145a:	02 c0       	rjmp	.+4      	; 0x1460 <M_DIO_voidSetPinDirection+0x100>
    145c:	66 0f       	add	r22, r22
    145e:	77 1f       	adc	r23, r23
    1460:	8a 95       	dec	r24
    1462:	e2 f7       	brpl	.-8      	; 0x145c <M_DIO_voidSetPinDirection+0xfc>
    1464:	cb 01       	movw	r24, r22
    1466:	80 95       	com	r24
    1468:	84 23       	and	r24, r20
    146a:	81 bb       	out	0x11, r24	; 17
    146c:	08 95       	ret

0000146e <M_DIO_voidSetPinValue>:
}
void M_DIO_voidSetPinValue(u8 Copy_u8PinId,u8 Copy_u8Value)
{
	u8 port;
		u8 pin;
		port = Copy_u8PinId/8;
    146e:	98 2f       	mov	r25, r24
    1470:	96 95       	lsr	r25
    1472:	96 95       	lsr	r25
    1474:	96 95       	lsr	r25
		pin  = Copy_u8PinId%8;
    1476:	87 70       	andi	r24, 0x07	; 7
		switch(Copy_u8Value)
    1478:	66 23       	and	r22, r22
    147a:	09 f4       	brne	.+2      	; 0x147e <M_DIO_voidSetPinValue+0x10>
    147c:	3f c0       	rjmp	.+126    	; 0x14fc <M_DIO_voidSetPinValue+0x8e>
    147e:	61 30       	cpi	r22, 0x01	; 1
    1480:	09 f0       	breq	.+2      	; 0x1484 <M_DIO_voidSetPinValue+0x16>
    1482:	7b c0       	rjmp	.+246    	; 0x157a <M_DIO_voidSetPinValue+0x10c>
		{
			case HIGH:
			switch(port)
    1484:	91 30       	cpi	r25, 0x01	; 1
    1486:	99 f0       	breq	.+38     	; 0x14ae <M_DIO_voidSetPinValue+0x40>
    1488:	28 f0       	brcs	.+10     	; 0x1494 <M_DIO_voidSetPinValue+0x26>
    148a:	92 30       	cpi	r25, 0x02	; 2
    148c:	e9 f0       	breq	.+58     	; 0x14c8 <M_DIO_voidSetPinValue+0x5a>
    148e:	93 30       	cpi	r25, 0x03	; 3
    1490:	41 f1       	breq	.+80     	; 0x14e2 <M_DIO_voidSetPinValue+0x74>
    1492:	08 95       	ret
			{
				case PORT_A:
				SET_BIT(PORTA,pin);
    1494:	4b b3       	in	r20, 0x1b	; 27
    1496:	21 e0       	ldi	r18, 0x01	; 1
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	b9 01       	movw	r22, r18
    149c:	02 c0       	rjmp	.+4      	; 0x14a2 <M_DIO_voidSetPinValue+0x34>
    149e:	66 0f       	add	r22, r22
    14a0:	77 1f       	adc	r23, r23
    14a2:	8a 95       	dec	r24
    14a4:	e2 f7       	brpl	.-8      	; 0x149e <M_DIO_voidSetPinValue+0x30>
    14a6:	cb 01       	movw	r24, r22
    14a8:	84 2b       	or	r24, r20
    14aa:	8b bb       	out	0x1b, r24	; 27
				break;
    14ac:	08 95       	ret
				case PORT_B:
				SET_BIT(PORTB,pin);
    14ae:	48 b3       	in	r20, 0x18	; 24
    14b0:	21 e0       	ldi	r18, 0x01	; 1
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	b9 01       	movw	r22, r18
    14b6:	02 c0       	rjmp	.+4      	; 0x14bc <M_DIO_voidSetPinValue+0x4e>
    14b8:	66 0f       	add	r22, r22
    14ba:	77 1f       	adc	r23, r23
    14bc:	8a 95       	dec	r24
    14be:	e2 f7       	brpl	.-8      	; 0x14b8 <M_DIO_voidSetPinValue+0x4a>
    14c0:	cb 01       	movw	r24, r22
    14c2:	84 2b       	or	r24, r20
    14c4:	88 bb       	out	0x18, r24	; 24
				break;
    14c6:	08 95       	ret
				case PORT_C:
				SET_BIT(PORTC,pin);
    14c8:	45 b3       	in	r20, 0x15	; 21
    14ca:	21 e0       	ldi	r18, 0x01	; 1
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	b9 01       	movw	r22, r18
    14d0:	02 c0       	rjmp	.+4      	; 0x14d6 <M_DIO_voidSetPinValue+0x68>
    14d2:	66 0f       	add	r22, r22
    14d4:	77 1f       	adc	r23, r23
    14d6:	8a 95       	dec	r24
    14d8:	e2 f7       	brpl	.-8      	; 0x14d2 <M_DIO_voidSetPinValue+0x64>
    14da:	cb 01       	movw	r24, r22
    14dc:	84 2b       	or	r24, r20
    14de:	85 bb       	out	0x15, r24	; 21
				break;
    14e0:	08 95       	ret
				case PORT_D:
				SET_BIT(PORTD,pin);
    14e2:	42 b3       	in	r20, 0x12	; 18
    14e4:	21 e0       	ldi	r18, 0x01	; 1
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	b9 01       	movw	r22, r18
    14ea:	02 c0       	rjmp	.+4      	; 0x14f0 <M_DIO_voidSetPinValue+0x82>
    14ec:	66 0f       	add	r22, r22
    14ee:	77 1f       	adc	r23, r23
    14f0:	8a 95       	dec	r24
    14f2:	e2 f7       	brpl	.-8      	; 0x14ec <M_DIO_voidSetPinValue+0x7e>
    14f4:	cb 01       	movw	r24, r22
    14f6:	84 2b       	or	r24, r20
    14f8:	82 bb       	out	0x12, r24	; 18
				break;
    14fa:	08 95       	ret
			}
			break;
			case LOW:
			switch(port)
    14fc:	91 30       	cpi	r25, 0x01	; 1
    14fe:	a1 f0       	breq	.+40     	; 0x1528 <M_DIO_voidSetPinValue+0xba>
    1500:	28 f0       	brcs	.+10     	; 0x150c <M_DIO_voidSetPinValue+0x9e>
    1502:	92 30       	cpi	r25, 0x02	; 2
    1504:	f9 f0       	breq	.+62     	; 0x1544 <M_DIO_voidSetPinValue+0xd6>
    1506:	93 30       	cpi	r25, 0x03	; 3
    1508:	59 f1       	breq	.+86     	; 0x1560 <M_DIO_voidSetPinValue+0xf2>
    150a:	08 95       	ret
			{
				case PORT_A:
				CLEAR_BIT(PORTA,pin);
    150c:	4b b3       	in	r20, 0x1b	; 27
    150e:	21 e0       	ldi	r18, 0x01	; 1
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	b9 01       	movw	r22, r18
    1514:	02 c0       	rjmp	.+4      	; 0x151a <M_DIO_voidSetPinValue+0xac>
    1516:	66 0f       	add	r22, r22
    1518:	77 1f       	adc	r23, r23
    151a:	8a 95       	dec	r24
    151c:	e2 f7       	brpl	.-8      	; 0x1516 <M_DIO_voidSetPinValue+0xa8>
    151e:	cb 01       	movw	r24, r22
    1520:	80 95       	com	r24
    1522:	84 23       	and	r24, r20
    1524:	8b bb       	out	0x1b, r24	; 27
				break;
    1526:	08 95       	ret
				case PORT_B:
				CLEAR_BIT(PORTB,pin);
    1528:	48 b3       	in	r20, 0x18	; 24
    152a:	21 e0       	ldi	r18, 0x01	; 1
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	b9 01       	movw	r22, r18
    1530:	02 c0       	rjmp	.+4      	; 0x1536 <M_DIO_voidSetPinValue+0xc8>
    1532:	66 0f       	add	r22, r22
    1534:	77 1f       	adc	r23, r23
    1536:	8a 95       	dec	r24
    1538:	e2 f7       	brpl	.-8      	; 0x1532 <M_DIO_voidSetPinValue+0xc4>
    153a:	cb 01       	movw	r24, r22
    153c:	80 95       	com	r24
    153e:	84 23       	and	r24, r20
    1540:	88 bb       	out	0x18, r24	; 24
				break;
    1542:	08 95       	ret
				case PORT_C:
				CLEAR_BIT(PORTC,pin);
    1544:	45 b3       	in	r20, 0x15	; 21
    1546:	21 e0       	ldi	r18, 0x01	; 1
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	b9 01       	movw	r22, r18
    154c:	02 c0       	rjmp	.+4      	; 0x1552 <M_DIO_voidSetPinValue+0xe4>
    154e:	66 0f       	add	r22, r22
    1550:	77 1f       	adc	r23, r23
    1552:	8a 95       	dec	r24
    1554:	e2 f7       	brpl	.-8      	; 0x154e <M_DIO_voidSetPinValue+0xe0>
    1556:	cb 01       	movw	r24, r22
    1558:	80 95       	com	r24
    155a:	84 23       	and	r24, r20
    155c:	85 bb       	out	0x15, r24	; 21
				break;
    155e:	08 95       	ret
				case PORT_D:
				CLEAR_BIT(PORTD,pin);
    1560:	42 b3       	in	r20, 0x12	; 18
    1562:	21 e0       	ldi	r18, 0x01	; 1
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	b9 01       	movw	r22, r18
    1568:	02 c0       	rjmp	.+4      	; 0x156e <M_DIO_voidSetPinValue+0x100>
    156a:	66 0f       	add	r22, r22
    156c:	77 1f       	adc	r23, r23
    156e:	8a 95       	dec	r24
    1570:	e2 f7       	brpl	.-8      	; 0x156a <M_DIO_voidSetPinValue+0xfc>
    1572:	cb 01       	movw	r24, r22
    1574:	80 95       	com	r24
    1576:	84 23       	and	r24, r20
    1578:	82 bb       	out	0x12, r24	; 18
    157a:	08 95       	ret

0000157c <M_DIO_u8GetPinValue>:
u8 M_DIO_u8GetPinValue(u8 Copy_u8PinId)
{
	u8 port;
		u8 pin;
		u8 volt = LOW;
		port = Copy_u8PinId/8;
    157c:	98 2f       	mov	r25, r24
    157e:	96 95       	lsr	r25
    1580:	96 95       	lsr	r25
    1582:	96 95       	lsr	r25
		pin  = Copy_u8PinId%8;
    1584:	48 2f       	mov	r20, r24
    1586:	47 70       	andi	r20, 0x07	; 7
		switch(port)
    1588:	91 30       	cpi	r25, 0x01	; 1
    158a:	81 f0       	breq	.+32     	; 0x15ac <M_DIO_u8GetPinValue+0x30>
    158c:	28 f0       	brcs	.+10     	; 0x1598 <M_DIO_u8GetPinValue+0x1c>
    158e:	92 30       	cpi	r25, 0x02	; 2
    1590:	b9 f0       	breq	.+46     	; 0x15c0 <M_DIO_u8GetPinValue+0x44>
    1592:	93 30       	cpi	r25, 0x03	; 3
    1594:	f9 f0       	breq	.+62     	; 0x15d4 <M_DIO_u8GetPinValue+0x58>
    1596:	28 c0       	rjmp	.+80     	; 0x15e8 <M_DIO_u8GetPinValue+0x6c>
		{
			case PORT_A:
			volt = READ_BIT(PINA,pin);
    1598:	99 b3       	in	r25, 0x19	; 25
    159a:	89 2f       	mov	r24, r25
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	02 c0       	rjmp	.+4      	; 0x15a4 <M_DIO_u8GetPinValue+0x28>
    15a0:	95 95       	asr	r25
    15a2:	87 95       	ror	r24
    15a4:	4a 95       	dec	r20
    15a6:	e2 f7       	brpl	.-8      	; 0x15a0 <M_DIO_u8GetPinValue+0x24>
    15a8:	81 70       	andi	r24, 0x01	; 1
			break;
    15aa:	08 95       	ret
			case PORT_B:
			volt = READ_BIT(PINB,pin);
    15ac:	26 b3       	in	r18, 0x16	; 22
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	c9 01       	movw	r24, r18
    15b2:	02 c0       	rjmp	.+4      	; 0x15b8 <M_DIO_u8GetPinValue+0x3c>
    15b4:	95 95       	asr	r25
    15b6:	87 95       	ror	r24
    15b8:	4a 95       	dec	r20
    15ba:	e2 f7       	brpl	.-8      	; 0x15b4 <M_DIO_u8GetPinValue+0x38>
    15bc:	81 70       	andi	r24, 0x01	; 1
			break;
    15be:	08 95       	ret
			case PORT_C:
			volt = READ_BIT(PINC,pin);
    15c0:	23 b3       	in	r18, 0x13	; 19
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	c9 01       	movw	r24, r18
    15c6:	02 c0       	rjmp	.+4      	; 0x15cc <M_DIO_u8GetPinValue+0x50>
    15c8:	95 95       	asr	r25
    15ca:	87 95       	ror	r24
    15cc:	4a 95       	dec	r20
    15ce:	e2 f7       	brpl	.-8      	; 0x15c8 <M_DIO_u8GetPinValue+0x4c>
    15d0:	81 70       	andi	r24, 0x01	; 1
			break;
    15d2:	08 95       	ret
			case PORT_D:
			volt = READ_BIT(PIND,pin);
    15d4:	20 b3       	in	r18, 0x10	; 16
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	c9 01       	movw	r24, r18
    15da:	02 c0       	rjmp	.+4      	; 0x15e0 <M_DIO_u8GetPinValue+0x64>
    15dc:	95 95       	asr	r25
    15de:	87 95       	ror	r24
    15e0:	4a 95       	dec	r20
    15e2:	e2 f7       	brpl	.-8      	; 0x15dc <M_DIO_u8GetPinValue+0x60>
    15e4:	81 70       	andi	r24, 0x01	; 1
			break;
    15e6:	08 95       	ret
}
u8 M_DIO_u8GetPinValue(u8 Copy_u8PinId)
{
	u8 port;
		u8 pin;
		u8 volt = LOW;
    15e8:	80 e0       	ldi	r24, 0x00	; 0
			case PORT_D:
			volt = READ_BIT(PIND,pin);
			break;
		}
		return volt;
}
    15ea:	08 95       	ret

000015ec <M_EXT_voidInit>:
		break;
	case EX_INT1:
		CLEAR_BIT(GICR, INT1);
		break;
	case EX_INT2:
		CLEAR_BIT(GICR, INT2);
    15ec:	81 30       	cpi	r24, 0x01	; 1
    15ee:	49 f1       	breq	.+82     	; 0x1642 <M_EXT_voidInit+0x56>
    15f0:	20 f0       	brcs	.+8      	; 0x15fa <M_EXT_voidInit+0xe>
    15f2:	82 30       	cpi	r24, 0x02	; 2
    15f4:	09 f4       	brne	.+2      	; 0x15f8 <M_EXT_voidInit+0xc>
    15f6:	49 c0       	rjmp	.+146    	; 0x168a <M_EXT_voidInit+0x9e>
    15f8:	08 95       	ret
    15fa:	61 30       	cpi	r22, 0x01	; 1
    15fc:	d9 f0       	breq	.+54     	; 0x1634 <M_EXT_voidInit+0x48>
    15fe:	28 f0       	brcs	.+10     	; 0x160a <M_EXT_voidInit+0x1e>
    1600:	62 30       	cpi	r22, 0x02	; 2
    1602:	89 f0       	breq	.+34     	; 0x1626 <M_EXT_voidInit+0x3a>
    1604:	63 30       	cpi	r22, 0x03	; 3
    1606:	41 f0       	breq	.+16     	; 0x1618 <M_EXT_voidInit+0x2c>
    1608:	08 95       	ret
    160a:	85 b7       	in	r24, 0x35	; 53
    160c:	8e 7f       	andi	r24, 0xFE	; 254
    160e:	85 bf       	out	0x35, r24	; 53
    1610:	85 b7       	in	r24, 0x35	; 53
    1612:	8d 7f       	andi	r24, 0xFD	; 253
    1614:	85 bf       	out	0x35, r24	; 53
    1616:	08 95       	ret
    1618:	85 b7       	in	r24, 0x35	; 53
    161a:	81 60       	ori	r24, 0x01	; 1
    161c:	85 bf       	out	0x35, r24	; 53
    161e:	85 b7       	in	r24, 0x35	; 53
    1620:	8d 7f       	andi	r24, 0xFD	; 253
    1622:	85 bf       	out	0x35, r24	; 53
    1624:	08 95       	ret
    1626:	85 b7       	in	r24, 0x35	; 53
    1628:	8e 7f       	andi	r24, 0xFE	; 254
    162a:	85 bf       	out	0x35, r24	; 53
    162c:	85 b7       	in	r24, 0x35	; 53
    162e:	82 60       	ori	r24, 0x02	; 2
    1630:	85 bf       	out	0x35, r24	; 53
    1632:	08 95       	ret
    1634:	85 b7       	in	r24, 0x35	; 53
    1636:	81 60       	ori	r24, 0x01	; 1
    1638:	85 bf       	out	0x35, r24	; 53
    163a:	85 b7       	in	r24, 0x35	; 53
    163c:	82 60       	ori	r24, 0x02	; 2
    163e:	85 bf       	out	0x35, r24	; 53
    1640:	08 95       	ret
    1642:	61 30       	cpi	r22, 0x01	; 1
    1644:	d9 f0       	breq	.+54     	; 0x167c <M_EXT_voidInit+0x90>
    1646:	28 f0       	brcs	.+10     	; 0x1652 <M_EXT_voidInit+0x66>
    1648:	62 30       	cpi	r22, 0x02	; 2
    164a:	89 f0       	breq	.+34     	; 0x166e <M_EXT_voidInit+0x82>
    164c:	63 30       	cpi	r22, 0x03	; 3
    164e:	41 f0       	breq	.+16     	; 0x1660 <M_EXT_voidInit+0x74>
    1650:	08 95       	ret
    1652:	85 b7       	in	r24, 0x35	; 53
    1654:	8b 7f       	andi	r24, 0xFB	; 251
    1656:	85 bf       	out	0x35, r24	; 53
    1658:	85 b7       	in	r24, 0x35	; 53
    165a:	87 7f       	andi	r24, 0xF7	; 247
    165c:	85 bf       	out	0x35, r24	; 53
    165e:	08 95       	ret
    1660:	85 b7       	in	r24, 0x35	; 53
    1662:	84 60       	ori	r24, 0x04	; 4
    1664:	85 bf       	out	0x35, r24	; 53
    1666:	85 b7       	in	r24, 0x35	; 53
    1668:	87 7f       	andi	r24, 0xF7	; 247
    166a:	85 bf       	out	0x35, r24	; 53
    166c:	08 95       	ret
    166e:	85 b7       	in	r24, 0x35	; 53
    1670:	8b 7f       	andi	r24, 0xFB	; 251
    1672:	85 bf       	out	0x35, r24	; 53
    1674:	85 b7       	in	r24, 0x35	; 53
    1676:	88 60       	ori	r24, 0x08	; 8
    1678:	85 bf       	out	0x35, r24	; 53
    167a:	08 95       	ret
    167c:	85 b7       	in	r24, 0x35	; 53
    167e:	84 60       	ori	r24, 0x04	; 4
    1680:	85 bf       	out	0x35, r24	; 53
    1682:	85 b7       	in	r24, 0x35	; 53
    1684:	88 60       	ori	r24, 0x08	; 8
    1686:	85 bf       	out	0x35, r24	; 53
    1688:	08 95       	ret
    168a:	61 30       	cpi	r22, 0x01	; 1
    168c:	31 f0       	breq	.+12     	; 0x169a <M_EXT_voidInit+0xae>
    168e:	62 30       	cpi	r22, 0x02	; 2
    1690:	41 f4       	brne	.+16     	; 0x16a2 <M_EXT_voidInit+0xb6>
    1692:	84 b7       	in	r24, 0x34	; 52
    1694:	8f 7b       	andi	r24, 0xBF	; 191
    1696:	84 bf       	out	0x34, r24	; 52
    1698:	08 95       	ret
    169a:	84 b7       	in	r24, 0x34	; 52
    169c:	80 64       	ori	r24, 0x40	; 64
    169e:	84 bf       	out	0x34, r24	; 52
    16a0:	08 95       	ret
    16a2:	84 b7       	in	r24, 0x34	; 52
    16a4:	8f 7b       	andi	r24, 0xBF	; 191
    16a6:	84 bf       	out	0x34, r24	; 52
    16a8:	08 95       	ret

000016aa <M_EXTI_voidEXTIEnable>:
    16aa:	81 30       	cpi	r24, 0x01	; 1
    16ac:	41 f0       	breq	.+16     	; 0x16be <M_EXTI_voidEXTIEnable+0x14>
    16ae:	18 f0       	brcs	.+6      	; 0x16b6 <M_EXTI_voidEXTIEnable+0xc>
    16b0:	82 30       	cpi	r24, 0x02	; 2
    16b2:	49 f0       	breq	.+18     	; 0x16c6 <M_EXTI_voidEXTIEnable+0x1c>
    16b4:	08 95       	ret
    16b6:	8b b7       	in	r24, 0x3b	; 59
    16b8:	80 64       	ori	r24, 0x40	; 64
    16ba:	8b bf       	out	0x3b, r24	; 59
    16bc:	08 95       	ret
    16be:	8b b7       	in	r24, 0x3b	; 59
    16c0:	80 68       	ori	r24, 0x80	; 128
    16c2:	8b bf       	out	0x3b, r24	; 59
    16c4:	08 95       	ret
    16c6:	8b b7       	in	r24, 0x3b	; 59
    16c8:	80 62       	ori	r24, 0x20	; 32
    16ca:	8b bf       	out	0x3b, r24	; 59
    16cc:	08 95       	ret

000016ce <M_EXTI_voidSetCallBack>:
		break;
	}
}

void M_EXTI_voidSetCallBack(EXInterruptSource_t Copy_u8EXTINo, void (*Copy_PtrToFunc)(void)) {
	if (Copy_PtrToFunc != NULL) {
    16ce:	61 15       	cp	r22, r1
    16d0:	71 05       	cpc	r23, r1
    16d2:	a1 f0       	breq	.+40     	; 0x16fc <M_EXTI_voidSetCallBack+0x2e>
		switch (Copy_u8EXTINo) {
    16d4:	81 30       	cpi	r24, 0x01	; 1
    16d6:	49 f0       	breq	.+18     	; 0x16ea <M_EXTI_voidSetCallBack+0x1c>
    16d8:	18 f0       	brcs	.+6      	; 0x16e0 <M_EXTI_voidSetCallBack+0x12>
    16da:	82 30       	cpi	r24, 0x02	; 2
    16dc:	59 f0       	breq	.+22     	; 0x16f4 <M_EXTI_voidSetCallBack+0x26>
    16de:	08 95       	ret
		case EX_INT0:
			PTR_FUNC_INT0 = Copy_PtrToFunc;
    16e0:	70 93 a8 02 	sts	0x02A8, r23	; 0x8002a8 <PTR_FUNC_INT0+0x1>
    16e4:	60 93 a7 02 	sts	0x02A7, r22	; 0x8002a7 <PTR_FUNC_INT0>
			break;
    16e8:	08 95       	ret
		case EX_INT1:
			PTR_FUNC_INT1 = Copy_PtrToFunc;
    16ea:	70 93 a6 02 	sts	0x02A6, r23	; 0x8002a6 <PTR_FUNC_INT1+0x1>
    16ee:	60 93 a5 02 	sts	0x02A5, r22	; 0x8002a5 <PTR_FUNC_INT1>
			break;
    16f2:	08 95       	ret
		case EX_INT2:
			PTR_FUNC_INT2 = Copy_PtrToFunc;
    16f4:	70 93 a4 02 	sts	0x02A4, r23	; 0x8002a4 <PTR_FUNC_INT2+0x1>
    16f8:	60 93 a3 02 	sts	0x02A3, r22	; 0x8002a3 <PTR_FUNC_INT2>
    16fc:	08 95       	ret

000016fe <__vector_1>:
	}
}

/***********************************EXTI0 ISR***********************************/

ISR(INT0_vect) {
    16fe:	1f 92       	push	r1
    1700:	0f 92       	push	r0
    1702:	0f b6       	in	r0, 0x3f	; 63
    1704:	0f 92       	push	r0
    1706:	11 24       	eor	r1, r1
    1708:	2f 93       	push	r18
    170a:	3f 93       	push	r19
    170c:	4f 93       	push	r20
    170e:	5f 93       	push	r21
    1710:	6f 93       	push	r22
    1712:	7f 93       	push	r23
    1714:	8f 93       	push	r24
    1716:	9f 93       	push	r25
    1718:	af 93       	push	r26
    171a:	bf 93       	push	r27
    171c:	ef 93       	push	r30
    171e:	ff 93       	push	r31
	if (PTR_FUNC_INT0 != NULL) {
    1720:	e0 91 a7 02 	lds	r30, 0x02A7	; 0x8002a7 <PTR_FUNC_INT0>
    1724:	f0 91 a8 02 	lds	r31, 0x02A8	; 0x8002a8 <PTR_FUNC_INT0+0x1>
    1728:	30 97       	sbiw	r30, 0x00	; 0
    172a:	09 f0       	breq	.+2      	; 0x172e <__vector_1+0x30>
		PTR_FUNC_INT0();
    172c:	09 95       	icall
	}
}
    172e:	ff 91       	pop	r31
    1730:	ef 91       	pop	r30
    1732:	bf 91       	pop	r27
    1734:	af 91       	pop	r26
    1736:	9f 91       	pop	r25
    1738:	8f 91       	pop	r24
    173a:	7f 91       	pop	r23
    173c:	6f 91       	pop	r22
    173e:	5f 91       	pop	r21
    1740:	4f 91       	pop	r20
    1742:	3f 91       	pop	r19
    1744:	2f 91       	pop	r18
    1746:	0f 90       	pop	r0
    1748:	0f be       	out	0x3f, r0	; 63
    174a:	0f 90       	pop	r0
    174c:	1f 90       	pop	r1
    174e:	18 95       	reti

00001750 <__vector_2>:

/***********************************EXTI1 ISR***********************************/
ISR(INT1_vect) {
    1750:	1f 92       	push	r1
    1752:	0f 92       	push	r0
    1754:	0f b6       	in	r0, 0x3f	; 63
    1756:	0f 92       	push	r0
    1758:	11 24       	eor	r1, r1
    175a:	2f 93       	push	r18
    175c:	3f 93       	push	r19
    175e:	4f 93       	push	r20
    1760:	5f 93       	push	r21
    1762:	6f 93       	push	r22
    1764:	7f 93       	push	r23
    1766:	8f 93       	push	r24
    1768:	9f 93       	push	r25
    176a:	af 93       	push	r26
    176c:	bf 93       	push	r27
    176e:	ef 93       	push	r30
    1770:	ff 93       	push	r31
	if (PTR_FUNC_INT1 != NULL) {
    1772:	e0 91 a5 02 	lds	r30, 0x02A5	; 0x8002a5 <PTR_FUNC_INT1>
    1776:	f0 91 a6 02 	lds	r31, 0x02A6	; 0x8002a6 <PTR_FUNC_INT1+0x1>
    177a:	30 97       	sbiw	r30, 0x00	; 0
    177c:	09 f0       	breq	.+2      	; 0x1780 <__vector_2+0x30>
		PTR_FUNC_INT1();
    177e:	09 95       	icall
	}
}
    1780:	ff 91       	pop	r31
    1782:	ef 91       	pop	r30
    1784:	bf 91       	pop	r27
    1786:	af 91       	pop	r26
    1788:	9f 91       	pop	r25
    178a:	8f 91       	pop	r24
    178c:	7f 91       	pop	r23
    178e:	6f 91       	pop	r22
    1790:	5f 91       	pop	r21
    1792:	4f 91       	pop	r20
    1794:	3f 91       	pop	r19
    1796:	2f 91       	pop	r18
    1798:	0f 90       	pop	r0
    179a:	0f be       	out	0x3f, r0	; 63
    179c:	0f 90       	pop	r0
    179e:	1f 90       	pop	r1
    17a0:	18 95       	reti

000017a2 <__vector_3>:
/***********************************EXTI2 ISR***********************************/
ISR(INT2_vect) {
    17a2:	1f 92       	push	r1
    17a4:	0f 92       	push	r0
    17a6:	0f b6       	in	r0, 0x3f	; 63
    17a8:	0f 92       	push	r0
    17aa:	11 24       	eor	r1, r1
    17ac:	2f 93       	push	r18
    17ae:	3f 93       	push	r19
    17b0:	4f 93       	push	r20
    17b2:	5f 93       	push	r21
    17b4:	6f 93       	push	r22
    17b6:	7f 93       	push	r23
    17b8:	8f 93       	push	r24
    17ba:	9f 93       	push	r25
    17bc:	af 93       	push	r26
    17be:	bf 93       	push	r27
    17c0:	ef 93       	push	r30
    17c2:	ff 93       	push	r31
	if (PTR_FUNC_INT2 != NULL) {
    17c4:	e0 91 a3 02 	lds	r30, 0x02A3	; 0x8002a3 <PTR_FUNC_INT2>
    17c8:	f0 91 a4 02 	lds	r31, 0x02A4	; 0x8002a4 <PTR_FUNC_INT2+0x1>
    17cc:	30 97       	sbiw	r30, 0x00	; 0
    17ce:	09 f0       	breq	.+2      	; 0x17d2 <__vector_3+0x30>
		PTR_FUNC_INT2();
    17d0:	09 95       	icall
	}
}
    17d2:	ff 91       	pop	r31
    17d4:	ef 91       	pop	r30
    17d6:	bf 91       	pop	r27
    17d8:	af 91       	pop	r26
    17da:	9f 91       	pop	r25
    17dc:	8f 91       	pop	r24
    17de:	7f 91       	pop	r23
    17e0:	6f 91       	pop	r22
    17e2:	5f 91       	pop	r21
    17e4:	4f 91       	pop	r20
    17e6:	3f 91       	pop	r19
    17e8:	2f 91       	pop	r18
    17ea:	0f 90       	pop	r0
    17ec:	0f be       	out	0x3f, r0	; 63
    17ee:	0f 90       	pop	r0
    17f0:	1f 90       	pop	r1
    17f2:	18 95       	reti

000017f4 <M_Global_Interrupt_Enable>:
#include "GIE_private.h"
#include "GIE_interface.h"

void M_Global_Interrupt_Enable(void)
{
	SET_BIT(SREG,GIE);
    17f4:	8f b7       	in	r24, 0x3f	; 63
    17f6:	80 68       	ori	r24, 0x80	; 128
    17f8:	8f bf       	out	0x3f, r24	; 63
    17fa:	08 95       	ret

000017fc <M_Timer0_Init>:
	else
	{
		state = NULL_POINTER;
	}
	return state;
}
    17fc:	83 b7       	in	r24, 0x33	; 51
    17fe:	8f 7b       	andi	r24, 0xBF	; 191
    1800:	83 bf       	out	0x33, r24	; 51
    1802:	83 b7       	in	r24, 0x33	; 51
    1804:	87 7f       	andi	r24, 0xF7	; 247
    1806:	83 bf       	out	0x33, r24	; 51
    1808:	83 b7       	in	r24, 0x33	; 51
    180a:	8f 7c       	andi	r24, 0xCF	; 207
    180c:	83 bf       	out	0x33, r24	; 51
    180e:	83 b7       	in	r24, 0x33	; 51
    1810:	83 bf       	out	0x33, r24	; 51
    1812:	82 e0       	ldi	r24, 0x02	; 2
    1814:	08 95       	ret

00001816 <M_Timer0_start>:
    1816:	83 b7       	in	r24, 0x33	; 51
    1818:	88 7f       	andi	r24, 0xF8	; 248
    181a:	83 bf       	out	0x33, r24	; 51
    181c:	83 b7       	in	r24, 0x33	; 51
    181e:	85 60       	ori	r24, 0x05	; 5
    1820:	83 bf       	out	0x33, r24	; 51
    1822:	82 e0       	ldi	r24, 0x02	; 2
    1824:	08 95       	ret

00001826 <M_Timer0_stop>:
    1826:	83 b7       	in	r24, 0x33	; 51
    1828:	88 7f       	andi	r24, 0xF8	; 248
    182a:	83 bf       	out	0x33, r24	; 51
    182c:	82 e0       	ldi	r24, 0x02	; 2
    182e:	08 95       	ret

00001830 <M_TIMER0_EnableInt>:
    1830:	88 23       	and	r24, r24
    1832:	19 f0       	breq	.+6      	; 0x183a <M_TIMER0_EnableInt+0xa>
    1834:	81 30       	cpi	r24, 0x01	; 1
    1836:	31 f0       	breq	.+12     	; 0x1844 <M_TIMER0_EnableInt+0x14>
    1838:	0a c0       	rjmp	.+20     	; 0x184e <M_TIMER0_EnableInt+0x1e>
    183a:	89 b7       	in	r24, 0x39	; 57
    183c:	81 60       	ori	r24, 0x01	; 1
    183e:	89 bf       	out	0x39, r24	; 57
    1840:	82 e0       	ldi	r24, 0x02	; 2
    1842:	08 95       	ret
    1844:	89 b7       	in	r24, 0x39	; 57
    1846:	82 60       	ori	r24, 0x02	; 2
    1848:	89 bf       	out	0x39, r24	; 57
    184a:	82 e0       	ldi	r24, 0x02	; 2
    184c:	08 95       	ret
    184e:	80 e0       	ldi	r24, 0x00	; 0
    1850:	08 95       	ret

00001852 <__vector_11>:

/***************************TIMER0 ISR*****************************/

ISR(TIMER0_OVF_vect)
{
    1852:	1f 92       	push	r1
    1854:	0f 92       	push	r0
    1856:	0f b6       	in	r0, 0x3f	; 63
    1858:	0f 92       	push	r0
    185a:	11 24       	eor	r1, r1
    185c:	2f 93       	push	r18
    185e:	3f 93       	push	r19
    1860:	4f 93       	push	r20
    1862:	5f 93       	push	r21
    1864:	6f 93       	push	r22
    1866:	7f 93       	push	r23
    1868:	8f 93       	push	r24
    186a:	9f 93       	push	r25
    186c:	af 93       	push	r26
    186e:	bf 93       	push	r27
    1870:	ef 93       	push	r30
    1872:	ff 93       	push	r31
   static u32 OVFcounter = 0;
   OVFcounter++;
    1874:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <OVFcounter.1785>
    1878:	90 91 ae 02 	lds	r25, 0x02AE	; 0x8002ae <OVFcounter.1785+0x1>
    187c:	a0 91 af 02 	lds	r26, 0x02AF	; 0x8002af <OVFcounter.1785+0x2>
    1880:	b0 91 b0 02 	lds	r27, 0x02B0	; 0x8002b0 <OVFcounter.1785+0x3>
    1884:	01 96       	adiw	r24, 0x01	; 1
    1886:	a1 1d       	adc	r26, r1
    1888:	b1 1d       	adc	r27, r1
    188a:	80 93 ad 02 	sts	0x02AD, r24	; 0x8002ad <OVFcounter.1785>
    188e:	90 93 ae 02 	sts	0x02AE, r25	; 0x8002ae <OVFcounter.1785+0x1>
    1892:	a0 93 af 02 	sts	0x02AF, r26	; 0x8002af <OVFcounter.1785+0x2>
    1896:	b0 93 b0 02 	sts	0x02B0, r27	; 0x8002b0 <OVFcounter.1785+0x3>
   session_counter++;
    189a:	40 91 b5 02 	lds	r20, 0x02B5	; 0x8002b5 <session_counter>
    189e:	50 91 b6 02 	lds	r21, 0x02B6	; 0x8002b6 <session_counter+0x1>
    18a2:	60 91 b7 02 	lds	r22, 0x02B7	; 0x8002b7 <session_counter+0x2>
    18a6:	70 91 b8 02 	lds	r23, 0x02B8	; 0x8002b8 <session_counter+0x3>
    18aa:	4f 5f       	subi	r20, 0xFF	; 255
    18ac:	5f 4f       	sbci	r21, 0xFF	; 255
    18ae:	6f 4f       	sbci	r22, 0xFF	; 255
    18b0:	7f 4f       	sbci	r23, 0xFF	; 255
    18b2:	40 93 b5 02 	sts	0x02B5, r20	; 0x8002b5 <session_counter>
    18b6:	50 93 b6 02 	sts	0x02B6, r21	; 0x8002b6 <session_counter+0x1>
    18ba:	60 93 b7 02 	sts	0x02B7, r22	; 0x8002b7 <session_counter+0x2>
    18be:	70 93 b8 02 	sts	0x02B8, r23	; 0x8002b8 <session_counter+0x3>
   if(OVFcounter == NumberOfOverFlows)
    18c2:	40 91 ba 02 	lds	r20, 0x02BA	; 0x8002ba <NumberOfOverFlows>
    18c6:	50 91 bb 02 	lds	r21, 0x02BB	; 0x8002bb <NumberOfOverFlows+0x1>
    18ca:	60 91 bc 02 	lds	r22, 0x02BC	; 0x8002bc <NumberOfOverFlows+0x2>
    18ce:	70 91 bd 02 	lds	r23, 0x02BD	; 0x8002bd <NumberOfOverFlows+0x3>
    18d2:	84 17       	cp	r24, r20
    18d4:	95 07       	cpc	r25, r21
    18d6:	a6 07       	cpc	r26, r22
    18d8:	b7 07       	cpc	r27, r23
    18da:	99 f4       	brne	.+38     	; 0x1902 <__vector_11+0xb0>
   {
	   TCNT0 = 256 - NumberOfRemanningTicks;// Preload TCNT
    18dc:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <NumberOfRemanningTicks>
    18e0:	81 95       	neg	r24
    18e2:	82 bf       	out	0x32, r24	; 50
	   OVFcounter=0;
    18e4:	10 92 ad 02 	sts	0x02AD, r1	; 0x8002ad <OVFcounter.1785>
    18e8:	10 92 ae 02 	sts	0x02AE, r1	; 0x8002ae <OVFcounter.1785+0x1>
    18ec:	10 92 af 02 	sts	0x02AF, r1	; 0x8002af <OVFcounter.1785+0x2>
    18f0:	10 92 b0 02 	sts	0x02B0, r1	; 0x8002b0 <OVFcounter.1785+0x3>
	   if(PTR_TIMER0_OVF!=NULL)  //call function in application layer
    18f4:	e0 91 b3 02 	lds	r30, 0x02B3	; 0x8002b3 <PTR_TIMER0_OVF>
    18f8:	f0 91 b4 02 	lds	r31, 0x02B4	; 0x8002b4 <PTR_TIMER0_OVF+0x1>
    18fc:	30 97       	sbiw	r30, 0x00	; 0
    18fe:	09 f0       	breq	.+2      	; 0x1902 <__vector_11+0xb0>
	   {
		   PTR_TIMER0_OVF();
    1900:	09 95       	icall
	   }
   }
}
    1902:	ff 91       	pop	r31
    1904:	ef 91       	pop	r30
    1906:	bf 91       	pop	r27
    1908:	af 91       	pop	r26
    190a:	9f 91       	pop	r25
    190c:	8f 91       	pop	r24
    190e:	7f 91       	pop	r23
    1910:	6f 91       	pop	r22
    1912:	5f 91       	pop	r21
    1914:	4f 91       	pop	r20
    1916:	3f 91       	pop	r19
    1918:	2f 91       	pop	r18
    191a:	0f 90       	pop	r0
    191c:	0f be       	out	0x3f, r0	; 63
    191e:	0f 90       	pop	r0
    1920:	1f 90       	pop	r1
    1922:	18 95       	reti

00001924 <__vector_10>:

ISR(TIMER0_OC_vect)
{
    1924:	1f 92       	push	r1
    1926:	0f 92       	push	r0
    1928:	0f b6       	in	r0, 0x3f	; 63
    192a:	0f 92       	push	r0
    192c:	11 24       	eor	r1, r1
    192e:	2f 93       	push	r18
    1930:	3f 93       	push	r19
    1932:	4f 93       	push	r20
    1934:	5f 93       	push	r21
    1936:	6f 93       	push	r22
    1938:	7f 93       	push	r23
    193a:	8f 93       	push	r24
    193c:	9f 93       	push	r25
    193e:	af 93       	push	r26
    1940:	bf 93       	push	r27
    1942:	ef 93       	push	r30
    1944:	ff 93       	push	r31
   static u32 cmpcounter = 0;
   cmpcounter++;
    1946:	80 91 a9 02 	lds	r24, 0x02A9	; 0x8002a9 <cmpcounter.1791>
    194a:	90 91 aa 02 	lds	r25, 0x02AA	; 0x8002aa <cmpcounter.1791+0x1>
    194e:	a0 91 ab 02 	lds	r26, 0x02AB	; 0x8002ab <cmpcounter.1791+0x2>
    1952:	b0 91 ac 02 	lds	r27, 0x02AC	; 0x8002ac <cmpcounter.1791+0x3>
    1956:	01 96       	adiw	r24, 0x01	; 1
    1958:	a1 1d       	adc	r26, r1
    195a:	b1 1d       	adc	r27, r1
    195c:	80 93 a9 02 	sts	0x02A9, r24	; 0x8002a9 <cmpcounter.1791>
    1960:	90 93 aa 02 	sts	0x02AA, r25	; 0x8002aa <cmpcounter.1791+0x1>
    1964:	a0 93 ab 02 	sts	0x02AB, r26	; 0x8002ab <cmpcounter.1791+0x2>
    1968:	b0 93 ac 02 	sts	0x02AC, r27	; 0x8002ac <cmpcounter.1791+0x3>
   session_counter++;
    196c:	40 91 b5 02 	lds	r20, 0x02B5	; 0x8002b5 <session_counter>
    1970:	50 91 b6 02 	lds	r21, 0x02B6	; 0x8002b6 <session_counter+0x1>
    1974:	60 91 b7 02 	lds	r22, 0x02B7	; 0x8002b7 <session_counter+0x2>
    1978:	70 91 b8 02 	lds	r23, 0x02B8	; 0x8002b8 <session_counter+0x3>
    197c:	4f 5f       	subi	r20, 0xFF	; 255
    197e:	5f 4f       	sbci	r21, 0xFF	; 255
    1980:	6f 4f       	sbci	r22, 0xFF	; 255
    1982:	7f 4f       	sbci	r23, 0xFF	; 255
    1984:	40 93 b5 02 	sts	0x02B5, r20	; 0x8002b5 <session_counter>
    1988:	50 93 b6 02 	sts	0x02B6, r21	; 0x8002b6 <session_counter+0x1>
    198c:	60 93 b7 02 	sts	0x02B7, r22	; 0x8002b7 <session_counter+0x2>
    1990:	70 93 b8 02 	sts	0x02B8, r23	; 0x8002b8 <session_counter+0x3>
   if(cmpcounter == NumberOfCmpMatches)
    1994:	89 2b       	or	r24, r25
    1996:	8a 2b       	or	r24, r26
    1998:	8b 2b       	or	r24, r27
    199a:	79 f4       	brne	.+30     	; 0x19ba <__vector_10+0x96>
   {
	   cmpcounter=0;
    199c:	10 92 a9 02 	sts	0x02A9, r1	; 0x8002a9 <cmpcounter.1791>
    19a0:	10 92 aa 02 	sts	0x02AA, r1	; 0x8002aa <cmpcounter.1791+0x1>
    19a4:	10 92 ab 02 	sts	0x02AB, r1	; 0x8002ab <cmpcounter.1791+0x2>
    19a8:	10 92 ac 02 	sts	0x02AC, r1	; 0x8002ac <cmpcounter.1791+0x3>
	   if(PTR_TIMER0_OC!=NULL)
    19ac:	e0 91 b1 02 	lds	r30, 0x02B1	; 0x8002b1 <PTR_TIMER0_OC>
    19b0:	f0 91 b2 02 	lds	r31, 0x02B2	; 0x8002b2 <PTR_TIMER0_OC+0x1>
    19b4:	30 97       	sbiw	r30, 0x00	; 0
    19b6:	09 f0       	breq	.+2      	; 0x19ba <__vector_10+0x96>
	   {
		   PTR_TIMER0_OC();
    19b8:	09 95       	icall
	   }
   }
}
    19ba:	ff 91       	pop	r31
    19bc:	ef 91       	pop	r30
    19be:	bf 91       	pop	r27
    19c0:	af 91       	pop	r26
    19c2:	9f 91       	pop	r25
    19c4:	8f 91       	pop	r24
    19c6:	7f 91       	pop	r23
    19c8:	6f 91       	pop	r22
    19ca:	5f 91       	pop	r21
    19cc:	4f 91       	pop	r20
    19ce:	3f 91       	pop	r19
    19d0:	2f 91       	pop	r18
    19d2:	0f 90       	pop	r0
    19d4:	0f be       	out	0x3f, r0	; 63
    19d6:	0f 90       	pop	r0
    19d8:	1f 90       	pop	r1
    19da:	18 95       	reti

000019dc <__vector_9>:
	OCR1B = value;
}

/************************************ ISR *************************************/
ISR(TIMER1_OVF_vect)
{
    19dc:	1f 92       	push	r1
    19de:	0f 92       	push	r0
    19e0:	0f b6       	in	r0, 0x3f	; 63
    19e2:	0f 92       	push	r0
    19e4:	11 24       	eor	r1, r1
    19e6:	2f 93       	push	r18
    19e8:	3f 93       	push	r19
    19ea:	4f 93       	push	r20
    19ec:	5f 93       	push	r21
    19ee:	6f 93       	push	r22
    19f0:	7f 93       	push	r23
    19f2:	8f 93       	push	r24
    19f4:	9f 93       	push	r25
    19f6:	af 93       	push	r26
    19f8:	bf 93       	push	r27
    19fa:	ef 93       	push	r30
    19fc:	ff 93       	push	r31
	if(Timer1_OVF_ptr_func!=NULL)
    19fe:	e0 91 c4 02 	lds	r30, 0x02C4	; 0x8002c4 <Timer1_OVF_ptr_func>
    1a02:	f0 91 c5 02 	lds	r31, 0x02C5	; 0x8002c5 <Timer1_OVF_ptr_func+0x1>
    1a06:	30 97       	sbiw	r30, 0x00	; 0
    1a08:	09 f0       	breq	.+2      	; 0x1a0c <__vector_9+0x30>
	{
		Timer1_OVF_ptr_func();
    1a0a:	09 95       	icall
	}
}
    1a0c:	ff 91       	pop	r31
    1a0e:	ef 91       	pop	r30
    1a10:	bf 91       	pop	r27
    1a12:	af 91       	pop	r26
    1a14:	9f 91       	pop	r25
    1a16:	8f 91       	pop	r24
    1a18:	7f 91       	pop	r23
    1a1a:	6f 91       	pop	r22
    1a1c:	5f 91       	pop	r21
    1a1e:	4f 91       	pop	r20
    1a20:	3f 91       	pop	r19
    1a22:	2f 91       	pop	r18
    1a24:	0f 90       	pop	r0
    1a26:	0f be       	out	0x3f, r0	; 63
    1a28:	0f 90       	pop	r0
    1a2a:	1f 90       	pop	r1
    1a2c:	18 95       	reti

00001a2e <__vector_7>:
ISR(TIMER1_OCA_vect)
{
    1a2e:	1f 92       	push	r1
    1a30:	0f 92       	push	r0
    1a32:	0f b6       	in	r0, 0x3f	; 63
    1a34:	0f 92       	push	r0
    1a36:	11 24       	eor	r1, r1
    1a38:	2f 93       	push	r18
    1a3a:	3f 93       	push	r19
    1a3c:	4f 93       	push	r20
    1a3e:	5f 93       	push	r21
    1a40:	6f 93       	push	r22
    1a42:	7f 93       	push	r23
    1a44:	8f 93       	push	r24
    1a46:	9f 93       	push	r25
    1a48:	af 93       	push	r26
    1a4a:	bf 93       	push	r27
    1a4c:	ef 93       	push	r30
    1a4e:	ff 93       	push	r31
	if(Timer1_OCA_ptr_func!=NULL)
    1a50:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <Timer1_OCA_ptr_func>
    1a54:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <Timer1_OCA_ptr_func+0x1>
    1a58:	30 97       	sbiw	r30, 0x00	; 0
    1a5a:	09 f0       	breq	.+2      	; 0x1a5e <__vector_7+0x30>
	{
		Timer1_OCA_ptr_func();
    1a5c:	09 95       	icall
	}
}
    1a5e:	ff 91       	pop	r31
    1a60:	ef 91       	pop	r30
    1a62:	bf 91       	pop	r27
    1a64:	af 91       	pop	r26
    1a66:	9f 91       	pop	r25
    1a68:	8f 91       	pop	r24
    1a6a:	7f 91       	pop	r23
    1a6c:	6f 91       	pop	r22
    1a6e:	5f 91       	pop	r21
    1a70:	4f 91       	pop	r20
    1a72:	3f 91       	pop	r19
    1a74:	2f 91       	pop	r18
    1a76:	0f 90       	pop	r0
    1a78:	0f be       	out	0x3f, r0	; 63
    1a7a:	0f 90       	pop	r0
    1a7c:	1f 90       	pop	r1
    1a7e:	18 95       	reti

00001a80 <__vector_8>:
ISR(TIMER1_OCB_vect)
{
    1a80:	1f 92       	push	r1
    1a82:	0f 92       	push	r0
    1a84:	0f b6       	in	r0, 0x3f	; 63
    1a86:	0f 92       	push	r0
    1a88:	11 24       	eor	r1, r1
    1a8a:	2f 93       	push	r18
    1a8c:	3f 93       	push	r19
    1a8e:	4f 93       	push	r20
    1a90:	5f 93       	push	r21
    1a92:	6f 93       	push	r22
    1a94:	7f 93       	push	r23
    1a96:	8f 93       	push	r24
    1a98:	9f 93       	push	r25
    1a9a:	af 93       	push	r26
    1a9c:	bf 93       	push	r27
    1a9e:	ef 93       	push	r30
    1aa0:	ff 93       	push	r31
	if(Timer1_OCB_ptr_func!=NULL)
    1aa2:	e0 91 c0 02 	lds	r30, 0x02C0	; 0x8002c0 <Timer1_OCB_ptr_func>
    1aa6:	f0 91 c1 02 	lds	r31, 0x02C1	; 0x8002c1 <Timer1_OCB_ptr_func+0x1>
    1aaa:	30 97       	sbiw	r30, 0x00	; 0
    1aac:	09 f0       	breq	.+2      	; 0x1ab0 <__vector_8+0x30>
	{
		Timer1_OCB_ptr_func();
    1aae:	09 95       	icall
	}
}
    1ab0:	ff 91       	pop	r31
    1ab2:	ef 91       	pop	r30
    1ab4:	bf 91       	pop	r27
    1ab6:	af 91       	pop	r26
    1ab8:	9f 91       	pop	r25
    1aba:	8f 91       	pop	r24
    1abc:	7f 91       	pop	r23
    1abe:	6f 91       	pop	r22
    1ac0:	5f 91       	pop	r21
    1ac2:	4f 91       	pop	r20
    1ac4:	3f 91       	pop	r19
    1ac6:	2f 91       	pop	r18
    1ac8:	0f 90       	pop	r0
    1aca:	0f be       	out	0x3f, r0	; 63
    1acc:	0f 90       	pop	r0
    1ace:	1f 90       	pop	r1
    1ad0:	18 95       	reti

00001ad2 <__vector_6>:
ISR(TIMER1_ICU_vect)
{
    1ad2:	1f 92       	push	r1
    1ad4:	0f 92       	push	r0
    1ad6:	0f b6       	in	r0, 0x3f	; 63
    1ad8:	0f 92       	push	r0
    1ada:	11 24       	eor	r1, r1
    1adc:	2f 93       	push	r18
    1ade:	3f 93       	push	r19
    1ae0:	4f 93       	push	r20
    1ae2:	5f 93       	push	r21
    1ae4:	6f 93       	push	r22
    1ae6:	7f 93       	push	r23
    1ae8:	8f 93       	push	r24
    1aea:	9f 93       	push	r25
    1aec:	af 93       	push	r26
    1aee:	bf 93       	push	r27
    1af0:	ef 93       	push	r30
    1af2:	ff 93       	push	r31
	if(Timer1_ICU_ptr_func!=NULL)
    1af4:	e0 91 be 02 	lds	r30, 0x02BE	; 0x8002be <Timer1_ICU_ptr_func>
    1af8:	f0 91 bf 02 	lds	r31, 0x02BF	; 0x8002bf <Timer1_ICU_ptr_func+0x1>
    1afc:	30 97       	sbiw	r30, 0x00	; 0
    1afe:	09 f0       	breq	.+2      	; 0x1b02 <__vector_6+0x30>
	{
		Timer1_ICU_ptr_func();
    1b00:	09 95       	icall
	}
}
    1b02:	ff 91       	pop	r31
    1b04:	ef 91       	pop	r30
    1b06:	bf 91       	pop	r27
    1b08:	af 91       	pop	r26
    1b0a:	9f 91       	pop	r25
    1b0c:	8f 91       	pop	r24
    1b0e:	7f 91       	pop	r23
    1b10:	6f 91       	pop	r22
    1b12:	5f 91       	pop	r21
    1b14:	4f 91       	pop	r20
    1b16:	3f 91       	pop	r19
    1b18:	2f 91       	pop	r18
    1b1a:	0f 90       	pop	r0
    1b1c:	0f be       	out	0x3f, r0	; 63
    1b1e:	0f 90       	pop	r0
    1b20:	1f 90       	pop	r1
    1b22:	18 95       	reti

00001b24 <M_TWI_voidInit>:
	//clear flag - enable ACK - enable TWI
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
	//wait until job finished
	while(READ_BIT(TWCR,TWINT)==0);
	//return data
	*ptr = TWDR;
    1b24:	81 b1       	in	r24, 0x01	; 1
    1b26:	8d 7f       	andi	r24, 0xFD	; 253
    1b28:	81 b9       	out	0x01, r24	; 1
    1b2a:	81 b1       	in	r24, 0x01	; 1
    1b2c:	8e 7f       	andi	r24, 0xFE	; 254
    1b2e:	81 b9       	out	0x01, r24	; 1
    1b30:	82 e0       	ldi	r24, 0x02	; 2
    1b32:	80 b9       	out	0x00, r24	; 0
    1b34:	86 b7       	in	r24, 0x36	; 54
    1b36:	84 60       	ori	r24, 0x04	; 4
    1b38:	86 bf       	out	0x36, r24	; 54
    1b3a:	08 95       	ret

00001b3c <M_TWI_voidSendStart>:
    1b3c:	84 ea       	ldi	r24, 0xA4	; 164
    1b3e:	86 bf       	out	0x36, r24	; 54
    1b40:	06 b6       	in	r0, 0x36	; 54
    1b42:	07 fe       	sbrs	r0, 7
    1b44:	fd cf       	rjmp	.-6      	; 0x1b40 <M_TWI_voidSendStart+0x4>
    1b46:	08 95       	ret

00001b48 <M_TWI_voidSendStop>:
    1b48:	84 e9       	ldi	r24, 0x94	; 148
    1b4a:	86 bf       	out	0x36, r24	; 54
    1b4c:	08 95       	ret

00001b4e <M_TWI_voidSendByte>:
    1b4e:	83 b9       	out	0x03, r24	; 3
    1b50:	84 e8       	ldi	r24, 0x84	; 132
    1b52:	86 bf       	out	0x36, r24	; 54
    1b54:	06 b6       	in	r0, 0x36	; 54
    1b56:	07 fe       	sbrs	r0, 7
    1b58:	fd cf       	rjmp	.-6      	; 0x1b54 <M_TWI_voidSendByte+0x6>
    1b5a:	08 95       	ret

00001b5c <M_TWI_voidRecieveByte_NoAck>:

}
void M_TWI_voidRecieveByte_NoAck(u8*ptr)
{
    1b5c:	fc 01       	movw	r30, r24
	//disable ACK
	CLEAR_BIT(TWCR,TWEA);
    1b5e:	96 b7       	in	r25, 0x36	; 54
    1b60:	9f 7b       	andi	r25, 0xBF	; 191
    1b62:	96 bf       	out	0x36, r25	; 54
	//clear flag - enable TWI
	TWCR = (1<<TWINT)|(1<<TWEN);
    1b64:	84 e8       	ldi	r24, 0x84	; 132
    1b66:	86 bf       	out	0x36, r24	; 54
	//wait until job finished
	while(READ_BIT(TWCR,TWINT)==0);
    1b68:	06 b6       	in	r0, 0x36	; 54
    1b6a:	07 fe       	sbrs	r0, 7
    1b6c:	fd cf       	rjmp	.-6      	; 0x1b68 <M_TWI_voidRecieveByte_NoAck+0xc>
	//return data
	*ptr = TWDR;
    1b6e:	83 b1       	in	r24, 0x03	; 3
    1b70:	80 83       	st	Z, r24
    1b72:	08 95       	ret

00001b74 <M_TWI_u8GetStatus>:
}
u8 M_TWI_u8GetStatus(void)
{
  return (TWSR & TWI_STATUS_MUSK);
    1b74:	81 b1       	in	r24, 0x01	; 1
}
    1b76:	88 7f       	andi	r24, 0xF8	; 248
    1b78:	08 95       	ret

00001b7a <M_UART_voidInit>:
	UART_RX_Fptr = LocalFptr;
}

void M_UART_void_TX_SetCallBack(void (*LocalFptr)(void))
{
	UART_TX_Fptr = LocalFptr;
    1b7a:	83 e3       	ldi	r24, 0x33	; 51
    1b7c:	89 b9       	out	0x09, r24	; 9
    1b7e:	8b b1       	in	r24, 0x0b	; 11
    1b80:	8d 7f       	andi	r24, 0xFD	; 253
    1b82:	8b b9       	out	0x0b, r24	; 11
    1b84:	8a b1       	in	r24, 0x0a	; 10
    1b86:	88 60       	ori	r24, 0x08	; 8
    1b88:	8a b9       	out	0x0a, r24	; 10
    1b8a:	8a b1       	in	r24, 0x0a	; 10
    1b8c:	80 61       	ori	r24, 0x10	; 16
    1b8e:	8a b9       	out	0x0a, r24	; 10
    1b90:	08 95       	ret

00001b92 <M_UART_voidSend>:
    1b92:	5d 9b       	sbis	0x0b, 5	; 11
    1b94:	fe cf       	rjmp	.-4      	; 0x1b92 <M_UART_voidSend>
    1b96:	8c b9       	out	0x0c, r24	; 12
    1b98:	08 95       	ret

00001b9a <M_UART_u8ReceiveNoBlock>:
    1b9a:	8c b1       	in	r24, 0x0c	; 12
    1b9c:	08 95       	ret

00001b9e <M_UART_void_RX_InterruptEnable>:
    1b9e:	8a b1       	in	r24, 0x0a	; 10
    1ba0:	80 68       	ori	r24, 0x80	; 128
    1ba2:	8a b9       	out	0x0a, r24	; 10
    1ba4:	08 95       	ret

00001ba6 <M_UART_void_RX_SetCallBack>:
    1ba6:	90 93 c9 02 	sts	0x02C9, r25	; 0x8002c9 <UART_RX_Fptr+0x1>
    1baa:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <UART_RX_Fptr>
    1bae:	08 95       	ret

00001bb0 <__vector_13>:
}

 /****************************************************/
 ISR(UART_RX_vect)
 {
    1bb0:	1f 92       	push	r1
    1bb2:	0f 92       	push	r0
    1bb4:	0f b6       	in	r0, 0x3f	; 63
    1bb6:	0f 92       	push	r0
    1bb8:	11 24       	eor	r1, r1
    1bba:	2f 93       	push	r18
    1bbc:	3f 93       	push	r19
    1bbe:	4f 93       	push	r20
    1bc0:	5f 93       	push	r21
    1bc2:	6f 93       	push	r22
    1bc4:	7f 93       	push	r23
    1bc6:	8f 93       	push	r24
    1bc8:	9f 93       	push	r25
    1bca:	af 93       	push	r26
    1bcc:	bf 93       	push	r27
    1bce:	ef 93       	push	r30
    1bd0:	ff 93       	push	r31
 	if (UART_RX_Fptr!=NULL)
    1bd2:	e0 91 c8 02 	lds	r30, 0x02C8	; 0x8002c8 <UART_RX_Fptr>
    1bd6:	f0 91 c9 02 	lds	r31, 0x02C9	; 0x8002c9 <UART_RX_Fptr+0x1>
    1bda:	30 97       	sbiw	r30, 0x00	; 0
    1bdc:	09 f0       	breq	.+2      	; 0x1be0 <__vector_13+0x30>
 	{
 		UART_RX_Fptr();
    1bde:	09 95       	icall
 	}
 }
    1be0:	ff 91       	pop	r31
    1be2:	ef 91       	pop	r30
    1be4:	bf 91       	pop	r27
    1be6:	af 91       	pop	r26
    1be8:	9f 91       	pop	r25
    1bea:	8f 91       	pop	r24
    1bec:	7f 91       	pop	r23
    1bee:	6f 91       	pop	r22
    1bf0:	5f 91       	pop	r21
    1bf2:	4f 91       	pop	r20
    1bf4:	3f 91       	pop	r19
    1bf6:	2f 91       	pop	r18
    1bf8:	0f 90       	pop	r0
    1bfa:	0f be       	out	0x3f, r0	; 63
    1bfc:	0f 90       	pop	r0
    1bfe:	1f 90       	pop	r1
    1c00:	18 95       	reti

00001c02 <__vector_15>:

 ISR(UART_TX_vect)
 {
    1c02:	1f 92       	push	r1
    1c04:	0f 92       	push	r0
    1c06:	0f b6       	in	r0, 0x3f	; 63
    1c08:	0f 92       	push	r0
    1c0a:	11 24       	eor	r1, r1
    1c0c:	2f 93       	push	r18
    1c0e:	3f 93       	push	r19
    1c10:	4f 93       	push	r20
    1c12:	5f 93       	push	r21
    1c14:	6f 93       	push	r22
    1c16:	7f 93       	push	r23
    1c18:	8f 93       	push	r24
    1c1a:	9f 93       	push	r25
    1c1c:	af 93       	push	r26
    1c1e:	bf 93       	push	r27
    1c20:	ef 93       	push	r30
    1c22:	ff 93       	push	r31
 	if (UART_TX_Fptr!=NULL)
    1c24:	e0 91 c6 02 	lds	r30, 0x02C6	; 0x8002c6 <UART_TX_Fptr>
    1c28:	f0 91 c7 02 	lds	r31, 0x02C7	; 0x8002c7 <UART_TX_Fptr+0x1>
    1c2c:	30 97       	sbiw	r30, 0x00	; 0
    1c2e:	09 f0       	breq	.+2      	; 0x1c32 <__vector_15+0x30>
 	{
 		UART_TX_Fptr();
    1c30:	09 95       	icall
 	}
 }
    1c32:	ff 91       	pop	r31
    1c34:	ef 91       	pop	r30
    1c36:	bf 91       	pop	r27
    1c38:	af 91       	pop	r26
    1c3a:	9f 91       	pop	r25
    1c3c:	8f 91       	pop	r24
    1c3e:	7f 91       	pop	r23
    1c40:	6f 91       	pop	r22
    1c42:	5f 91       	pop	r21
    1c44:	4f 91       	pop	r20
    1c46:	3f 91       	pop	r19
    1c48:	2f 91       	pop	r18
    1c4a:	0f 90       	pop	r0
    1c4c:	0f be       	out	0x3f, r0	; 63
    1c4e:	0f 90       	pop	r0
    1c50:	1f 90       	pop	r1
    1c52:	18 95       	reti

00001c54 <rx_func>:
{
	M_UART_void_RX_SetCallBack(RX_FUNC);
	M_UART_void_RX_InterruptEnable();
	RX_str=str;

}
    1c54:	cf 93       	push	r28
    1c56:	df 93       	push	r29
    1c58:	c0 91 d0 02 	lds	r28, 0x02D0	; 0x8002d0 <rs_str>
    1c5c:	d0 91 d1 02 	lds	r29, 0x02D1	; 0x8002d1 <rs_str+0x1>
    1c60:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <M_UART_u8ReceiveNoBlock>
    1c64:	88 83       	st	Y, r24
    1c66:	df 91       	pop	r29
    1c68:	cf 91       	pop	r28
    1c6a:	08 95       	ret

00001c6c <S_UART_void_ReceiveCharAsynch>:
/***********************************************/
u8*rs_str;
static void rx_func (void);

void S_UART_void_ReceiveCharAsynch(u8*data_var)
{
    1c6c:	cf 93       	push	r28
    1c6e:	df 93       	push	r29
    1c70:	ec 01       	movw	r28, r24
	M_UART_void_RX_SetCallBack(rx_func);
    1c72:	8a e2       	ldi	r24, 0x2A	; 42
    1c74:	9e e0       	ldi	r25, 0x0E	; 14
    1c76:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <M_UART_void_RX_SetCallBack>
	M_UART_void_RX_InterruptEnable();
    1c7a:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <M_UART_void_RX_InterruptEnable>
	rs_str=data_var;
    1c7e:	d0 93 d1 02 	sts	0x02D1, r29	; 0x8002d1 <rs_str+0x1>
    1c82:	c0 93 d0 02 	sts	0x02D0, r28	; 0x8002d0 <rs_str>
}
    1c86:	df 91       	pop	r29
    1c88:	cf 91       	pop	r28
    1c8a:	08 95       	ret

00001c8c <__tablejump2__>:
    1c8c:	ee 0f       	add	r30, r30
    1c8e:	ff 1f       	adc	r31, r31
    1c90:	05 90       	lpm	r0, Z+
    1c92:	f4 91       	lpm	r31, Z
    1c94:	e0 2d       	mov	r30, r0
    1c96:	09 94       	ijmp

00001c98 <_exit>:
    1c98:	f8 94       	cli

00001c9a <__stop_program>:
    1c9a:	ff cf       	rjmp	.-2      	; 0x1c9a <__stop_program>
